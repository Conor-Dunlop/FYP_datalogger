
datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea4  0800cea4  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cea4  0800cea4  0001cea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceac  0800ceac  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ceb0  0800ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800ceb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  2000021c  0800d0d0  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017bc  0800d0d0  000217bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025808  00000000  00000000  0002028f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000593d  00000000  00000000  00045a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  0004b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000169e  00000000  00000000  0004d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002834f  00000000  00000000  0004e826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a50b  00000000  00000000  00076b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec308  00000000  00000000  000a1080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080b8  00000000  00000000  0018d388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00195440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000021c 	.word	0x2000021c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cdac 	.word	0x0800cdac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000220 	.word	0x20000220
 800021c:	0800cdac 	.word	0x0800cdac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	; 0x30
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f00b ff65 	bl	800c4a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000604:	2204      	movs	r2, #4
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000616:	2201      	movs	r2, #1
 8000618:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000646:	f001 fad7 	bl	8001bf8 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000650:	f000 fce1 	bl	8001016 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000660:	f002 fbdc 	bl	8002e1c <HAL_ADCEx_MultiModeConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800066a:	f000 fcd4 	bl	8001016 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000672:	2306      	movs	r3, #6
 8000674:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067a:	237f      	movs	r3, #127	; 0x7f
 800067c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067e:	2304      	movs	r3, #4
 8000680:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800068c:	f001 fe0e 	bl	80022ac <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000696:	f000 fcbe 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	; 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000238 	.word	0x20000238
 80006a8:	04300002 	.word	0x04300002

080006ac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00b fef3 	bl	800c4a4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_ADC2_Init+0xc0>)
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <MX_ADC2_Init+0xc4>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC2_Init+0xc0>)
 80006c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC2_Init+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC2_Init+0xc0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC2_Init+0xc0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC2_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC2_Init+0xc0>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC2_Init+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC2_Init+0xc0>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ADC2_Init+0xc0>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_ADC2_Init+0xc0>)
 8000728:	f001 fa66 	bl	8001bf8 <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 fc70 	bl	8001016 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC2_Init+0xc8>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	; 0x7f
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC2_Init+0xc0>)
 8000754:	f001 fdaa 	bl	80022ac <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800075e:	f000 fc5a 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200002a4 	.word	0x200002a4
 8000770:	50000100 	.word	0x50000100
 8000774:	2e300800 	.word	0x2e300800

08000778 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09e      	sub	sp, #120	; 0x78
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2244      	movs	r2, #68	; 0x44
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f00b fe83 	bl	800c4a4 <memset>
  if(adcHandle->Instance==ADC1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007a6:	d16f      	bne.n	8000888 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fcc3 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007c4:	f000 fc27 	bl	8001016 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007c8:	4b52      	ldr	r3, [pc, #328]	; (8000914 <HAL_ADC_MspInit+0x19c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a51      	ldr	r2, [pc, #324]	; (8000914 <HAL_ADC_MspInit+0x19c>)
 80007d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007d2:	4b50      	ldr	r3, [pc, #320]	; (8000914 <HAL_ADC_MspInit+0x19c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10b      	bne.n	80007f2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007da:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a4e      	ldr	r2, [pc, #312]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80007e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b49      	ldr	r3, [pc, #292]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a48      	ldr	r2, [pc, #288]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b46      	ldr	r3, [pc, #280]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b43      	ldr	r3, [pc, #268]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a42      	ldr	r2, [pc, #264]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b40      	ldr	r3, [pc, #256]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a3c      	ldr	r2, [pc, #240]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = SIG_4_Pin|SIG_2_Pin|ADC_9_Pin|ADC_10_Pin;
 800083a:	230f      	movs	r3, #15
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083e:	2303      	movs	r3, #3
 8000840:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800084a:	4619      	mov	r1, r3
 800084c:	4833      	ldr	r0, [pc, #204]	; (800091c <HAL_ADC_MspInit+0x1a4>)
 800084e:	f002 fe73 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_4_Pin;
 8000852:	230b      	movs	r3, #11
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	2303      	movs	r3, #3
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f002 fe66 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_OUT_Pin|ADC_3_Pin|GPIO_PIN_14;
 800086c:	f245 0301 	movw	r3, #20481	; 0x5001
 8000870:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000872:	2303      	movs	r3, #3
 8000874:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800087e:	4619      	mov	r1, r3
 8000880:	4827      	ldr	r0, [pc, #156]	; (8000920 <HAL_ADC_MspInit+0x1a8>)
 8000882:	f002 fe59 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000886:	e041      	b.n	800090c <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a25      	ldr	r2, [pc, #148]	; (8000924 <HAL_ADC_MspInit+0x1ac>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d13c      	bne.n	800090c <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000896:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000898:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800089c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fc4e 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 80008ae:	f000 fbb2 	bl	8001016 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_ADC_MspInit+0x19c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a16      	ldr	r2, [pc, #88]	; (8000914 <HAL_ADC_MspInit+0x19c>)
 80008ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_ADC_MspInit+0x19c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10b      	bne.n	80008dc <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80008ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_ADC_MspInit+0x1a0>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ADC_12_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_ADC_MspInit+0x1a4>)
 8000908:	f002 fe16 	bl	8003538 <HAL_GPIO_Init>
}
 800090c:	bf00      	nop
 800090e:	3778      	adds	r7, #120	; 0x78
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000310 	.word	0x20000310
 8000918:	40021000 	.word	0x40021000
 800091c:	48000800 	.word	0x48000800
 8000920:	48000400 	.word	0x48000400
 8000924:	50000100 	.word	0x50000100

08000928 <ADC_Get_val>:
	{
	  Error_Handler();
	}
}

uint16_t ADC_Get_val(adc_t* adc){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  // logan henderson wrote this code
	if (HAL_ADC_ConfigChannel(adc->hadc, &adc->config) != HAL_OK)Error_Handler();
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fcb7 	bl	80022ac <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <ADC_Get_val+0x20>
 8000944:	f000 fb67 	bl	8001016 <Error_Handler>
  HAL_ADC_Start(adc->hadc);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fad7 	bl	8001f00 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(adc->hadc, 1);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a1b      	ldr	r3, [r3, #32]
 8000956:	2101      	movs	r1, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fbc1 	bl	80020e0 <HAL_ADC_PollForConversion>
  uint16_t val = HAL_ADC_GetValue(adc->hadc);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a1b      	ldr	r3, [r3, #32]
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fc94 	bl	8002290 <HAL_ADC_GetValue>
 8000968:	4603      	mov	r3, r0
 800096a:	81fb      	strh	r3, [r7, #14]
  HAL_ADC_Stop(adc->hadc);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a1b      	ldr	r3, [r3, #32]
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fb81 	bl	8002078 <HAL_ADC_Stop>
  adc->last_value = val;
 8000976:	89fa      	ldrh	r2, [r7, #14]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  return val;
 800097c:	89fb      	ldrh	r3, [r7, #14]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2230      	movs	r2, #48	; 0x30
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f00b fd85 	bl	800c4a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_DAC1_Init+0x80>)
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <MX_DAC1_Init+0x84>)
 800099e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <MX_DAC1_Init+0x80>)
 80009a2:	f002 fbee 	bl	8003182 <HAL_DAC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009ac:	f000 fb33 	bl	8001016 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80009b0:	2302      	movs	r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_DAC1_Init+0x80>)
 80009dc:	f002 fbf4 	bl	80031c8 <HAL_DAC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80009e6:	f000 fb16 	bl	8001016 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	2210      	movs	r2, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_DAC1_Init+0x80>)
 80009f2:	f002 fbe9 	bl	80031c8 <HAL_DAC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80009fc:	f000 fb0b 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000314 	.word	0x20000314
 8000a0c:	50000800 	.word	0x50000800

08000a10 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_DAC_MspInit+0x74>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d124      	bne.n	8000a7c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_DAC_MspInit+0x78>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 8000a62:	2330      	movs	r3, #48	; 0x30
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f002 fd5e 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	50000800 	.word	0x50000800
 8000a88:	40021000 	.word	0x40021000

08000a8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a47      	ldr	r2, [pc, #284]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a41      	ldr	r2, [pc, #260]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a3b      	ldr	r2, [pc, #236]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <MX_GPIO_Init+0x150>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin
 8000b02:	2200      	movs	r2, #0
 8000b04:	f24a 41a2 	movw	r1, #42146	; 0xa4a2
 8000b08:	4835      	ldr	r0, [pc, #212]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000b0a:	f002 feaf 	bl	800386c <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000b14:	4833      	ldr	r0, [pc, #204]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000b16:	f002 fea9 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f002 fea2 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin;
 8000b28:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4829      	ldr	r0, [pc, #164]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000b3e:	f002 fcfb 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 8000b42:	2304      	movs	r3, #4
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f002 fcee 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin
 8000b5c:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
 8000b60:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000b76:	f002 fcdf 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_STATUS_Pin|DIGITAL_IO_4_Pin|SD_CARD_DETECT_Pin;
 8000b7a:	f640 2304 	movw	r3, #2564	; 0xa04
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000b90:	f002 fcd2 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin;
 8000b94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000bae:	f002 fcc3 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8000bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f002 fcb3 	bl	8003538 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800

08000be8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_I2C2_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000bf4:	f240 1203 	movw	r2, #259	; 0x103
 8000bf8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c26:	f002 fe53 	bl	80038d0 <HAL_I2C_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c30:	f000 f9f1 	bl	8001016 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c38:	f002 fee5 	bl	8003a06 <HAL_I2CEx_ConfigAnalogFilter>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c42:	f000 f9e8 	bl	8001016 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_I2C2_Init+0x74>)
 8000c4a:	f002 ff27 	bl	8003a9c <HAL_I2CEx_ConfigDigitalFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c54:	f000 f9df 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000328 	.word	0x20000328
 8000c60:	40005800 	.word	0x40005800

08000c64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09c      	sub	sp, #112	; 0x70
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	2244      	movs	r2, #68	; 0x44
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f00b fc0d 	bl	800c4a4 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <HAL_I2C_MspInit+0xe0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d153      	bne.n	8000d3c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 fa4f 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f000 f9b3 	bl	8001016 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a24      	ldr	r2, [pc, #144]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <HAL_I2C_MspInit+0xe8>)
 8000cfc:	f002 fc1c 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	2312      	movs	r3, #18
 8000d08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d12:	2304      	movs	r3, #4
 8000d14:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f002 fc0a 	bl	8003538 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_I2C_MspInit+0xe4>)
 8000d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3770      	adds	r7, #112	; 0x70
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40005800 	.word	0x40005800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48000800 	.word	0x48000800

08000d50 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b0d0      	sub	sp, #320	; 0x140
 8000d54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fc42 	bl	80015de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f90d 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f7ff fe95 	bl	8000a8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d62:	f7ff fc2b 	bl	80005bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d66:	f7ff fca1 	bl	80006ac <MX_ADC2_Init>
  MX_DAC1_Init();
 8000d6a:	f7ff fe0d 	bl	8000988 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000d6e:	f000 f9cb 	bl	8001108 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8000d72:	f000 fb37 	bl	80013e4 <MX_UCPD1_Init>
  MX_I2C2_Init();
 8000d76:	f7ff ff37 	bl	8000be8 <MX_I2C2_Init>
  MX_RTC_Init();
 8000d7a:	f000 f951 	bl	8001020 <MX_RTC_Init>
  MX_USB_Device_Init();
 8000d7e:	f00a fe53 	bl	800ba28 <MX_USB_Device_Init>
  MX_UART4_Init();
 8000d82:	f000 fb5d 	bl	8001440 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  adc_t ADC_1 = {
 8000d86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d8a:	2228      	movs	r2, #40	; 0x28
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00b fb88 	bl	800c4a4 <memset>
 8000d94:	4b70      	ldr	r3, [pc, #448]	; (8000f58 <main+0x208>)
 8000d96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000da0:	2301      	movs	r3, #1
 8000da2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000da6:	237f      	movs	r3, #127	; 0x7f
 8000da8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000dac:	2304      	movs	r3, #4
 8000dae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000db2:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <main+0x20c>)
 8000db4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    },
    .hadc = &hadc1
  };
  

  uint8_t count = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  uint8_t count_btn = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  uint8_t count_state = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  if (HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin) == GPIO_PIN_SET) count_btn--;
 8000dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dce:	4864      	ldr	r0, [pc, #400]	; (8000f60 <main+0x210>)
 8000dd0:	f002 fd34 	bl	800383c <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d104      	bne.n	8000de4 <main+0x94>
 8000dda:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  if (HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin) == GPIO_PIN_SET) count_btn++;
 8000de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de8:	485d      	ldr	r0, [pc, #372]	; (8000f60 <main+0x210>)
 8000dea:	f002 fd27 	bl	800383c <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d104      	bne.n	8000dfe <main+0xae>
 8000df4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  if (HAL_GPIO_ReadPin(ENTER_BTN_GPIO_Port, ENTER_BTN_Pin) == GPIO_PIN_SET) count_state++;
 8000dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e02:	4857      	ldr	r0, [pc, #348]	; (8000f60 <main+0x210>)
 8000e04:	f002 fd1a 	bl	800383c <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <main+0xc8>
 8000e0e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8000e12:	3301      	adds	r3, #1
 8000e14:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
  if (count_state >= 5) count_state = 0; 
 8000e18:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d902      	bls.n	8000e26 <main+0xd6>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d

  int amount_of_bytes = snprintf((char*) buffer, sizeof(buffer), fmt, ADC_Get_val(&ADC_1), count++, count_btn, states[count_state]);
 8000e26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fd7c 	bl	8000928 <ADC_Get_val>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461d      	mov	r5, r3
 8000e34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	f887 212f 	strb.w	r2, [r7, #303]	; 0x12f
 8000e3e:	461c      	mov	r4, r3
 8000e40:	f897 112e 	ldrb.w	r1, [r7, #302]	; 0x12e
 8000e44:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <main+0x214>)
 8000e50:	4413      	add	r3, r2
 8000e52:	4638      	mov	r0, r7
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	9101      	str	r1, [sp, #4]
 8000e58:	9400      	str	r4, [sp, #0]
 8000e5a:	462b      	mov	r3, r5
 8000e5c:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <main+0x218>)
 8000e5e:	21ff      	movs	r1, #255	; 0xff
 8000e60:	f00b faec 	bl	800c43c <sniprintf>
 8000e64:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  // int status = HAL_SPI_Transmit(&hspi3, spi_buf, amount_of_bytes+4, 1);
  // int status = HAL_SPI_Transmit(&hspi3, &count, 1, 1);
  // HAL_GPIO_WritePin(COMMS_EN_1_GPIO_Port, COMMS_EN_1_Pin, GPIO_PIN_SET);   
  // USB_Print("count : %d", count++);

  switch (CDC_Transmit_FS((uint8_t*)buffer, amount_of_bytes)){
 8000e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00a fe96 	bl	800bba4 <CDC_Transmit_FS>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d010      	beq.n	8000ea0 <main+0x150>
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	dc15      	bgt.n	8000eae <main+0x15e>
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <main+0x13c>
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <main+0x146>
    break;
  case USBD_FAIL: // if the device can support USB coms device it will blink red
    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
    break; 
  default:
    break;
 8000e8a:	e010      	b.n	8000eae <main+0x15e>
    HAL_GPIO_TogglePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin);
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4837      	ldr	r0, [pc, #220]	; (8000f6c <main+0x21c>)
 8000e90:	f002 fd04 	bl	800389c <HAL_GPIO_TogglePin>
    break;
 8000e94:	e00c      	b.n	8000eb0 <main+0x160>
    HAL_GPIO_TogglePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin);
 8000e96:	2120      	movs	r1, #32
 8000e98:	4834      	ldr	r0, [pc, #208]	; (8000f6c <main+0x21c>)
 8000e9a:	f002 fcff 	bl	800389c <HAL_GPIO_TogglePin>
    break;
 8000e9e:	e007      	b.n	8000eb0 <main+0x160>
    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
 8000ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f002 fcf8 	bl	800389c <HAL_GPIO_TogglePin>
    break; 
 8000eac:	e000      	b.n	8000eb0 <main+0x160>
    break;
 8000eae:	bf00      	nop
  }
  HAL_UART_Transmit(&huart4, (uint8_t *)&buffer, amount_of_bytes, 0xFFFF);
 8000eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4639      	mov	r1, r7
 8000eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebc:	482c      	ldr	r0, [pc, #176]	; (8000f70 <main+0x220>)
 8000ebe:	f005 fdbd 	bl	8006a3c <HAL_UART_Transmit>
  HAL_Delay(100);
 8000ec2:	2064      	movs	r0, #100	; 0x64
 8000ec4:	f000 fbfc 	bl	80016c0 <HAL_Delay>
  amount_of_bytes = snprintf((char*) buffer, sizeof(buffer), "DOWN : %d, UP : %d, enter : %d\r\n", HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin),HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin),HAL_GPIO_ReadPin(ENTER_BTN_GPIO_Port, ENTER_BTN_Pin));
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	4824      	ldr	r0, [pc, #144]	; (8000f60 <main+0x210>)
 8000ece:	f002 fcb5 	bl	800383c <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461d      	mov	r5, r3
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	4821      	ldr	r0, [pc, #132]	; (8000f60 <main+0x210>)
 8000edc:	f002 fcae 	bl	800383c <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461c      	mov	r4, r3
 8000ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee8:	481d      	ldr	r0, [pc, #116]	; (8000f60 <main+0x210>)
 8000eea:	f002 fca7 	bl	800383c <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	9400      	str	r4, [sp, #0]
 8000ef6:	462b      	mov	r3, r5
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <main+0x224>)
 8000efa:	21ff      	movs	r1, #255	; 0xff
 8000efc:	f00b fa9e 	bl	800c43c <sniprintf>
 8000f00:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  
  // i should really make this in to a function
  switch (CDC_Transmit_FS((uint8_t*)buffer, amount_of_bytes)){
 8000f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f00a fe48 	bl	800bba4 <CDC_Transmit_FS>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d010      	beq.n	8000f3c <main+0x1ec>
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	dc15      	bgt.n	8000f4a <main+0x1fa>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <main+0x1d8>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <main+0x1e2>
    break;
  case USBD_FAIL: // if the device can support USB coms device it will blink red
    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
    break; 
  default:
    break;
 8000f26:	e010      	b.n	8000f4a <main+0x1fa>
    HAL_GPIO_TogglePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin);
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <main+0x21c>)
 8000f2c:	f002 fcb6 	bl	800389c <HAL_GPIO_TogglePin>
    break;
 8000f30:	e00c      	b.n	8000f4c <main+0x1fc>
    HAL_GPIO_TogglePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin);
 8000f32:	2120      	movs	r1, #32
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <main+0x21c>)
 8000f36:	f002 fcb1 	bl	800389c <HAL_GPIO_TogglePin>
    break;
 8000f3a:	e007      	b.n	8000f4c <main+0x1fc>
    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f002 fcaa 	bl	800389c <HAL_GPIO_TogglePin>
    break; 
 8000f48:	e000      	b.n	8000f4c <main+0x1fc>
    break;
 8000f4a:	bf00      	nop
  }


  HAL_Delay(400);
 8000f4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f50:	f000 fbb6 	bl	80016c0 <HAL_Delay>
  {
 8000f54:	e739      	b.n	8000dca <main+0x7a>
 8000f56:	bf00      	nop
 8000f58:	04300002 	.word	0x04300002
 8000f5c:	20000238 	.word	0x20000238
 8000f60:	48000800 	.word	0x48000800
 8000f64:	2000002c 	.word	0x2000002c
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	2000040c 	.word	0x2000040c
 8000f74:	0800cdc4 	.word	0x0800cdc4

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2238      	movs	r2, #56	; 0x38
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00b fa8c 	bl	800c4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f9e:	f004 faff 	bl	80055a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fb87 	bl	80056e8 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000fe0:	f000 f819 	bl	8001016 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000ff0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fe84 	bl	8005d0c <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800100a:	f000 f804 	bl	8001016 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101a:	b672      	cpsid	i
}
 800101c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101e:	e7fe      	b.n	800101e <Error_Handler+0x8>

08001020 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_RTC_Init+0x68>)
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <MX_RTC_Init+0x6c>)
 8001028:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_RTC_Init+0x68>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_RTC_Init+0x68>)
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_RTC_Init+0x68>)
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_RTC_Init+0x68>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_RTC_Init+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_RTC_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_RTC_Init+0x68>)
 8001050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001054:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_RTC_Init+0x68>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <MX_RTC_Init+0x68>)
 800105e:	f005 fa61 	bl	8006524 <HAL_RTC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001068:	f7ff ffd5 	bl	8001016 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 800106c:	2206      	movs	r2, #6
 800106e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_RTC_Init+0x68>)
 8001074:	f005 fb73 	bl	800675e <HAL_RTCEx_SetWakeUpTimer>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800107e:	f7ff ffca 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000037c 	.word	0x2000037c
 800108c:	40002800 	.word	0x40002800

08001090 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2244      	movs	r2, #68	; 0x44
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00b f9ff 	bl	800c4a4 <memset>
  if(rtcHandle->Instance==RTC)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_RTC_MspInit+0x70>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d123      	bne.n	80010f8 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f83f 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010cc:	f7ff ffa3 	bl	8001016 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_RTC_MspInit+0x74>)
 80010d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_RTC_MspInit+0x74>)
 80010d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_RTC_MspInit+0x74>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_RTC_MspInit+0x74>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6593      	str	r3, [r2, #88]	; 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_RTC_MspInit+0x74>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	; 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40002800 	.word	0x40002800
 8001104:	40021000 	.word	0x40021000

08001108 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_SPI1_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <MX_SPI1_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_SPI1_Init+0x74>)
 8001114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_SPI1_Init+0x74>)
 8001122:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001126:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_SPI1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_SPI1_Init+0x74>)
 8001136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_SPI1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_SPI1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_SPI1_Init+0x74>)
 8001156:	2207      	movs	r2, #7
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_SPI1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_SPI1_Init+0x74>)
 8001162:	2208      	movs	r2, #8
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_SPI1_Init+0x74>)
 8001168:	f005 fb6d 	bl	8006846 <HAL_SPI_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001172:	f7ff ff50 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200003a4 	.word	0x200003a4
 8001180:	40013000 	.word	0x40013000

08001184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_SPI_MspInit+0xb4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d144      	bne.n	8001230 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b0:	6613      	str	r3, [r2, #96]	; 0x60
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_SPI_MspInit+0xb8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ee:	23c0      	movs	r3, #192	; 0xc0
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011fe:	2305      	movs	r3, #5
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f002 f994 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001210:	2308      	movs	r3, #8
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001220:	2305      	movs	r3, #5
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_SPI_MspInit+0xbc>)
 800122c:	f002 f984 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013000 	.word	0x40013000
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_MspInit+0x44>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x44>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6593      	str	r3, [r2, #88]	; 0x58
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f9d4 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <USB_LP_IRQHandler+0x10>)
 80012e6:	f002 fd15 	bl	8003d14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20001178 	.word	0x20001178

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f00b f8c6 	bl	800c4b4 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20008000 	.word	0x20008000
 8001354:	00000400 	.word	0x00000400
 8001358:	20000408 	.word	0x20000408
 800135c:	200017c0 	.word	0x200017c0

08001360 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800138e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4313      	orrs	r3, r2
 8001396:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800139a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <LL_APB1_GRP2_EnableClock+0x2c>)
 80013be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <LL_APB1_GRP2_EnableClock+0x2c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <LL_APB1_GRP2_EnableClock+0x2c>)
 80013ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80013fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013fe:	f7ff ffd9 	bl	80013b4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff ffbe 	bl	8001384 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001408:	2310      	movs	r3, #16
 800140a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800140c:	2303      	movs	r3, #3
 800140e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_UCPD1_Init+0x58>)
 800141a:	f006 fad6 	bl	80079ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001422:	2303      	movs	r3, #3
 8001424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_UCPD1_Init+0x58>)
 8001430:	f006 facb 	bl	80079ca <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	48000400 	.word	0x48000400

08001440 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <MX_UART4_Init+0x90>)
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <MX_UART4_Init+0x94>)
 8001448:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_UART4_Init+0x90>)
 800144c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001450:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_UART4_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_UART4_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_UART4_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_UART4_Init+0x90>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_UART4_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_UART4_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_UART4_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_UART4_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_UART4_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <MX_UART4_Init+0x90>)
 800148a:	f005 fa87 	bl	800699c <HAL_UART_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001494:	f7ff fdbf 	bl	8001016 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001498:	2100      	movs	r1, #0
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_UART4_Init+0x90>)
 800149c:	f006 f880 	bl	80075a0 <HAL_UARTEx_SetTxFifoThreshold>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014a6:	f7ff fdb6 	bl	8001016 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <MX_UART4_Init+0x90>)
 80014ae:	f006 f8b5 	bl	800761c <HAL_UARTEx_SetRxFifoThreshold>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014b8:	f7ff fdad 	bl	8001016 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_UART4_Init+0x90>)
 80014be:	f006 f836 	bl	800752e <HAL_UARTEx_DisableFifoMode>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f7ff fda5 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000040c 	.word	0x2000040c
 80014d4:	40004c00 	.word	0x40004c00

080014d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b09a      	sub	sp, #104	; 0x68
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2244      	movs	r2, #68	; 0x44
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00a ffd3 	bl	800c4a4 <memset>
  if(uartHandle->Instance==UART4)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_UART_MspInit+0xa8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d136      	bne.n	8001576 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001508:	2308      	movs	r3, #8
 800150a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fe15 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001520:	f7ff fd79 	bl	8001016 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_UART_MspInit+0xac>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_UART_MspInit+0xac>)
 800152a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152e:	6593      	str	r3, [r2, #88]	; 0x58
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0xac>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0xac>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_UART_MspInit+0xac>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_UART_MspInit+0xac>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001558:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001566:	2305      	movs	r3, #5
 8001568:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0xb0>)
 8001572:	f001 ffe1 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3768      	adds	r7, #104	; 0x68
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40004c00 	.word	0x40004c00
 8001584:	40021000 	.word	0x40021000
 8001588:	48000800 	.word	0x48000800

0800158c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800158e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff fee6 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <LoopForever+0xe>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	; (80015d8 <LoopForever+0x16>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f00a ff81 	bl	800c4c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015be:	f7ff fbc7 	bl	8000d50 <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   r0, =_estack
 80015c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80015d0:	0800ceb4 	.word	0x0800ceb4
  ldr r2, =_sbss
 80015d4:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80015d8:	200017bc 	.word	0x200017bc

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>

080015de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f001 fd8b 	bl	8003104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f80e 	bl	8001610 <HAL_InitTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	e001      	b.n	8001604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001600:	f7ff fe20 	bl	8001244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001604:	79fb      	ldrb	r3, [r7, #7]

}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_InitTick+0x68>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d022      	beq.n	800166a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_InitTick+0x6c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_InitTick+0x68>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001630:	fbb1 f3f3 	udiv	r3, r1, r3
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fd96 	bl	800316a <HAL_SYSTICK_Config>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10f      	bne.n	8001664 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	d809      	bhi.n	800165e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164a:	2200      	movs	r2, #0
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	f04f 30ff 	mov.w	r0, #4294967295
 8001652:	f001 fd62 	bl	800311a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_InitTick+0x70>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e007      	b.n	800166e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e004      	b.n	800166e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e001      	b.n	800166e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000050 	.word	0x20000050
 800167c:	20000048 	.word	0x20000048
 8001680:	2000004c 	.word	0x2000004c

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4413      	add	r3, r2
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_IncTick+0x1c>)
 8001694:	6013      	str	r3, [r2, #0]
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	200004a0 	.word	0x200004a0
 80016a4:	20000050 	.word	0x20000050

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200004a0 	.word	0x200004a0

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d004      	beq.n	80016e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_Delay+0x40>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e4:	bf00      	nop
 80016e6:	f7ff ffdf 	bl	80016a8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8f7      	bhi.n	80016e6 <HAL_Delay+0x26>
  {
  }
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000050 	.word	0x20000050

08001704 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3360      	adds	r3, #96	; 0x60
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <LL_ADC_SetOffset+0x44>)
 800178e:	4013      	ands	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	4313      	orrs	r3, r2
 800179c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	03fff000 	.word	0x03fff000

080017b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3360      	adds	r3, #96	; 0x60
 80017c2:	461a      	mov	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3360      	adds	r3, #96	; 0x60
 80017f0:	461a      	mov	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3360      	adds	r3, #96	; 0x60
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	431a      	orrs	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001840:	bf00      	nop
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3360      	adds	r3, #96	; 0x60
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	615a      	str	r2, [r3, #20]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b087      	sub	sp, #28
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3330      	adds	r3, #48	; 0x30
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	211f      	movs	r1, #31
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	f003 011f 	and.w	r1, r3, #31
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001926:	b480      	push	{r7}
 8001928:	b087      	sub	sp, #28
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3314      	adds	r3, #20
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	0e5b      	lsrs	r3, r3, #25
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0d1b      	lsrs	r3, r3, #20
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2107      	movs	r1, #7
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	0d1b      	lsrs	r3, r3, #20
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0318 	and.w	r3, r3, #24
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019a0:	40d9      	lsrs	r1, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	400b      	ands	r3, r1
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	431a      	orrs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	0007ffff 	.word	0x0007ffff

080019c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 031f 	and.w	r3, r3, #31
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6093      	str	r3, [r2, #8]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a34:	d101      	bne.n	8001a3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad4:	f043 0202 	orr.w	r2, r3, #2
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <LL_ADC_IsEnabled+0x18>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_ADC_IsEnabled+0x1a>
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsDisableOngoing+0x18>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsDisableOngoing+0x1a>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d101      	bne.n	8001bea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e167      	b.n	8001ee2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7fe fda9 	bl	8000778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fef1 	bl	8001a20 <LL_ADC_IsDeepPowerDownEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fed7 	bl	80019fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff0c 	bl	8001a70 <LL_ADC_IsInternalRegulatorEnabled>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d115      	bne.n	8001c8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fef0 	bl	8001a48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c68:	4ba0      	ldr	r3, [pc, #640]	; (8001eec <HAL_ADC_Init+0x2f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	4aa0      	ldr	r2, [pc, #640]	; (8001ef0 <HAL_ADC_Init+0x2f8>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c7c:	e002      	b.n	8001c84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f9      	bne.n	8001c7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff feee 	bl	8001a70 <LL_ADC_IsInternalRegulatorEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff62 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001cc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8100 	bne.w	8001ed0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80fc 	bne.w	8001ed0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ce0:	f043 0202 	orr.w	r2, r3, #2
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fefb 	bl	8001ae8 <LL_ADC_IsEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cfc:	f7ff fef4 	bl	8001ae8 <LL_ADC_IsEnabled>
 8001d00:	4604      	mov	r4, r0
 8001d02:	487c      	ldr	r0, [pc, #496]	; (8001ef4 <HAL_ADC_Init+0x2fc>)
 8001d04:	f7ff fef0 	bl	8001ae8 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4323      	orrs	r3, r4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4878      	ldr	r0, [pc, #480]	; (8001ef8 <HAL_ADC_Init+0x300>)
 8001d18:	f7ff fcf4 	bl	8001704 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7f5b      	ldrb	r3, [r3, #29]
 8001d20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d106      	bne.n	8001d58 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	045b      	lsls	r3, r3, #17
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b60      	ldr	r3, [pc, #384]	; (8001efc <HAL_ADC_Init+0x304>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff15 	bl	8001bd2 <LL_ADC_INJ_IsConversionOngoing>
 8001da8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d16d      	bne.n	8001e8c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d16a      	bne.n	8001e8c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd2:	f023 0302 	bic.w	r3, r3, #2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d017      	beq.n	8001e18 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001df6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6911      	ldr	r1, [r2, #16]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e16:	e013      	b.n	8001e40 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e3c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d118      	bne.n	8001e7c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	e007      	b.n	8001e8c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d10c      	bne.n	8001eae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f023 010f 	bic.w	r1, r3, #15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8001eac:	e007      	b.n	8001ebe <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 020f 	bic.w	r2, r2, #15
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ece:	e007      	b.n	8001ee0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000048 	.word	0x20000048
 8001ef0:	053e2d63 	.word	0x053e2d63
 8001ef4:	50000100 	.word	0x50000100
 8001ef8:	50000300 	.word	0x50000300
 8001efc:	fff04007 	.word	0xfff04007

08001f00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f08:	4859      	ldr	r0, [pc, #356]	; (8002070 <HAL_ADC_Start+0x170>)
 8001f0a:	f7ff fd5b 	bl	80019c4 <LL_ADC_GetMultimode>
 8001f0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fe35 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 809f 	bne.w	8002060 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_Start+0x30>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e09a      	b.n	8002066 <HAL_ADC_Start+0x166>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fe63 	bl	8002c04 <ADC_Enable>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 8086 	bne.w	8002056 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_ADC_Start+0x174>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_Start+0x6e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e001      	b.n	8001f72 <HAL_ADC_Start+0x72>
 8001f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d002      	beq.n	8001f80 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	f023 0206 	bic.w	r2, r3, #6
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	661a      	str	r2, [r3, #96]	; 0x60
 8001fa6:	e002      	b.n	8001fae <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	221c      	movs	r2, #28
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <HAL_ADC_Start+0x174>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d002      	beq.n	8001fce <HAL_ADC_Start+0xce>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	e001      	b.n	8001fd2 <HAL_ADC_Start+0xd2>
 8001fce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d008      	beq.n	8001fec <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d002      	beq.n	8001fec <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d114      	bne.n	8002016 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002002:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd90 	bl	8001b34 <LL_ADC_REG_StartConversion>
 8002014:	e026      	b.n	8002064 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <HAL_ADC_Start+0x174>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d002      	beq.n	8002032 <HAL_ADC_Start+0x132>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e001      	b.n	8002036 <HAL_ADC_Start+0x136>
 8002032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002036:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00f      	beq.n	8002064 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800204c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c
 8002054:	e006      	b.n	8002064 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800205e:	e001      	b.n	8002064 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002060:	2302      	movs	r3, #2
 8002062:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002064:	7dfb      	ldrb	r3, [r7, #23]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	50000300 	.word	0x50000300
 8002074:	50000100 	.word	0x50000100

08002078 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_Stop+0x16>
 800208a:	2302      	movs	r3, #2
 800208c:	e023      	b.n	80020d6 <HAL_ADC_Stop+0x5e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002096:	2103      	movs	r1, #3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fcf7 	bl	8002a8c <ADC_ConversionStop>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fe31 	bl	8002d10 <ADC_Disable>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ea:	4867      	ldr	r0, [pc, #412]	; (8002288 <HAL_ADC_PollForConversion+0x1a8>)
 80020ec:	f7ff fc6a 	bl	80019c4 <LL_ADC_GetMultimode>
 80020f0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020fa:	2308      	movs	r3, #8
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e02a      	b.n	8002156 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d002      	beq.n	8002112 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b09      	cmp	r3, #9
 8002110:	d111      	bne.n	8002136 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0a6      	b.n	800227e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002130:	2304      	movs	r3, #4
 8002132:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002134:	e00f      	b.n	8002156 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002136:	4854      	ldr	r0, [pc, #336]	; (8002288 <HAL_ADC_PollForConversion+0x1a8>)
 8002138:	f7ff fc52 	bl	80019e0 <LL_ADC_GetMultiDMATransfer>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	f043 0220 	orr.w	r2, r3, #32
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e095      	b.n	800227e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002152:	2304      	movs	r3, #4
 8002154:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002156:	f7ff faa7 	bl	80016a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800215c:	e021      	b.n	80021a2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d01d      	beq.n	80021a2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002166:	f7ff fa9f 	bl	80016a8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <HAL_ADC_PollForConversion+0x9c>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d112      	bne.n	80021a2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10b      	bne.n	80021a2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	f043 0204 	orr.w	r2, r3, #4
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e06d      	b.n	800227e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0d6      	beq.n	800215e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fb71 	bl	80018a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7f5b      	ldrb	r3, [r3, #29]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d118      	bne.n	8002206 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d111      	bne.n	8002206 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <HAL_ADC_PollForConversion+0x1ac>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d002      	beq.n	8002216 <HAL_ADC_PollForConversion+0x136>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	e001      	b.n	800221a <HAL_ADC_PollForConversion+0x13a>
 8002216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4293      	cmp	r3, r2
 8002220:	d008      	beq.n	8002234 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d002      	beq.n	8002234 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b09      	cmp	r3, #9
 8002232:	d104      	bne.n	800223e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	e00d      	b.n	800225a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_ADC_PollForConversion+0x1ac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d002      	beq.n	800224e <HAL_ADC_PollForConversion+0x16e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e001      	b.n	8002252 <HAL_ADC_PollForConversion+0x172>
 800224e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002252:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d104      	bne.n	800226a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e008      	b.n	800227c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	220c      	movs	r2, #12
 800227a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	50000300 	.word	0x50000300
 800228c:	50000100 	.word	0x50000100

08002290 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0b6      	sub	sp, #216	; 0xd8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x22>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e3c8      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x7b4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fc52 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 83ad 	bne.w	8002a42 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff faea 	bl	80018ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fc40 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002304:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fc60 	bl	8001bd2 <LL_ADC_INJ_IsConversionOngoing>
 8002312:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 81d9 	bne.w	80026d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 81d4 	bne.w	80026d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002332:	d10f      	bne.n	8002354 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff faf1 	bl	8001926 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fa98 	bl	8001882 <LL_ADC_SetSamplingTimeCommonConfig>
 8002352:	e00e      	b.n	8002372 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	461a      	mov	r2, r3
 8002362:	f7ff fae0 	bl	8001926 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fa88 	bl	8001882 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d022      	beq.n	80023da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023a4:	f7ff f9e2 	bl	800176c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6919      	ldr	r1, [r3, #16]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f7ff fa2e 	bl	8001816 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x124>
 80023ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x126>
 80023d0:	2300      	movs	r3, #0
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7ff fa3a 	bl	800184c <LL_ADC_SetOffsetSaturation>
 80023d8:	e17b      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f9e7 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x15a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f9dc 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	e01e      	b.n	8002444 <HAL_ADC_ConfigChannel+0x198>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f9d1 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800242c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e004      	b.n	8002442 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1b0>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	e018      	b.n	800248e <HAL_ADC_ConfigChannel+0x1e2>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e004      	b.n	800248e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f9a0 	bl	80017e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f984 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x220>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f979 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	e01e      	b.n	800250a <HAL_ADC_ConfigChannel+0x25e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f96e 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e004      	b.n	8002508 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80024fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x276>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	e018      	b.n	8002554 <HAL_ADC_ConfigChannel+0x2a8>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800253a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800253e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002546:	2320      	movs	r3, #32
 8002548:	e004      	b.n	8002554 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800254a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002554:	429a      	cmp	r2, r3
 8002556:	d106      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f93d 	bl	80017e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f921 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x2e6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f916 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	0e9b      	lsrs	r3, r3, #26
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	e01e      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x324>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f90b 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e004      	b.n	80025ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x33c>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	e016      	b.n	8002616 <HAL_ADC_ConfigChannel+0x36a>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e004      	b.n	8002616 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800260c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002616:	429a      	cmp	r2, r3
 8002618:	d106      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f8dc 	bl	80017e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2103      	movs	r1, #3
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f8c0 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x3a8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f8b5 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	e017      	b.n	8002684 <HAL_ADC_ConfigChannel+0x3d8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f8aa 	bl	80017b4 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800266c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e003      	b.n	8002682 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800267a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_ADC_ConfigChannel+0x3f0>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	e011      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x414>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d106      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2103      	movs	r1, #3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f887 	bl	80017e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fa06 	bl	8001ae8 <LL_ADC_IsEnabled>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 8140 	bne.w	8002964 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f7ff f943 	bl	800197c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a8f      	ldr	r2, [pc, #572]	; (8002938 <HAL_ADC_ConfigChannel+0x68c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f040 8131 	bne.w	8002964 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <HAL_ADC_ConfigChannel+0x47e>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	3301      	adds	r3, #1
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2b09      	cmp	r3, #9
 8002720:	bf94      	ite	ls
 8002722:	2301      	movls	r3, #1
 8002724:	2300      	movhi	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	e019      	b.n	800275e <HAL_ADC_ConfigChannel+0x4b2>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800273c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	2b09      	cmp	r3, #9
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275e:	2b00      	cmp	r3, #0
 8002760:	d079      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_ADC_ConfigChannel+0x4d2>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	3301      	adds	r3, #1
 8002776:	069b      	lsls	r3, r3, #26
 8002778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277c:	e015      	b.n	80027aa <HAL_ADC_ConfigChannel+0x4fe>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	069b      	lsls	r3, r3, #26
 80027a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x51e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	e017      	b.n	80027fa <HAL_ADC_ConfigChannel+0x54e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e003      	b.n	80027ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	ea42 0103 	orr.w	r1, r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x574>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	3301      	adds	r3, #1
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	051b      	lsls	r3, r3, #20
 800281e:	e018      	b.n	8002852 <HAL_ADC_ConfigChannel+0x5a6>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f003 021f 	and.w	r2, r3, #31
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002852:	430b      	orrs	r3, r1
 8002854:	e081      	b.n	800295a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x5c6>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	3301      	adds	r3, #1
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	e015      	b.n	800289e <HAL_ADC_ConfigChannel+0x5f2>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	3301      	adds	r3, #1
 8002898:	069b      	lsls	r3, r3, #26
 800289a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_ADC_ConfigChannel+0x612>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	e017      	b.n	80028ee <HAL_ADC_ConfigChannel+0x642>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	61fb      	str	r3, [r7, #28]
  return result;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	ea42 0103 	orr.w	r1, r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_ADC_ConfigChannel+0x66e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	3301      	adds	r3, #1
 8002906:	f003 021f 	and.w	r2, r3, #31
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	3b1e      	subs	r3, #30
 8002912:	051b      	lsls	r3, r3, #20
 8002914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002918:	e01e      	b.n	8002958 <HAL_ADC_ConfigChannel+0x6ac>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	613b      	str	r3, [r7, #16]
  return result;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002932:	2320      	movs	r3, #32
 8002934:	e006      	b.n	8002944 <HAL_ADC_ConfigChannel+0x698>
 8002936:	bf00      	nop
 8002938:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f003 021f 	and.w	r2, r3, #31
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	3b1e      	subs	r3, #30
 8002952:	051b      	lsls	r3, r3, #20
 8002954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002958:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe ffe1 	bl	8001926 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_ADC_ConfigChannel+0x7bc>)
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d071      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002970:	483e      	ldr	r0, [pc, #248]	; (8002a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8002972:	f7fe feed 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 8002976:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_ADC_ConfigChannel+0x7c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_ADC_ConfigChannel+0x6e2>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_ADC_ConfigChannel+0x7c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d127      	bne.n	80029de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800298e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d121      	bne.n	80029de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a2:	d157      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ac:	4619      	mov	r1, r3
 80029ae:	482f      	ldr	r0, [pc, #188]	; (8002a6c <HAL_ADC_ConfigChannel+0x7c0>)
 80029b0:	f7fe febb 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_ADC_ConfigChannel+0x7cc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_ADC_ConfigChannel+0x7d0>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ce:	e002      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f9      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029dc:	e03a      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_ADC_ConfigChannel+0x7d4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d113      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_ADC_ConfigChannel+0x7d8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d02a      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a06:	4619      	mov	r1, r3
 8002a08:	4818      	ldr	r0, [pc, #96]	; (8002a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8002a0a:	f7fe fe8e 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0e:	e021      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d11c      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d011      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480c      	ldr	r0, [pc, #48]	; (8002a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8002a3c:	f7fe fe75 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
 8002a40:	e008      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	37d8      	adds	r7, #216	; 0xd8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	80080000 	.word	0x80080000
 8002a6c:	50000300 	.word	0x50000300
 8002a70:	c3210000 	.word	0xc3210000
 8002a74:	90c00010 	.word	0x90c00010
 8002a78:	20000048 	.word	0x20000048
 8002a7c:	053e2d63 	.word	0x053e2d63
 8002a80:	c7520000 	.word	0xc7520000
 8002a84:	50000100 	.word	0x50000100
 8002a88:	cb840000 	.word	0xcb840000

08002a8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f86e 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f88f 	bl	8001bd2 <LL_ADC_INJ_IsConversionOngoing>
 8002ab4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8098 	beq.w	8002bf4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d02a      	beq.n	8002b28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7f5b      	ldrb	r3, [r3, #29]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d126      	bne.n	8002b28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7f1b      	ldrb	r3, [r3, #28]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d122      	bne.n	8002b28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ae6:	e014      	b.n	8002b12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <ADC_ConversionStop+0x174>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d90d      	bls.n	8002b0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	f043 0210 	orr.w	r2, r3, #16
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e074      	b.n	8002bf6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d1e3      	bne.n	8002ae8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d014      	beq.n	8002b58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f826 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ffe3 	bl	8001b0e <LL_ADC_IsDisableOngoing>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f802 	bl	8001b5c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d014      	beq.n	8002b88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f835 	bl	8001bd2 <LL_ADC_INJ_IsConversionOngoing>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe ffcb 	bl	8001b0e <LL_ADC_IsDisableOngoing>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f811 	bl	8001baa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d005      	beq.n	8002b9a <ADC_ConversionStop+0x10e>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d105      	bne.n	8002ba0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b94:	230c      	movs	r3, #12
 8002b96:	617b      	str	r3, [r7, #20]
        break;
 8002b98:	e005      	b.n	8002ba6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	617b      	str	r3, [r7, #20]
        break;
 8002b9e:	e002      	b.n	8002ba6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	617b      	str	r3, [r7, #20]
        break;
 8002ba4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ba6:	f7fe fd7f 	bl	80016a8 <HAL_GetTick>
 8002baa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bac:	e01b      	b.n	8002be6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bae:	f7fe fd7b 	bl	80016a8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d914      	bls.n	8002be6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1dc      	bne.n	8002bae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	a33fffff 	.word	0xa33fffff

08002c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe ff67 	bl	8001ae8 <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d169      	bne.n	8002cf4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <ADC_Enable+0xfc>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	f043 0210 	orr.w	r2, r3, #16
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e055      	b.n	8002cf6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ff22 	bl	8001a98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c54:	482b      	ldr	r0, [pc, #172]	; (8002d04 <ADC_Enable+0x100>)
 8002c56:	f7fe fd7b 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 8002c5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <ADC_Enable+0x104>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <ADC_Enable+0x108>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c7e:	e002      	b.n	8002c86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fd0c 	bl	80016a8 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c92:	e028      	b.n	8002ce6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ff25 	bl	8001ae8 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fef5 	bl	8001a98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cae:	f7fe fcfb 	bl	80016a8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d914      	bls.n	8002ce6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d00d      	beq.n	8002ce6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e007      	b.n	8002cf6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d1cf      	bne.n	8002c94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	8000003f 	.word	0x8000003f
 8002d04:	50000300 	.word	0x50000300
 8002d08:	20000048 	.word	0x20000048
 8002d0c:	053e2d63 	.word	0x053e2d63

08002d10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fef6 	bl	8001b0e <LL_ADC_IsDisableOngoing>
 8002d22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fedd 	bl	8001ae8 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d047      	beq.n	8002dc4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d144      	bne.n	8002dc4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030d 	and.w	r3, r3, #13
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10c      	bne.n	8002d62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe feb7 	bl	8001ac0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2203      	movs	r2, #3
 8002d58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fca5 	bl	80016a8 <HAL_GetTick>
 8002d5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d60:	e029      	b.n	8002db6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e023      	b.n	8002dc6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d7e:	f7fe fc93 	bl	80016a8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d914      	bls.n	8002db6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e007      	b.n	8002dc6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1dc      	bne.n	8002d7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <LL_ADC_IsEnabled>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <LL_ADC_IsEnabled+0x18>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <LL_ADC_IsEnabled+0x1a>
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_REG_IsConversionOngoing>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d101      	bne.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b0a1      	sub	sp, #132	; 0x84
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e08b      	b.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e42:	2300      	movs	r3, #0
 8002e44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e46:	2300      	movs	r3, #0
 8002e48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e52:	d102      	bne.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e001      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e06a      	b.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ffb8 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ffb2 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d14c      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d149      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e9e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eba:	035b      	lsls	r3, r3, #13
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ec8:	f7ff ff81 	bl	8002dce <LL_ADC_IsEnabled>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4823      	ldr	r0, [pc, #140]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ed0:	f7ff ff7d 	bl	8002dce <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d133      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ee4:	f023 030f 	bic.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	6811      	ldr	r1, [r2, #0]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	6892      	ldr	r2, [r2, #8]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef8:	e024      	b.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f0a:	f7ff ff60 	bl	8002dce <LL_ADC_IsEnabled>
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4812      	ldr	r0, [pc, #72]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f12:	f7ff ff5c 	bl	8002dce <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4323      	orrs	r3, r4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d112      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f2c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2e:	e009      	b.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f42:	e000      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3784      	adds	r7, #132	; 0x84
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	50000100 	.word	0x50000100
 8002f60:	50000300 	.word	0x50000300

08002f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f80:	4013      	ands	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f96:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	60d3      	str	r3, [r2, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	f003 0307 	and.w	r3, r3, #7
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db0b      	blt.n	8002ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4907      	ldr	r1, [pc, #28]	; (8003000 <__NVIC_EnableIRQ+0x38>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fa00 f202 	lsl.w	r2, r0, r2
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	; (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	; (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
         );
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d0:	d301      	bcc.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <SysTick_Config+0x40>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	210f      	movs	r1, #15
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f7ff ff8e 	bl	8003004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SysTick_Config+0x40>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <SysTick_Config+0x40>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff29 	bl	8002f64 <__NVIC_SetPriorityGrouping>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003128:	f7ff ff40 	bl	8002fac <__NVIC_GetPriorityGrouping>
 800312c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff ff90 	bl	8003058 <NVIC_EncodePriority>
 8003138:	4602      	mov	r2, r0
 800313a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff5f 	bl	8003004 <__NVIC_SetPriority>
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff33 	bl	8002fc8 <__NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ffa4 	bl	80030c0 <SysTick_Config>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e014      	b.n	80031be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fd fc33 	bl	8000a10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_DAC_ConfigChannel+0x1c>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e19e      	b.n	8003526 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	795b      	ldrb	r3, [r3, #5]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_DAC_ConfigChannel+0x2c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e198      	b.n	8003526 <HAL_DAC_ConfigChannel+0x35e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2202      	movs	r2, #2
 80031fe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d17a      	bne.n	80032fe <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003208:	f7fe fa4e 	bl	80016a8 <HAL_GetTick>
 800320c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d13d      	bne.n	8003290 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003214:	e018      	b.n	8003248 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003216:	f7fe fa47 	bl	80016a8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d911      	bls.n	8003248 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2203      	movs	r2, #3
 8003242:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e16e      	b.n	8003526 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1df      	bne.n	8003216 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
 8003260:	e020      	b.n	80032a4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003262:	f7fe fa21 	bl	80016a8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d90f      	bls.n	8003290 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0a      	bge.n	8003290 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2203      	movs	r2, #3
 800328a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e14a      	b.n	8003526 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	2b00      	cmp	r3, #0
 8003298:	dbe3      	blt.n	8003262 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	ea02 0103 	and.w	r1, r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	21ff      	movs	r1, #255	; 0xff
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	ea02 0103 	and.w	r1, r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d11d      	bne.n	8003342 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	221f      	movs	r2, #31
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	4013      	ands	r3, r2
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	4313      	orrs	r3, r2
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2207      	movs	r2, #7
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	4013      	ands	r3, r2
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	e00f      	b.n	800338c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d102      	bne.n	800337a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003374:	2301      	movs	r3, #1
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	e008      	b.n	800338c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003382:	2301      	movs	r3, #1
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	e001      	b.n	800338c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003388:	2300      	movs	r3, #0
 800338a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	6a3a      	ldr	r2, [r7, #32]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	4013      	ands	r3, r2
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	791b      	ldrb	r3, [r3, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_DAC_ConfigChannel+0x1f8>
 80033ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033be:	e000      	b.n	80033c2 <HAL_DAC_ConfigChannel+0x1fa>
 80033c0:	2300      	movs	r3, #0
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	4013      	ands	r3, r2
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	795b      	ldrb	r3, [r3, #5]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_DAC_ConfigChannel+0x224>
 80033e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ea:	e000      	b.n	80033ee <HAL_DAC_ConfigChannel+0x226>
 80033ec:	2300      	movs	r3, #0
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d114      	bne.n	800342e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003404:	f002 fe20 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8003408:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a48      	ldr	r2, [pc, #288]	; (8003530 <HAL_DAC_ConfigChannel+0x368>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d904      	bls.n	800341c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	e00f      	b.n	800343c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4a45      	ldr	r2, [pc, #276]	; (8003534 <HAL_DAC_ConfigChannel+0x36c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d90a      	bls.n	800343a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	e006      	b.n	800343c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	4313      	orrs	r3, r2
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e000      	b.n	800343c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800343a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	4313      	orrs	r3, r2
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	4013      	ands	r3, r2
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	4313      	orrs	r3, r2
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	22c0      	movs	r2, #192	; 0xc0
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	400a      	ands	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	ea02 0103 	and.w	r1, r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003524:	7ffb      	ldrb	r3, [r7, #31]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3728      	adds	r7, #40	; 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	09896800 	.word	0x09896800
 8003534:	04c4b400 	.word	0x04c4b400

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003546:	e15a      	b.n	80037fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 814c 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d005      	beq.n	8003578 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003574:	2b02      	cmp	r3, #2
 8003576:	d130      	bne.n	80035da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ae:	2201      	movs	r2, #1
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0201 	and.w	r2, r3, #1
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d017      	beq.n	8003616 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d123      	bne.n	800366a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	6939      	ldr	r1, [r7, #16]
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0203 	and.w	r2, r3, #3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	4a5a      	ldr	r2, [pc, #360]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6613      	str	r3, [r2, #96]	; 0x60
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c4:	4a56      	ldr	r2, [pc, #344]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ee:	d01f      	beq.n	8003730 <HAL_GPIO_Init+0x1f8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_GPIO_Init+0x2ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d019      	beq.n	800372c <HAL_GPIO_Init+0x1f4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_GPIO_Init+0x2f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_GPIO_Init+0x1f0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_GPIO_Init+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00d      	beq.n	8003724 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a49      	ldr	r2, [pc, #292]	; (8003830 <HAL_GPIO_Init+0x2f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a48      	ldr	r2, [pc, #288]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_GPIO_Init+0x1e4>
 8003718:	2305      	movs	r3, #5
 800371a:	e00a      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800371c:	2306      	movs	r3, #6
 800371e:	e008      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003720:	2304      	movs	r3, #4
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003724:	2303      	movs	r3, #3
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003730:	2300      	movs	r3, #0
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003742:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003774:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_GPIO_Init+0x300>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f ae9d 	bne.w	8003548 <HAL_GPIO_Init+0x10>
  }
}
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	48000c00 	.word	0x48000c00
 8003830:	48001000 	.word	0x48001000
 8003834:	48001400 	.word	0x48001400
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	43d9      	mvns	r1, r3
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	400b      	ands	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd f9b4 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003920:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003930:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e006      	b.n	8003958 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003956:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d108      	bne.n	8003972 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e007      	b.n	8003982 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69d9      	ldr	r1, [r3, #28]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d138      	bne.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e032      	b.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2224      	movs	r2, #36	; 0x24
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d139      	bne.n	8003b26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e033      	b.n	8003b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e000      	b.n	8003b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0c0      	b.n	8003cc8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f008 f96a 	bl	800be34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 ffb1 	bl	8007ad4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
 8003b76:	e03e      	b.n	8003bf6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	3311      	adds	r3, #17
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	3310      	adds	r3, #16
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	3313      	adds	r3, #19
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3320      	adds	r3, #32
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3324      	adds	r3, #36	; 0x24
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	791b      	ldrb	r3, [r3, #4]
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3bb      	bcc.n	8003b78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e044      	b.n	8003c90 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	440b      	add	r3, r1
 8003c14:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c1c:	7bfa      	ldrb	r2, [r7, #15]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	791b      	ldrb	r3, [r3, #4]
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3b5      	bcc.n	8003c06 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003ca6:	f003 ff30 	bl	8007b0a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7a9b      	ldrb	r3, [r3, #10]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 fc43 	bl	800554c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_PCD_Start+0x16>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e012      	b.n	8003d0c <HAL_PCD_Start+0x3c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fed7 	bl	8007aa6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f006 f999 	bl	800a034 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f006 f99e 	bl	800a062 <USB_ReadInterrupts>
 8003d26:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fb06 	bl	8004344 <PCD_EP_ISR_Handler>

    return;
 8003d38:	e110      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	b292      	uxth	r2, r2
 8003d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f008 f8fa 	bl	800bf56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003d62:	2100      	movs	r1, #0
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f8fc 	bl	8003f62 <HAL_PCD_SetAddress>

    return;
 8003d6a:	e0f7      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d8e:	e0e5      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00c      	beq.n	8003db4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dac:	b292      	uxth	r2, r2
 8003dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003db2:	e0d3      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d034      	beq.n	8003e28 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0204 	bic.w	r2, r2, #4
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0208 	bic.w	r2, r2, #8
 8003de8:	b292      	uxth	r2, r2
 8003dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d107      	bne.n	8003e08 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e00:	2100      	movs	r1, #0
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f008 fa9a 	bl	800c33c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f008 f8dd 	bl	800bfc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e20:	b292      	uxth	r2, r2
 8003e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e26:	e099      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d027      	beq.n	8003e82 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0208 	orr.w	r2, r2, #8
 8003e44:	b292      	uxth	r2, r2
 8003e46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0204 	orr.w	r2, r2, #4
 8003e74:	b292      	uxth	r2, r2
 8003e76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f008 f88a 	bl	800bf94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003e80:	e06c      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d040      	beq.n	8003f0e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9e:	b292      	uxth	r2, r2
 8003ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d12b      	bne.n	8003f06 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0204 	orr.w	r2, r2, #4
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0208 	orr.w	r2, r2, #8
 8003ed8:	b292      	uxth	r2, r2
 8003eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	089b      	lsrs	r3, r3, #2
 8003ef2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003efc:	2101      	movs	r1, #1
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f008 fa1c 	bl	800c33c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003f04:	e02a      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f008 f844 	bl	800bf94 <HAL_PCD_SuspendCallback>
    return;
 8003f0c:	e026      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00f      	beq.n	8003f38 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f008 f802 	bl	800bf3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f36:	e011      	b.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00c      	beq.n	8003f5c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f54:	b292      	uxth	r2, r2
 8003f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f5a:	bf00      	nop
  }
}
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_PCD_SetAddress+0x1a>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e012      	b.n	8003fa2 <HAL_PCD_SetAddress+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f006 f83a 	bl	800a00c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	70fb      	strb	r3, [r7, #3]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	803b      	strh	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da0e      	bge.n	8003fee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	3310      	adds	r3, #16
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	705a      	strb	r2, [r3, #1]
 8003fec:	e00e      	b.n	800400c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 0207 	and.w	r2, r3, #7
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004018:	883b      	ldrh	r3, [r7, #0]
 800401a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	78ba      	ldrb	r2, [r7, #2]
 8004026:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004028:	78bb      	ldrb	r3, [r7, #2]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d102      	bne.n	8004034 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_PCD_EP_Open+0x98>
 800403e:	2302      	movs	r3, #2
 8004040:	e00e      	b.n	8004060 <HAL_PCD_EP_Open+0xb6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	4618      	mov	r0, r3
 8004052:	f003 fd79 	bl	8007b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800405e:	7afb      	ldrb	r3, [r7, #11]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	da0e      	bge.n	800409a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	f003 0207 	and.w	r2, r3, #7
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	3310      	adds	r3, #16
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	705a      	strb	r2, [r3, #1]
 8004098:	e00e      	b.n	80040b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 0207 	and.w	r2, r3, #7
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_EP_Close+0x6a>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e00e      	b.n	80040f0 <HAL_PCD_EP_Close+0x88>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f004 f8f5 	bl	80082d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	460b      	mov	r3, r1
 8004106:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004108:	7afb      	ldrb	r3, [r7, #11]
 800410a:	f003 0207 	and.w	r2, r3, #7
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004138:	7afb      	ldrb	r3, [r7, #11]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	b2da      	uxtb	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6979      	ldr	r1, [r7, #20]
 800414a:	4618      	mov	r0, r3
 800414c:	f004 faad 	bl	80086aa <USB_EPStartXfer>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 0207 	and.w	r2, r3, #7
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	440b      	add	r3, r1
 8004178:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800417c:	681b      	ldr	r3, [r3, #0]
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	460b      	mov	r3, r1
 8004198:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	f003 0207 	and.w	r2, r3, #7
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	3310      	adds	r3, #16
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2200      	movs	r2, #0
 80041ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2201      	movs	r2, #1
 80041d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6979      	ldr	r1, [r7, #20]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 fa5e 	bl	80086aa <USB_EPStartXfer>

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	7912      	ldrb	r2, [r2, #4]
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e03e      	b.n	8004294 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da0e      	bge.n	800423c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 0207 	and.w	r2, r3, #7
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	3310      	adds	r3, #16
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	705a      	strb	r2, [r3, #1]
 800423a:	e00c      	b.n	8004256 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_PCD_EP_SetStall+0x7e>
 8004272:	2302      	movs	r3, #2
 8004274:	e00e      	b.n	8004294 <HAL_PCD_EP_SetStall+0x9c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	4618      	mov	r0, r3
 8004286:	f005 fdc2 	bl	8009e0e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	7912      	ldrb	r2, [r2, #4]
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e040      	b.n	800433c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da0e      	bge.n	80042e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 0207 	and.w	r2, r3, #7
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	3310      	adds	r3, #16
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	705a      	strb	r2, [r3, #1]
 80042de:	e00e      	b.n	80042fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	f003 0207 	and.w	r2, r3, #7
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_PCD_EP_ClrStall+0x82>
 800431a:	2302      	movs	r3, #2
 800431c:	e00e      	b.n	800433c <HAL_PCD_EP_ClrStall+0xa0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	4618      	mov	r0, r3
 800432e:	f005 fdbf 	bl	8009eb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b096      	sub	sp, #88	; 0x58
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800434c:	e3ae      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800435a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8004368:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 8170 	bne.w	8004652 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004372:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d14d      	bne.n	800441a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	81fb      	strh	r3, [r7, #14]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3310      	adds	r3, #16
 80043a6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80043d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	441a      	add	r2, r3
 80043da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80043de:	2100      	movs	r1, #0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f007 fd90 	bl	800bf06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7b1b      	ldrb	r3, [r3, #12]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 835d 	beq.w	8004aac <PCD_EP_ISR_Handler+0x768>
 80043f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 8358 	bne.w	8004aac <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7b1b      	ldrb	r3, [r3, #12]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004406:	b2da      	uxtb	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b292      	uxth	r2, r2
 800440e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	731a      	strb	r2, [r3, #12]
 8004418:	e348      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004420:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800442c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004434:	2b00      	cmp	r3, #0
 8004436:	d032      	beq.n	800449e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004440:	b29b      	uxth	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	4413      	add	r3, r2
 8004452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800445c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800446a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004472:	b29b      	uxth	r3, r3
 8004474:	f005 fe47 	bl	800a106 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29a      	uxth	r2, r3
 8004480:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004484:	4013      	ands	r3, r2
 8004486:	823b      	strh	r3, [r7, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	8a3a      	ldrh	r2, [r7, #16]
 800448e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004492:	b292      	uxth	r2, r2
 8004494:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f007 fd08 	bl	800beac <HAL_PCD_SetupStageCallback>
 800449c:	e306      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800449e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f280 8302 	bge.w	8004aac <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044b4:	4013      	ands	r3, r2
 80044b6:	83fb      	strh	r3, [r7, #30]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	8bfa      	ldrh	r2, [r7, #30]
 80044be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044c2:	b292      	uxth	r2, r2
 80044c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	4413      	add	r3, r2
 80044e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80044ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d019      	beq.n	800452a <PCD_EP_ISR_Handler+0x1e6>
 80044f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d015      	beq.n	800452a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004504:	6959      	ldr	r1, [r3, #20]
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800450a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800450e:	b29b      	uxth	r3, r3
 8004510:	f005 fdf9 	bl	800a106 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	441a      	add	r2, r3
 800451e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004520:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f007 fcd3 	bl	800bed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004534:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 82b5 	bne.w	8004aac <PCD_EP_ISR_Handler+0x768>
 8004542:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004546:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800454a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800454e:	f000 82ad 	beq.w	8004aac <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004560:	b29b      	uxth	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	4413      	add	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800457c:	b29a      	uxth	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <PCD_EP_ISR_Handler+0x25c>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004598:	b29a      	uxth	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e039      	b.n	8004614 <PCD_EP_ISR_Handler+0x2d0>
 80045a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b3e      	cmp	r3, #62	; 0x3e
 80045a6:	d818      	bhi.n	80045da <PCD_EP_ISR_Handler+0x296>
 80045a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <PCD_EP_ISR_Handler+0x27e>
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	3301      	adds	r3, #1
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4313      	orrs	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e01c      	b.n	8004614 <PCD_EP_ISR_Handler+0x2d0>
 80045da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <PCD_EP_ISR_Handler+0x2b0>
 80045ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f0:	3b01      	subs	r3, #1
 80045f2:	647b      	str	r3, [r7, #68]	; 0x44
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	029b      	lsls	r3, r3, #10
 8004600:	b29b      	uxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460e:	b29a      	uxth	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	827b      	strh	r3, [r7, #18]
 8004626:	8a7b      	ldrh	r3, [r7, #18]
 8004628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800462c:	827b      	strh	r3, [r7, #18]
 800462e:	8a7b      	ldrh	r3, [r7, #18]
 8004630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004634:	827b      	strh	r3, [r7, #18]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	8a7b      	ldrh	r3, [r7, #18]
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e22c      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004666:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800466a:	2b00      	cmp	r3, #0
 800466c:	f280 80f6 	bge.w	800485c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29a      	uxth	r2, r3
 8004682:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004686:	4013      	ands	r3, r2
 8004688:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800469e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a2:	b292      	uxth	r2, r2
 80046a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80046bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046be:	7b1b      	ldrb	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d123      	bne.n	800470c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80046ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 808e 	beq.w	8004812 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fc:	6959      	ldr	r1, [r3, #20]
 80046fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004700:	88da      	ldrh	r2, [r3, #6]
 8004702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004706:	f005 fcfe 	bl	800a106 <USB_ReadPMA>
 800470a:	e082      	b.n	8004812 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800470c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d10a      	bne.n	800472a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004714:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004718:	461a      	mov	r2, r3
 800471a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f9d3 	bl	8004ac8 <HAL_PCD_EP_DB_Receive>
 8004722:	4603      	mov	r3, r0
 8004724:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004728:	e073      	b.n	8004812 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d022      	beq.n	80047ce <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80047b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02c      	beq.n	8004812 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047be:	6959      	ldr	r1, [r3, #20]
 80047c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c2:	891a      	ldrh	r2, [r3, #8]
 80047c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047c8:	f005 fc9d 	bl	800a106 <USB_ReadPMA>
 80047cc:	e021      	b.n	8004812 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	4413      	add	r3, r2
 80047e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80047f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	6959      	ldr	r1, [r3, #20]
 8004806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004808:	895a      	ldrh	r2, [r3, #10]
 800480a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800480e:	f005 fc7a 	bl	800a106 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800481a:	441a      	add	r2, r3
 800481c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800481e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004828:	441a      	add	r2, r3
 800482a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800482e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <PCD_EP_ISR_Handler+0x4fe>
 8004836:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d206      	bcs.n	8004850 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f007 fb41 	bl	800bed0 <HAL_PCD_DataOutStageCallback>
 800484e:	e005      	b.n	800485c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004856:	4618      	mov	r0, r3
 8004858:	f003 ff27 	bl	80086aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800485c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8121 	beq.w	8004aac <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800486a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	3310      	adds	r3, #16
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80048ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048bc:	78db      	ldrb	r3, [r3, #3]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	f040 80a2 	bne.w	8004a08 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80048c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c6:	2200      	movs	r2, #0
 80048c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	7b1b      	ldrb	r3, [r3, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8093 	beq.w	80049fa <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d046      	beq.n	800496e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d126      	bne.n	8004936 <PCD_EP_ISR_Handler+0x5f2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	4413      	add	r3, r2
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	00da      	lsls	r2, r3, #3
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	4413      	add	r3, r2
 800490a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800490e:	623b      	str	r3, [r7, #32]
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491a:	b29a      	uxth	r2, r3
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29a      	uxth	r2, r3
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	e061      	b.n	80049fa <PCD_EP_ISR_Handler+0x6b6>
 8004936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d15d      	bne.n	80049fa <PCD_EP_ISR_Handler+0x6b6>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	4413      	add	r3, r2
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	00da      	lsls	r2, r3, #3
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	4413      	add	r3, r2
 8004960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	2200      	movs	r2, #0
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	e045      	b.n	80049fa <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d126      	bne.n	80049ca <PCD_EP_ISR_Handler+0x686>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	4413      	add	r3, r2
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
 8004994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	00da      	lsls	r2, r3, #3
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	4413      	add	r3, r2
 800499e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049a2:	633b      	str	r3, [r7, #48]	; 0x30
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e017      	b.n	80049fa <PCD_EP_ISR_Handler+0x6b6>
 80049ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d113      	bne.n	80049fa <PCD_EP_ISR_Handler+0x6b6>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	4413      	add	r3, r2
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00da      	lsls	r2, r3, #3
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	2200      	movs	r2, #0
 80049f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f007 fa80 	bl	800bf06 <HAL_PCD_DataInStageCallback>
 8004a06:	e051      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004a08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d144      	bne.n	8004a9e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d907      	bls.n	8004a58 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a54:	619a      	str	r2, [r3, #24]
 8004a56:	e002      	b.n	8004a5e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f007 fa4a 	bl	800bf06 <HAL_PCD_DataInStageCallback>
 8004a72:	e01b      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a7c:	441a      	add	r2, r3
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a8a:	441a      	add	r2, r3
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a96:	4618      	mov	r0, r3
 8004a98:	f003 fe07 	bl	80086aa <USB_EPStartXfer>
 8004a9c:	e006      	b.n	8004aac <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004a9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f917 	bl	8004cda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	b21b      	sxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f6ff ac48 	blt.w	800434e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3758      	adds	r7, #88	; 0x58
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d07c      	beq.n	8004bda <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	4413      	add	r3, r2
 8004afa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	8b7b      	ldrh	r3, [r7, #26]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d306      	bcc.n	8004b1e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	8b7b      	ldrh	r3, [r7, #26]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	619a      	str	r2, [r3, #24]
 8004b1c:	e002      	b.n	8004b24 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d123      	bne.n	8004b74 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	833b      	strh	r3, [r7, #24]
 8004b48:	8b3b      	ldrh	r3, [r7, #24]
 8004b4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b4e:	833b      	strh	r3, [r7, #24]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	8b3b      	ldrh	r3, [r7, #24]
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01f      	beq.n	8004bbe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	82fb      	strh	r3, [r7, #22]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8afb      	ldrh	r3, [r7, #22]
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bbe:	8b7b      	ldrh	r3, [r7, #26]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8085 	beq.w	8004cd0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6959      	ldr	r1, [r3, #20]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	891a      	ldrh	r2, [r3, #8]
 8004bd2:	8b7b      	ldrh	r3, [r7, #26]
 8004bd4:	f005 fa97 	bl	800a106 <USB_ReadPMA>
 8004bd8:	e07a      	b.n	8004cd0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	8b7b      	ldrh	r3, [r7, #26]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d306      	bcc.n	8004c18 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	8b7b      	ldrh	r3, [r7, #26]
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	619a      	str	r2, [r3, #24]
 8004c16:	e002      	b.n	8004c1e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d123      	bne.n	8004c6e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	83fb      	strh	r3, [r7, #30]
 8004c42:	8bfb      	ldrh	r3, [r7, #30]
 8004c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c48:	83fb      	strh	r3, [r7, #30]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	8bfb      	ldrh	r3, [r7, #30]
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11f      	bne.n	8004cb8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	83bb      	strh	r3, [r7, #28]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	8bbb      	ldrh	r3, [r7, #28]
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cb8:	8b7b      	ldrh	r3, [r7, #26]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6959      	ldr	r1, [r3, #20]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	895a      	ldrh	r2, [r3, #10]
 8004cca:	8b7b      	ldrh	r3, [r7, #26]
 8004ccc:	f005 fa1b 	bl	800a106 <USB_ReadPMA>
    }
  }

  return count;
 8004cd0:	8b7b      	ldrh	r3, [r7, #26]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b0a4      	sub	sp, #144	; 0x90
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 81db 	beq.w	80050aa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d18:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d907      	bls.n	8004d38 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004d30:	1ad2      	subs	r2, r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	e002      	b.n	8004d3e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 80b9 	bne.w	8004eba <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d126      	bne.n	8004d9e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	4413      	add	r3, r2
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	00da      	lsls	r2, r3, #3
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e01a      	b.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d116      	bne.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dba:	4413      	add	r3, r2
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	00da      	lsls	r2, r3, #3
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d126      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x156>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	00da      	lsls	r2, r3, #3
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e017      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x186>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d113      	bne.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x186>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	4413      	add	r3, r2
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	00da      	lsls	r2, r3, #3
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f007 f84d 	bl	800bf06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 82fa 	beq.w	800546c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	82fb      	strh	r3, [r7, #22]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]
 8004eb8:	e2d8      	b.n	800546c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d021      	beq.n	8004f08 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	f040 82ac 	bne.w	800546c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004f2a:	441a      	add	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6a1a      	ldr	r2, [r3, #32]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d30b      	bcc.n	8004f54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f4c:	1ad2      	subs	r2, r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	621a      	str	r2, [r3, #32]
 8004f52:	e017      	b.n	8004f84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d108      	bne.n	8004f6e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004f5c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004f60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f6c:	e00a      	b.n	8004f84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2200      	movs	r2, #0
 8004f82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d165      	bne.n	8005058 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa0:	4413      	add	r3, r2
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	00da      	lsls	r2, r3, #3
 8004faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fac:	4413      	add	r3, r2
 8004fae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x308>
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	e057      	b.n	8005092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe8:	d818      	bhi.n	800501c <HAL_PCD_EP_DB_Transmit+0x342>
 8004fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_PCD_EP_DB_Transmit+0x32a>
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	3301      	adds	r3, #1
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	b29b      	uxth	r3, r3
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	b29b      	uxth	r3, r3
 8005012:	4313      	orrs	r3, r2
 8005014:	b29a      	uxth	r2, r3
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	e03a      	b.n	8005092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800501c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	64bb      	str	r3, [r7, #72]	; 0x48
 8005024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <HAL_PCD_EP_DB_Transmit+0x35c>
 8005030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005032:	3b01      	subs	r3, #1
 8005034:	64bb      	str	r3, [r7, #72]	; 0x48
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29a      	uxth	r2, r3
 800503c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503e:	b29b      	uxth	r3, r3
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	b29b      	uxth	r3, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005050:	b29a      	uxth	r2, r3
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	e01c      	b.n	8005092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d118      	bne.n	8005092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005074:	4413      	add	r3, r2
 8005076:	647b      	str	r3, [r7, #68]	; 0x44
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	00da      	lsls	r2, r3, #3
 800507e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005080:	4413      	add	r3, r2
 8005082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005086:	643b      	str	r3, [r7, #64]	; 0x40
 8005088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800508c:	b29a      	uxth	r2, r3
 800508e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005090:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6959      	ldr	r1, [r3, #20]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	891a      	ldrh	r2, [r3, #8]
 800509e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f004 ffed 	bl	800a082 <USB_WritePMA>
 80050a8:	e1e0      	b.n	800546c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ce:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80050da:	429a      	cmp	r2, r3
 80050dc:	d307      	bcc.n	80050ee <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	619a      	str	r2, [r3, #24]
 80050ec:	e002      	b.n	80050f4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 80c0 	bne.w	800527e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d126      	bne.n	8005154 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800511a:	4413      	add	r3, r2
 800511c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	00da      	lsls	r2, r3, #3
 8005124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005126:	4413      	add	r3, r2
 8005128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800512c:	67bb      	str	r3, [r7, #120]	; 0x78
 800512e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005138:	b29a      	uxth	r2, r3
 800513a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b29b      	uxth	r3, r3
 8005144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514c:	b29a      	uxth	r2, r3
 800514e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	e01a      	b.n	800518a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d116      	bne.n	800518a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	667b      	str	r3, [r7, #100]	; 0x64
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005170:	4413      	add	r3, r2
 8005172:	667b      	str	r3, [r7, #100]	; 0x64
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	00da      	lsls	r2, r3, #3
 800517a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517c:	4413      	add	r3, r2
 800517e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005182:	663b      	str	r3, [r7, #96]	; 0x60
 8005184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005186:	2200      	movs	r2, #0
 8005188:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	677b      	str	r3, [r7, #116]	; 0x74
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d12b      	bne.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x516>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	4413      	add	r3, r2
 80051ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	00da      	lsls	r2, r3, #3
 80051b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	e017      	b.n	8005220 <HAL_PCD_EP_DB_Transmit+0x546>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d113      	bne.n	8005220 <HAL_PCD_EP_DB_Transmit+0x546>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005206:	4413      	add	r3, r2
 8005208:	677b      	str	r3, [r7, #116]	; 0x74
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	00da      	lsls	r2, r3, #3
 8005210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005212:	4413      	add	r3, r2
 8005214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005218:	673b      	str	r3, [r7, #112]	; 0x70
 800521a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800521c:	2200      	movs	r2, #0
 800521e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	4619      	mov	r1, r3
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f006 fe6d 	bl	800bf06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 811a 	bne.w	800546c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]
 800527c:	e0f6      	b.n	800546c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d121      	bne.n	80052cc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 80ca 	bne.w	800546c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80052e0:	441a      	add	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80052ee:	441a      	add	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d30b      	bcc.n	8005318 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	621a      	str	r2, [r3, #32]
 8005316:	e017      	b.n	8005348 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005320:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005330:	e00a      	b.n	8005348 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	657b      	str	r3, [r7, #84]	; 0x54
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d165      	bne.n	8005422 <HAL_PCD_EP_DB_Transmit+0x748>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536a:	4413      	add	r3, r2
 800536c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	00da      	lsls	r2, r3, #3
 8005374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005376:	4413      	add	r3, r2
 8005378:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800537c:	65bb      	str	r3, [r7, #88]	; 0x58
 800537e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005388:	b29a      	uxth	r2, r3
 800538a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	e054      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x77c>
 80053ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053b0:	2b3e      	cmp	r3, #62	; 0x3e
 80053b2:	d818      	bhi.n	80053e6 <HAL_PCD_EP_DB_Transmit+0x70c>
 80053b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80053bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_PCD_EP_DB_Transmit+0x6f4>
 80053c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ca:	3301      	adds	r3, #1
 80053cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4313      	orrs	r3, r2
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e037      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x77c>
 80053e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <HAL_PCD_EP_DB_Transmit+0x726>
 80053fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053fc:	3b01      	subs	r3, #1
 80053fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29a      	uxth	r2, r3
 8005406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005408:	b29b      	uxth	r3, r3
 800540a:	029b      	lsls	r3, r3, #10
 800540c:	b29b      	uxth	r3, r3
 800540e:	4313      	orrs	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541a:	b29a      	uxth	r2, r3
 800541c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e019      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d115      	bne.n	8005456 <HAL_PCD_EP_DB_Transmit+0x77c>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005438:	4413      	add	r3, r2
 800543a:	657b      	str	r3, [r7, #84]	; 0x54
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	00da      	lsls	r2, r3, #3
 8005442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005444:	4413      	add	r3, r2
 8005446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800544a:	653b      	str	r3, [r7, #80]	; 0x50
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005450:	b29a      	uxth	r2, r3
 8005452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005454:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6959      	ldr	r1, [r3, #20]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	895a      	ldrh	r2, [r3, #10]
 8005462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005466:	b29b      	uxth	r3, r3
 8005468:	f004 fe0b 	bl	800a082 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005486:	82bb      	strh	r3, [r7, #20]
 8005488:	8abb      	ldrh	r3, [r7, #20]
 800548a:	f083 0310 	eor.w	r3, r3, #16
 800548e:	82bb      	strh	r3, [r7, #20]
 8005490:	8abb      	ldrh	r3, [r7, #20]
 8005492:	f083 0320 	eor.w	r3, r3, #32
 8005496:	82bb      	strh	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	8abb      	ldrh	r3, [r7, #20]
 80054a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3790      	adds	r7, #144	; 0x90
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	817b      	strh	r3, [r7, #10]
 80054d4:	4613      	mov	r3, r2
 80054d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054d8:	897b      	ldrh	r3, [r7, #10]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	3310      	adds	r3, #16
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	e009      	b.n	8005510 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054fc:	897a      	ldrh	r2, [r7, #10]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005510:	893b      	ldrh	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	b29a      	uxth	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	80da      	strh	r2, [r3, #6]
 8005524:	e00b      	b.n	800553e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2201      	movs	r2, #1
 800552a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	b29a      	uxth	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	b29a      	uxth	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005570:	b29b      	uxth	r3, r3
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005584:	b29b      	uxth	r3, r3
 8005586:	f043 0302 	orr.w	r3, r3, #2
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d141      	bne.n	8005632 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055ae:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ba:	d131      	bne.n	8005620 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055bc:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c2:	4a46      	ldr	r2, [pc, #280]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055cc:	4b43      	ldr	r3, [pc, #268]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055d4:	4a41      	ldr	r2, [pc, #260]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055dc:	4b40      	ldr	r3, [pc, #256]	; (80056e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2232      	movs	r2, #50	; 0x32
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	4a3f      	ldr	r2, [pc, #252]	; (80056e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	0c9b      	lsrs	r3, r3, #18
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055f2:	e002      	b.n	80055fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d102      	bne.n	800560e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f2      	bne.n	80055f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800560e:	4b33      	ldr	r3, [pc, #204]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561a:	d158      	bne.n	80056ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e057      	b.n	80056d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005620:	4b2e      	ldr	r3, [pc, #184]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005626:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005630:	e04d      	b.n	80056ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005638:	d141      	bne.n	80056be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800563a:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d131      	bne.n	80056ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564e:	4a23      	ldr	r2, [pc, #140]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005654:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005660:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005668:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2232      	movs	r2, #50	; 0x32
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	0c9b      	lsrs	r3, r3, #18
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800567e:	e002      	b.n	8005686 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d102      	bne.n	800569a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f2      	bne.n	8005680 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a6:	d112      	bne.n	80056ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e011      	b.n	80056d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056bc:	e007      	b.n	80056ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40007000 	.word	0x40007000
 80056e0:	20000048 	.word	0x20000048
 80056e4:	431bde83 	.word	0x431bde83

080056e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e2fe      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d075      	beq.n	80057f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005706:	4b97      	ldr	r3, [pc, #604]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005710:	4b94      	ldr	r3, [pc, #592]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d102      	bne.n	8005726 <HAL_RCC_OscConfig+0x3e>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d002      	beq.n	800572c <HAL_RCC_OscConfig+0x44>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d10b      	bne.n	8005744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572c:	4b8d      	ldr	r3, [pc, #564]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d05b      	beq.n	80057f0 <HAL_RCC_OscConfig+0x108>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d157      	bne.n	80057f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e2d9      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x74>
 800574e:	4b85      	ldr	r3, [pc, #532]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a84      	ldr	r2, [pc, #528]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e01d      	b.n	8005798 <HAL_RCC_OscConfig+0xb0>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x98>
 8005766:	4b7f      	ldr	r3, [pc, #508]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7e      	ldr	r2, [pc, #504]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800576c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b7c      	ldr	r3, [pc, #496]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a7b      	ldr	r2, [pc, #492]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e00b      	b.n	8005798 <HAL_RCC_OscConfig+0xb0>
 8005780:	4b78      	ldr	r3, [pc, #480]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a77      	ldr	r2, [pc, #476]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b75      	ldr	r3, [pc, #468]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a74      	ldr	r2, [pc, #464]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d013      	beq.n	80057c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fb ff82 	bl	80016a8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fb ff7e 	bl	80016a8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	; 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e29e      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ba:	4b6a      	ldr	r3, [pc, #424]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0xc0>
 80057c6:	e014      	b.n	80057f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fb ff6e 	bl	80016a8 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fb ff6a 	bl	80016a8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e28a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057e2:	4b60      	ldr	r3, [pc, #384]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0xe8>
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d075      	beq.n	80058ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057fe:	4b59      	ldr	r3, [pc, #356]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005808:	4b56      	ldr	r3, [pc, #344]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b0c      	cmp	r3, #12
 8005816:	d102      	bne.n	800581e <HAL_RCC_OscConfig+0x136>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d002      	beq.n	8005824 <HAL_RCC_OscConfig+0x13c>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b04      	cmp	r3, #4
 8005822:	d11f      	bne.n	8005864 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005824:	4b4f      	ldr	r3, [pc, #316]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_OscConfig+0x154>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e25d      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583c:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	061b      	lsls	r3, r3, #24
 800584a:	4946      	ldr	r1, [pc, #280]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005850:	4b45      	ldr	r3, [pc, #276]	; (8005968 <HAL_RCC_OscConfig+0x280>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fb fedb 	bl	8001610 <HAL_InitTick>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d043      	beq.n	80058e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e249      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d023      	beq.n	80058b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800586c:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3c      	ldr	r2, [pc, #240]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fb ff16 	bl	80016a8 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005880:	f7fb ff12 	bl	80016a8 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e232      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589e:	4b31      	ldr	r3, [pc, #196]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	061b      	lsls	r3, r3, #24
 80058ac:	492d      	ldr	r1, [pc, #180]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	604b      	str	r3, [r1, #4]
 80058b2:	e01a      	b.n	80058ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80058ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fb fef2 	bl	80016a8 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c8:	f7fb feee 	bl	80016a8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e20e      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x1e0>
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d041      	beq.n	800597a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01c      	beq.n	8005938 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fe:	4b19      	ldr	r3, [pc, #100]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005904:	4a17      	ldr	r2, [pc, #92]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590e:	f7fb fecb 	bl	80016a8 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005916:	f7fb fec7 	bl	80016a8 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e1e7      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800592a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ef      	beq.n	8005916 <HAL_RCC_OscConfig+0x22e>
 8005936:	e020      	b.n	800597a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 800593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <HAL_RCC_OscConfig+0x27c>)
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005948:	f7fb feae 	bl	80016a8 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800594e:	e00d      	b.n	800596c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005950:	f7fb feaa 	bl	80016a8 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d906      	bls.n	800596c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e1ca      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
 8005968:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800596c:	4b8c      	ldr	r3, [pc, #560]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 800596e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ea      	bne.n	8005950 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80a6 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005988:	2300      	movs	r3, #0
 800598a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800598c:	4b84      	ldr	r3, [pc, #528]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_RCC_OscConfig+0x2b4>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x2b6>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a2:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	4a7e      	ldr	r2, [pc, #504]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 80059a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ac:	6593      	str	r3, [r2, #88]	; 0x58
 80059ae:	4b7c      	ldr	r3, [pc, #496]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059ba:	2301      	movs	r3, #1
 80059bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059be:	4b79      	ldr	r3, [pc, #484]	; (8005ba4 <HAL_RCC_OscConfig+0x4bc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d118      	bne.n	80059fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ca:	4b76      	ldr	r3, [pc, #472]	; (8005ba4 <HAL_RCC_OscConfig+0x4bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a75      	ldr	r2, [pc, #468]	; (8005ba4 <HAL_RCC_OscConfig+0x4bc>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d6:	f7fb fe67 	bl	80016a8 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059de:	f7fb fe63 	bl	80016a8 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e183      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f0:	4b6c      	ldr	r3, [pc, #432]	; (8005ba4 <HAL_RCC_OscConfig+0x4bc>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d108      	bne.n	8005a16 <HAL_RCC_OscConfig+0x32e>
 8005a04:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	4a65      	ldr	r2, [pc, #404]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a14:	e024      	b.n	8005a60 <HAL_RCC_OscConfig+0x378>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d110      	bne.n	8005a40 <HAL_RCC_OscConfig+0x358>
 8005a1e:	4b60      	ldr	r3, [pc, #384]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	4a5e      	ldr	r2, [pc, #376]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	4a5a      	ldr	r2, [pc, #360]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a3e:	e00f      	b.n	8005a60 <HAL_RCC_OscConfig+0x378>
 8005a40:	4b57      	ldr	r3, [pc, #348]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	4a56      	ldr	r2, [pc, #344]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a50:	4b53      	ldr	r3, [pc, #332]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	4a52      	ldr	r2, [pc, #328]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fb fe1e 	bl	80016a8 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a70:	f7fb fe1a 	bl	80016a8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e138      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a86:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ed      	beq.n	8005a70 <HAL_RCC_OscConfig+0x388>
 8005a94:	e015      	b.n	8005ac2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fb fe07 	bl	80016a8 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fb fe03 	bl	80016a8 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e121      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ab4:	4b3a      	ldr	r3, [pc, #232]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ed      	bne.n	8005a9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ac2:	7ffb      	ldrb	r3, [r7, #31]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac8:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	4a34      	ldr	r2, [pc, #208]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d03c      	beq.n	8005b5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01c      	beq.n	8005b22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ae8:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aee:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fb fdd6 	bl	80016a8 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b00:	f7fb fdd2 	bl	80016a8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0f2      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ef      	beq.n	8005b00 <HAL_RCC_OscConfig+0x418>
 8005b20:	e01b      	b.n	8005b5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fb fdb9 	bl	80016a8 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b3a:	f7fb fdb5 	bl	80016a8 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e0d5      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ef      	bne.n	8005b3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80c9 	beq.w	8005cf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b0c      	cmp	r3, #12
 8005b6e:	f000 8083 	beq.w	8005c78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d15e      	bne.n	8005c38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <HAL_RCC_OscConfig+0x4b8>)
 8005b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b86:	f7fb fd8f 	bl	80016a8 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b8c:	e00c      	b.n	8005ba8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fb fd8b 	bl	80016a8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d905      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e0ab      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba8:	4b55      	ldr	r3, [pc, #340]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ec      	bne.n	8005b8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bb4:	4b52      	ldr	r3, [pc, #328]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	4b52      	ldr	r3, [pc, #328]	; (8005d04 <HAL_RCC_OscConfig+0x61c>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6a11      	ldr	r1, [r2, #32]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0112      	lsls	r2, r2, #4
 8005bc8:	4311      	orrs	r1, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005bce:	0212      	lsls	r2, r2, #8
 8005bd0:	4311      	orrs	r1, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bd6:	0852      	lsrs	r2, r2, #1
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	0552      	lsls	r2, r2, #21
 8005bdc:	4311      	orrs	r1, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be2:	0852      	lsrs	r2, r2, #1
 8005be4:	3a01      	subs	r2, #1
 8005be6:	0652      	lsls	r2, r2, #25
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bee:	06d2      	lsls	r2, r2, #27
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	4943      	ldr	r1, [pc, #268]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf8:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c04:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fb fd4a 	bl	80016a8 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fb fd46 	bl	80016a8 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e066      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2a:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x530>
 8005c36:	e05e      	b.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a30      	ldr	r2, [pc, #192]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fb fd30 	bl	80016a8 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fb fd2c 	bl	80016a8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e04c      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5e:	4b28      	ldr	r3, [pc, #160]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c6a:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4924      	ldr	r1, [pc, #144]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <HAL_RCC_OscConfig+0x620>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	60cb      	str	r3, [r1, #12]
 8005c76:	e03e      	b.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e039      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c84:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f003 0203 	and.w	r2, r3, #3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d12c      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d123      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d11b      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d113      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d109      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	3b01      	subs	r3, #1
 8005cec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40021000 	.word	0x40021000
 8005d04:	019f800c 	.word	0x019f800c
 8005d08:	feeefffc 	.word	0xfeeefffc

08005d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e11e      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d24:	4b91      	ldr	r3, [pc, #580]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d910      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b8e      	ldr	r3, [pc, #568]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 020f 	bic.w	r2, r3, #15
 8005d3a:	498c      	ldr	r1, [pc, #560]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b8a      	ldr	r3, [pc, #552]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e106      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d073      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d129      	bne.n	8005dbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d68:	4b81      	ldr	r3, [pc, #516]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0f4      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d78:	f000 f99e 	bl	80060b8 <RCC_GetSysClockFreqFromPLLSource>
 8005d7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4a7c      	ldr	r2, [pc, #496]	; (8005f74 <HAL_RCC_ClockConfig+0x268>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d93f      	bls.n	8005e06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d86:	4b7a      	ldr	r3, [pc, #488]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d033      	beq.n	8005e06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d12f      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005da6:	4b72      	ldr	r3, [pc, #456]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dae:	4a70      	ldr	r2, [pc, #448]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e024      	b.n	8005e06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc4:	4b6a      	ldr	r3, [pc, #424]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0c6      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dd4:	4b66      	ldr	r3, [pc, #408]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0be      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005de4:	f000 f8ce 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4a61      	ldr	r2, [pc, #388]	; (8005f74 <HAL_RCC_ClockConfig+0x268>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d909      	bls.n	8005e06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005df2:	4b5f      	ldr	r3, [pc, #380]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dfa:	4a5d      	ldr	r2, [pc, #372]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b5a      	ldr	r3, [pc, #360]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4957      	ldr	r1, [pc, #348]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e18:	f7fb fc46 	bl	80016a8 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fb fc42 	bl	80016a8 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e095      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	4b4e      	ldr	r3, [pc, #312]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 020c 	and.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1eb      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d023      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e60:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a42      	ldr	r2, [pc, #264]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e78:	4b3d      	ldr	r3, [pc, #244]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e80:	4a3b      	ldr	r2, [pc, #236]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e88:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	4936      	ldr	r1, [pc, #216]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	608b      	str	r3, [r1, #8]
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d105      	bne.n	8005eae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ea2:	4b33      	ldr	r3, [pc, #204]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eae:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d21d      	bcs.n	8005ef8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ebc:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 020f 	bic.w	r2, r3, #15
 8005ec4:	4929      	ldr	r1, [pc, #164]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ecc:	f7fb fbec 	bl	80016a8 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed4:	f7fb fbe8 	bl	80016a8 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e03b      	b.n	8005f62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_RCC_ClockConfig+0x260>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1ed      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f04:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4917      	ldr	r1, [pc, #92]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	490f      	ldr	r1, [pc, #60]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f36:	f000 f825 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <HAL_RCC_ClockConfig+0x264>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	490c      	ldr	r1, [pc, #48]	; (8005f78 <HAL_RCC_ClockConfig+0x26c>)
 8005f48:	5ccb      	ldrb	r3, [r1, r3]
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <HAL_RCC_ClockConfig+0x270>)
 8005f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <HAL_RCC_ClockConfig+0x274>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fb fb58 	bl	8001610 <HAL_InitTick>
 8005f60:	4603      	mov	r3, r0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40022000 	.word	0x40022000
 8005f70:	40021000 	.word	0x40021000
 8005f74:	04c4b400 	.word	0x04c4b400
 8005f78:	0800ce30 	.word	0x0800ce30
 8005f7c:	20000048 	.word	0x20000048
 8005f80:	2000004c 	.word	0x2000004c

08005f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f8a:	4b2c      	ldr	r3, [pc, #176]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d102      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f96:	4b2a      	ldr	r3, [pc, #168]	; (8006040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	e047      	b.n	800602c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f9c:	4b27      	ldr	r3, [pc, #156]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d102      	bne.n	8005fae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fa8:	4b26      	ldr	r3, [pc, #152]	; (8006044 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	e03e      	b.n	800602c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005fae:	4b23      	ldr	r3, [pc, #140]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d136      	bne.n	8006028 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fba:	4b20      	ldr	r3, [pc, #128]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fc4:	4b1d      	ldr	r3, [pc, #116]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d10c      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe2:	68d2      	ldr	r2, [r2, #12]
 8005fe4:	0a12      	lsrs	r2, r2, #8
 8005fe6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	617b      	str	r3, [r7, #20]
      break;
 8005ff0:	e00c      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffa:	4a10      	ldr	r2, [pc, #64]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ffc:	68d2      	ldr	r2, [r2, #12]
 8005ffe:	0a12      	lsrs	r2, r2, #8
 8006000:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]
      break;
 800600a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_GetSysClockFreq+0xb8>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	0e5b      	lsrs	r3, r3, #25
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	e001      	b.n	800602c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800602c:	693b      	ldr	r3, [r7, #16]
}
 800602e:	4618      	mov	r0, r3
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200

08006048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <HAL_RCC_GetHCLKFreq+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000048 	.word	0x20000048

08006060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006064:	f7ff fff0 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4904      	ldr	r1, [pc, #16]	; (8006088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40021000 	.word	0x40021000
 8006088:	0800ce40 	.word	0x0800ce40

0800608c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006090:	f7ff ffda 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006094:	4602      	mov	r2, r0
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	0adb      	lsrs	r3, r3, #11
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	4904      	ldr	r1, [pc, #16]	; (80060b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060a2:	5ccb      	ldrb	r3, [r1, r3]
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000
 80060b4:	0800ce40 	.word	0x0800ce40

080060b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060be:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060c8:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d10c      	bne.n	80060f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060dc:	4a17      	ldr	r2, [pc, #92]	; (800613c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060e6:	68d2      	ldr	r2, [r2, #12]
 80060e8:	0a12      	lsrs	r2, r2, #8
 80060ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	617b      	str	r3, [r7, #20]
    break;
 80060f4:	e00c      	b.n	8006110 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f6:	4a12      	ldr	r2, [pc, #72]	; (8006140 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006100:	68d2      	ldr	r2, [r2, #12]
 8006102:	0a12      	lsrs	r2, r2, #8
 8006104:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]
    break;
 800610e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	0e5b      	lsrs	r3, r3, #25
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	3301      	adds	r3, #1
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800612a:	687b      	ldr	r3, [r7, #4]
}
 800612c:	4618      	mov	r0, r3
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40021000 	.word	0x40021000
 800613c:	007a1200 	.word	0x007a1200
 8006140:	00f42400 	.word	0x00f42400

08006144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800614c:	2300      	movs	r3, #0
 800614e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006150:	2300      	movs	r3, #0
 8006152:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8098 	beq.w	8006292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006162:	2300      	movs	r3, #0
 8006164:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006166:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10d      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006172:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	4a3f      	ldr	r2, [pc, #252]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6593      	str	r3, [r2, #88]	; 0x58
 800617e:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800618a:	2301      	movs	r3, #1
 800618c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618e:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a39      	ldr	r2, [pc, #228]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800619a:	f7fb fa85 	bl	80016a8 <HAL_GetTick>
 800619e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061a0:	e009      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fb fa81 	bl	80016a8 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d902      	bls.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	74fb      	strb	r3, [r7, #19]
        break;
 80061b4:	e005      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b6:	4b30      	ldr	r3, [pc, #192]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0ef      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80061c2:	7cfb      	ldrb	r3, [r7, #19]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d159      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061c8:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d019      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061e4:	4b23      	ldr	r3, [pc, #140]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061f0:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006206:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006210:	4a18      	ldr	r2, [pc, #96]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006222:	f7fb fa41 	bl	80016a8 <HAL_GetTick>
 8006226:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006228:	e00b      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fb fa3d 	bl	80016a8 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d902      	bls.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	74fb      	strb	r3, [r7, #19]
            break;
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0ec      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006250:	7cfb      	ldrb	r3, [r7, #19]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006256:	4b07      	ldr	r3, [pc, #28]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	4903      	ldr	r1, [pc, #12]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800626c:	e008      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	74bb      	strb	r3, [r7, #18]
 8006272:	e005      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006274:	40021000 	.word	0x40021000
 8006278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006280:	7c7b      	ldrb	r3, [r7, #17]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d105      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006286:	4ba6      	ldr	r3, [pc, #664]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	4aa5      	ldr	r2, [pc, #660]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800628c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006290:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800629e:	4ba0      	ldr	r3, [pc, #640]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a4:	f023 0203 	bic.w	r2, r3, #3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	499c      	ldr	r1, [pc, #624]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062c0:	4b97      	ldr	r3, [pc, #604]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f023 020c 	bic.w	r2, r3, #12
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4994      	ldr	r1, [pc, #592]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062e2:	4b8f      	ldr	r3, [pc, #572]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	498b      	ldr	r1, [pc, #556]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006304:	4b86      	ldr	r3, [pc, #536]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	4983      	ldr	r1, [pc, #524]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006326:	4b7e      	ldr	r3, [pc, #504]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	497a      	ldr	r1, [pc, #488]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006348:	4b75      	ldr	r3, [pc, #468]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	4972      	ldr	r1, [pc, #456]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800636a:	4b6d      	ldr	r3, [pc, #436]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4969      	ldr	r1, [pc, #420]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800638c:	4b64      	ldr	r3, [pc, #400]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	4961      	ldr	r1, [pc, #388]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ae:	4b5c      	ldr	r3, [pc, #368]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	4958      	ldr	r1, [pc, #352]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d015      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063d0:	4b53      	ldr	r3, [pc, #332]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	4950      	ldr	r1, [pc, #320]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ee:	d105      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f0:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a4a      	ldr	r2, [pc, #296]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063fa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006408:	4b45      	ldr	r3, [pc, #276]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4942      	ldr	r1, [pc, #264]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006426:	d105      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006428:	4b3d      	ldr	r3, [pc, #244]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4a3c      	ldr	r2, [pc, #240]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800642e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006432:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006440:	4b37      	ldr	r3, [pc, #220]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	4934      	ldr	r1, [pc, #208]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800645e:	d105      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006460:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4a2e      	ldr	r2, [pc, #184]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800646a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d015      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006478:	4b29      	ldr	r3, [pc, #164]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	4926      	ldr	r1, [pc, #152]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006496:	d105      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4a20      	ldr	r2, [pc, #128]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800649e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d015      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b0:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	4918      	ldr	r1, [pc, #96]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ce:	d105      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064d0:	4b13      	ldr	r3, [pc, #76]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4a12      	ldr	r2, [pc, #72]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064e8:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	490a      	ldr	r1, [pc, #40]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d105      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006508:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800650e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006512:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006514:	7cbb      	ldrb	r3, [r7, #18]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40021000 	.word	0x40021000

08006524 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d070      	beq.n	8006618 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fa fda0 	bl	8001090 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b10      	cmp	r3, #16
 8006564:	d04f      	beq.n	8006606 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	22ca      	movs	r2, #202	; 0xca
 800656c:	625a      	str	r2, [r3, #36]	; 0x24
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2253      	movs	r2, #83	; 0x53
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f878 	bl	800666c <RTC_EnterInitMode>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d126      	bne.n	80065d4 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6999      	ldr	r1, [r3, #24]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68d9      	ldr	r1, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	041a      	lsls	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f884 	bl	80066d8 <RTC_ExitInitMode>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d110      	bne.n	80065fc <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	22ff      	movs	r2, #255	; 0xff
 8006602:	625a      	str	r2, [r3, #36]	; 0x24
 8006604:	e001      	b.n	800660a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d103      	bne.n	8006618 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0d      	ldr	r2, [pc, #52]	; (8006668 <HAL_RTC_WaitForSynchro+0x44>)
 8006632:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006634:	f7fb f838 	bl	80016a8 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800663a:	e009      	b.n	8006650 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800663c:	f7fb f834 	bl	80016a8 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800664a:	d901      	bls.n	8006650 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e007      	b.n	8006660 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0ee      	beq.n	800663c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	0001005f 	.word	0x0001005f

0800666c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d123      	bne.n	80066ce <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006694:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006696:	f7fb f807 	bl	80016a8 <HAL_GetTick>
 800669a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800669c:	e00d      	b.n	80066ba <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800669e:	f7fb f803 	bl	80016a8 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ac:	d905      	bls.n	80066ba <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2203      	movs	r2, #3
 80066b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <RTC_EnterInitMode+0x62>
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d1e7      	bne.n	800669e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff ff8e 	bl	8006624 <HAL_RTC_WaitForSynchro>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d022      	beq.n	8006754 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2203      	movs	r2, #3
 8006712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	73fb      	strb	r3, [r7, #15]
 800671a:	e01b      	b.n	8006754 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0220 	bic.w	r2, r2, #32
 800672a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ff79 	bl	8006624 <HAL_RTC_WaitForSynchro>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2203      	movs	r2, #3
 800673c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0220 	orr.w	r2, r2, #32
 8006752:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006774:	2302      	movs	r3, #2
 8006776:	e062      	b.n	800683e <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	22ca      	movs	r2, #202	; 0xca
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2253      	movs	r2, #83	; 0x53
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d120      	bne.n	80067f8 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 80067b6:	f7fa ff77 	bl	80016a8 <HAL_GetTick>
 80067ba:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80067bc:	e015      	b.n	80067ea <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067be:	f7fa ff73 	bl	80016a8 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067cc:	d90d      	bls.n	80067ea <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	22ff      	movs	r2, #255	; 0xff
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2203      	movs	r2, #3
 80067da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e029      	b.n	800683e <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0e2      	beq.n	80067be <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f023 0107 	bic.w	r1, r3, #7
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	430a      	orrs	r2, r1
 800680a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006822:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	22ff      	movs	r2, #255	; 0xff
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e09d      	b.n	8006994 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d108      	bne.n	8006872 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006868:	d009      	beq.n	800687e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	61da      	str	r2, [r3, #28]
 8006870:	e005      	b.n	800687e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fa fc73 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068be:	d902      	bls.n	80068c6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e002      	b.n	80068cc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068d4:	d007      	beq.n	80068e6 <HAL_SPI_Init+0xa0>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068de:	d002      	beq.n	80068e6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	ea42 0103 	orr.w	r1, r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	0c1b      	lsrs	r3, r3, #16
 8006942:	f003 0204 	and.w	r2, r3, #4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006962:	ea42 0103 	orr.w	r1, r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006982:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e042      	b.n	8006a34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fa fd89 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	; 0x24
 80069ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fb82 	bl	80070f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8b3 	bl	8006b58 <UART_SetConfig>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e01b      	b.n	8006a34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc01 	bl	8007234 <UART_CheckIdleState>
 8006a32:	4603      	mov	r3, r0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d17b      	bne.n	8006b4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_UART_Transmit+0x26>
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e074      	b.n	8006b50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2221      	movs	r2, #33	; 0x21
 8006a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a76:	f7fa fe17 	bl	80016a8 <HAL_GetTick>
 8006a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	88fa      	ldrh	r2, [r7, #6]
 8006a80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88fa      	ldrh	r2, [r7, #6]
 8006a88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a94:	d108      	bne.n	8006aa8 <HAL_UART_Transmit+0x6c>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e003      	b.n	8006ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ab0:	e030      	b.n	8006b14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2180      	movs	r1, #128	; 0x80
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fc63 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e03d      	b.n	8006b50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3302      	adds	r3, #2
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e007      	b.n	8006b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3301      	adds	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1c8      	bne.n	8006ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2200      	movs	r2, #0
 8006b28:	2140      	movs	r1, #64	; 0x40
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fc2c 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e006      	b.n	8006b50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b4e:	2302      	movs	r3, #2
  }
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b5c:	b08c      	sub	sp, #48	; 0x30
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4bab      	ldr	r3, [pc, #684]	; (8006e34 <UART_SetConfig+0x2dc>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4aa0      	ldr	r2, [pc, #640]	; (8006e38 <UART_SetConfig+0x2e0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006bce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	f023 010f 	bic.w	r1, r3, #15
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a91      	ldr	r2, [pc, #580]	; (8006e3c <UART_SetConfig+0x2e4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d125      	bne.n	8006c48 <UART_SetConfig+0xf0>
 8006bfc:	4b90      	ldr	r3, [pc, #576]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d81a      	bhi.n	8006c40 <UART_SetConfig+0xe8>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0xb8>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c29 	.word	0x08006c29
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c26:	e0d6      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2e:	e0d2      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c36:	e0ce      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3e:	e0ca      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c46:	e0c6      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a7d      	ldr	r2, [pc, #500]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d138      	bne.n	8006cc4 <UART_SetConfig+0x16c>
 8006c52:	4b7b      	ldr	r3, [pc, #492]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	f003 030c 	and.w	r3, r3, #12
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	d82d      	bhi.n	8006cbc <UART_SetConfig+0x164>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0x110>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cbd 	.word	0x08006cbd
 8006c74:	08006cbd 	.word	0x08006cbd
 8006c78:	08006cad 	.word	0x08006cad
 8006c7c:	08006cbd 	.word	0x08006cbd
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca2:	e098      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006caa:	e094      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006cac:	2304      	movs	r3, #4
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cb2:	e090      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cba:	e08c      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e088      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a5f      	ldr	r2, [pc, #380]	; (8006e48 <UART_SetConfig+0x2f0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d125      	bne.n	8006d1a <UART_SetConfig+0x1c2>
 8006cce:	4b5c      	ldr	r3, [pc, #368]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cd8:	2b30      	cmp	r3, #48	; 0x30
 8006cda:	d016      	beq.n	8006d0a <UART_SetConfig+0x1b2>
 8006cdc:	2b30      	cmp	r3, #48	; 0x30
 8006cde:	d818      	bhi.n	8006d12 <UART_SetConfig+0x1ba>
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d00a      	beq.n	8006cfa <UART_SetConfig+0x1a2>
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d814      	bhi.n	8006d12 <UART_SetConfig+0x1ba>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <UART_SetConfig+0x19a>
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d008      	beq.n	8006d02 <UART_SetConfig+0x1aa>
 8006cf0:	e00f      	b.n	8006d12 <UART_SetConfig+0x1ba>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf8:	e06d      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d00:	e069      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d02:	2304      	movs	r3, #4
 8006d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d08:	e065      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d10:	e061      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d12:	2310      	movs	r3, #16
 8006d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d18:	e05d      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4b      	ldr	r2, [pc, #300]	; (8006e4c <UART_SetConfig+0x2f4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d125      	bne.n	8006d70 <UART_SetConfig+0x218>
 8006d24:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d30:	d016      	beq.n	8006d60 <UART_SetConfig+0x208>
 8006d32:	2bc0      	cmp	r3, #192	; 0xc0
 8006d34:	d818      	bhi.n	8006d68 <UART_SetConfig+0x210>
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d00a      	beq.n	8006d50 <UART_SetConfig+0x1f8>
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d814      	bhi.n	8006d68 <UART_SetConfig+0x210>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <UART_SetConfig+0x1f0>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d008      	beq.n	8006d58 <UART_SetConfig+0x200>
 8006d46:	e00f      	b.n	8006d68 <UART_SetConfig+0x210>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4e:	e042      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d50:	2302      	movs	r3, #2
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e03e      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e03a      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d66:	e036      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6e:	e032      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a30      	ldr	r2, [pc, #192]	; (8006e38 <UART_SetConfig+0x2e0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d12a      	bne.n	8006dd0 <UART_SetConfig+0x278>
 8006d7a:	4b31      	ldr	r3, [pc, #196]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d88:	d01a      	beq.n	8006dc0 <UART_SetConfig+0x268>
 8006d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d8e:	d81b      	bhi.n	8006dc8 <UART_SetConfig+0x270>
 8006d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d94:	d00c      	beq.n	8006db0 <UART_SetConfig+0x258>
 8006d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d9a:	d815      	bhi.n	8006dc8 <UART_SetConfig+0x270>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <UART_SetConfig+0x250>
 8006da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da4:	d008      	beq.n	8006db8 <UART_SetConfig+0x260>
 8006da6:	e00f      	b.n	8006dc8 <UART_SetConfig+0x270>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e012      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e00e      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	e00a      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc6:	e006      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e002      	b.n	8006dd6 <UART_SetConfig+0x27e>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <UART_SetConfig+0x2e0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	f040 80a8 	bne.w	8006f32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d834      	bhi.n	8006e54 <UART_SetConfig+0x2fc>
 8006dea:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x298>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e55 	.word	0x08006e55
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e55 	.word	0x08006e55
 8006e00:	08006e23 	.word	0x08006e23
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	08006e55 	.word	0x08006e55
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7ff f924 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e1a:	e021      	b.n	8006e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <UART_SetConfig+0x2f8>)
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e20:	e01e      	b.n	8006e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7ff f8af 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e28:	e01a      	b.n	8006e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e30:	e016      	b.n	8006e60 <UART_SetConfig+0x308>
 8006e32:	bf00      	nop
 8006e34:	cfff69f3 	.word	0xcfff69f3
 8006e38:	40008000 	.word	0x40008000
 8006e3c:	40013800 	.word	0x40013800
 8006e40:	40021000 	.word	0x40021000
 8006e44:	40004400 	.word	0x40004400
 8006e48:	40004800 	.word	0x40004800
 8006e4c:	40004c00 	.word	0x40004c00
 8006e50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 812a 	beq.w	80070bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	4a9e      	ldr	r2, [pc, #632]	; (80070e8 <UART_SetConfig+0x590>)
 8006e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	4413      	add	r3, r2
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d305      	bcc.n	8006e98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e9e:	e10d      	b.n	80070bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	60fa      	str	r2, [r7, #12]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	4a8e      	ldr	r2, [pc, #568]	; (80070e8 <UART_SetConfig+0x590>)
 8006eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	607a      	str	r2, [r7, #4]
 8006eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ec2:	f7f9 f9fd 	bl	80002c0 <__aeabi_uldivmod>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4610      	mov	r0, r2
 8006ecc:	4619      	mov	r1, r3
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	020b      	lsls	r3, r1, #8
 8006ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006edc:	0202      	lsls	r2, r0, #8
 8006ede:	6979      	ldr	r1, [r7, #20]
 8006ee0:	6849      	ldr	r1, [r1, #4]
 8006ee2:	0849      	lsrs	r1, r1, #1
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	4605      	mov	r5, r0
 8006eea:	eb12 0804 	adds.w	r8, r2, r4
 8006eee:	eb43 0905 	adc.w	r9, r3, r5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	469a      	mov	sl, r3
 8006efa:	4693      	mov	fp, r2
 8006efc:	4652      	mov	r2, sl
 8006efe:	465b      	mov	r3, fp
 8006f00:	4640      	mov	r0, r8
 8006f02:	4649      	mov	r1, r9
 8006f04:	f7f9 f9dc 	bl	80002c0 <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f16:	d308      	bcc.n	8006f2a <UART_SetConfig+0x3d2>
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1e:	d204      	bcs.n	8006f2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a3a      	ldr	r2, [r7, #32]
 8006f26:	60da      	str	r2, [r3, #12]
 8006f28:	e0c8      	b.n	80070bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f30:	e0c4      	b.n	80070bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f3a:	d167      	bne.n	800700c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d828      	bhi.n	8006f96 <UART_SetConfig+0x43e>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0x3f4>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f79 	.word	0x08006f79
 8006f54:	08006f81 	.word	0x08006f81
 8006f58:	08006f97 	.word	0x08006f97
 8006f5c:	08006f87 	.word	0x08006f87
 8006f60:	08006f97 	.word	0x08006f97
 8006f64:	08006f97 	.word	0x08006f97
 8006f68:	08006f97 	.word	0x08006f97
 8006f6c:	08006f8f 	.word	0x08006f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7ff f876 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8006f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f76:	e014      	b.n	8006fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f78:	f7ff f888 	bl	800608c <HAL_RCC_GetPCLK2Freq>
 8006f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f80:	4b5a      	ldr	r3, [pc, #360]	; (80070ec <UART_SetConfig+0x594>)
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f84:	e00d      	b.n	8006fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f86:	f7fe fffd 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f94:	e005      	b.n	8006fa2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8089 	beq.w	80070bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	4a4e      	ldr	r2, [pc, #312]	; (80070e8 <UART_SetConfig+0x590>)
 8006fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fbc:	005a      	lsls	r2, r3, #1
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	441a      	add	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b0f      	cmp	r3, #15
 8006fd4:	d916      	bls.n	8007004 <UART_SetConfig+0x4ac>
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fdc:	d212      	bcs.n	8007004 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f023 030f 	bic.w	r3, r3, #15
 8006fe6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	8bfb      	ldrh	r3, [r7, #30]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	8bfa      	ldrh	r2, [r7, #30]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	e05b      	b.n	80070bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800700a:	e057      	b.n	80070bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800700c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007010:	2b08      	cmp	r3, #8
 8007012:	d828      	bhi.n	8007066 <UART_SetConfig+0x50e>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <UART_SetConfig+0x4c4>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007041 	.word	0x08007041
 8007020:	08007049 	.word	0x08007049
 8007024:	08007051 	.word	0x08007051
 8007028:	08007067 	.word	0x08007067
 800702c:	08007057 	.word	0x08007057
 8007030:	08007067 	.word	0x08007067
 8007034:	08007067 	.word	0x08007067
 8007038:	08007067 	.word	0x08007067
 800703c:	0800705f 	.word	0x0800705f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007040:	f7ff f80e 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8007044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007046:	e014      	b.n	8007072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007048:	f7ff f820 	bl	800608c <HAL_RCC_GetPCLK2Freq>
 800704c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800704e:	e010      	b.n	8007072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007050:	4b26      	ldr	r3, [pc, #152]	; (80070ec <UART_SetConfig+0x594>)
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007054:	e00d      	b.n	8007072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007056:	f7fe ff95 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 800705a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800705c:	e009      	b.n	8007072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007064:	e005      	b.n	8007072 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007070:	bf00      	nop
    }

    if (pclk != 0U)
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d021      	beq.n	80070bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <UART_SetConfig+0x590>)
 800707e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007082:	461a      	mov	r2, r3
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	fbb3 f2f2 	udiv	r2, r3, r2
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	441a      	add	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	2b0f      	cmp	r3, #15
 80070a0:	d909      	bls.n	80070b6 <UART_SetConfig+0x55e>
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d205      	bcs.n	80070b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
 80070b4:	e002      	b.n	80070bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2201      	movs	r2, #1
 80070c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2200      	movs	r2, #0
 80070d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3730      	adds	r7, #48	; 0x30
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e6:	bf00      	nop
 80070e8:	0800ce48 	.word	0x0800ce48
 80070ec:	00f42400 	.word	0x00f42400

080070f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01a      	beq.n	8007206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ee:	d10a      	bne.n	8007206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b098      	sub	sp, #96	; 0x60
 8007238:	af02      	add	r7, sp, #8
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007244:	f7fa fa30 	bl	80016a8 <HAL_GetTick>
 8007248:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b08      	cmp	r3, #8
 8007256:	d12f      	bne.n	80072b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007260:	2200      	movs	r2, #0
 8007262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f88e 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d022      	beq.n	80072b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007286:	653b      	str	r3, [r7, #80]	; 0x50
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007290:	647b      	str	r3, [r7, #68]	; 0x44
 8007292:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e6      	bne.n	8007272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e063      	b.n	8007380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d149      	bne.n	800735a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ce:	2200      	movs	r2, #0
 80072d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f857 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d03c      	beq.n	800735a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	623b      	str	r3, [r7, #32]
   return(result);
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007300:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e6      	bne.n	80072e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	60fb      	str	r3, [r7, #12]
   return(result);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	64bb      	str	r3, [r7, #72]	; 0x48
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007332:	61fa      	str	r2, [r7, #28]
 8007334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	69b9      	ldr	r1, [r7, #24]
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	617b      	str	r3, [r7, #20]
   return(result);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e012      	b.n	8007380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3758      	adds	r7, #88	; 0x58
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	e04f      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d04b      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a2:	f7fa f981 	bl	80016a8 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e04e      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d037      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d034      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d031      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d110      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2208      	movs	r2, #8
 80073ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f838 	bl	8007462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2208      	movs	r2, #8
 80073f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e029      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007414:	d111      	bne.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800741e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f81e 	bl	8007462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e00f      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4013      	ands	r3, r2
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	bf0c      	ite	eq
 800744a:	2301      	moveq	r3, #1
 800744c:	2300      	movne	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	429a      	cmp	r2, r3
 8007456:	d0a0      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007462:	b480      	push	{r7}
 8007464:	b095      	sub	sp, #84	; 0x54
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800747e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007488:	643b      	str	r3, [r7, #64]	; 0x40
 800748a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800748e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3308      	adds	r3, #8
 80074a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e3      	bne.n	800749c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d118      	bne.n	800750e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f023 0310 	bic.w	r3, r3, #16
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6979      	ldr	r1, [r7, #20]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	613b      	str	r3, [r7, #16]
   return(result);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007522:	bf00      	nop
 8007524:	3754      	adds	r7, #84	; 0x54
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_UARTEx_DisableFifoMode+0x16>
 8007540:	2302      	movs	r3, #2
 8007542:	e027      	b.n	8007594 <HAL_UARTEx_DisableFifoMode+0x66>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2224      	movs	r2, #36	; 0x24
 8007550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e02d      	b.n	8007614 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2224      	movs	r2, #36	; 0x24
 80075c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f84f 	bl	8007698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e02d      	b.n	8007690 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	; 0x24
 8007640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0201 	bic.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f811 	bl	8007698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d108      	bne.n	80076ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076b8:	e031      	b.n	800771e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076ba:	2308      	movs	r3, #8
 80076bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076be:	2308      	movs	r3, #8
 80076c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	0e5b      	lsrs	r3, r3, #25
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	0f5b      	lsrs	r3, r3, #29
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	7b3a      	ldrb	r2, [r7, #12]
 80076e6:	4911      	ldr	r1, [pc, #68]	; (800772c <UARTEx_SetNbDataToProcess+0x94>)
 80076e8:	5c8a      	ldrb	r2, [r1, r2]
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076ee:	7b3a      	ldrb	r2, [r7, #12]
 80076f0:	490f      	ldr	r1, [pc, #60]	; (8007730 <UARTEx_SetNbDataToProcess+0x98>)
 80076f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	7b7a      	ldrb	r2, [r7, #13]
 8007704:	4909      	ldr	r1, [pc, #36]	; (800772c <UARTEx_SetNbDataToProcess+0x94>)
 8007706:	5c8a      	ldrb	r2, [r1, r2]
 8007708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800770c:	7b7a      	ldrb	r2, [r7, #13]
 800770e:	4908      	ldr	r1, [pc, #32]	; (8007730 <UARTEx_SetNbDataToProcess+0x98>)
 8007710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007712:	fb93 f3f2 	sdiv	r3, r3, r2
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	0800ce60 	.word	0x0800ce60
 8007730:	0800ce68 	.word	0x0800ce68

08007734 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007734:	b480      	push	{r7}
 8007736:	b08b      	sub	sp, #44	; 0x2c
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	fa93 f3a3 	rbit	r3, r3
 800774e:	613b      	str	r3, [r7, #16]
  return result;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800775a:	2320      	movs	r3, #32
 800775c:	e003      	b.n	8007766 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	fab3 f383 	clz	r3, r3
 8007764:	b2db      	uxtb	r3, r3
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	2103      	movs	r1, #3
 800776a:	fa01 f303 	lsl.w	r3, r1, r3
 800776e:	43db      	mvns	r3, r3
 8007770:	401a      	ands	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	fa93 f3a3 	rbit	r3, r3
 800777c:	61fb      	str	r3, [r7, #28]
  return result;
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007788:	2320      	movs	r3, #32
 800778a:	e003      	b.n	8007794 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	fab3 f383 	clz	r3, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	372c      	adds	r7, #44	; 0x2c
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	43db      	mvns	r3, r3
 80077c2:	401a      	ands	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	431a      	orrs	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80077de:	b480      	push	{r7}
 80077e0:	b08b      	sub	sp, #44	; 0x2c
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	fa93 f3a3 	rbit	r3, r3
 80077f8:	613b      	str	r3, [r7, #16]
  return result;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007804:	2320      	movs	r3, #32
 8007806:	e003      	b.n	8007810 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	fab3 f383 	clz	r3, r3
 800780e:	b2db      	uxtb	r3, r3
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	2103      	movs	r1, #3
 8007814:	fa01 f303 	lsl.w	r3, r1, r3
 8007818:	43db      	mvns	r3, r3
 800781a:	401a      	ands	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	fa93 f3a3 	rbit	r3, r3
 8007826:	61fb      	str	r3, [r7, #28]
  return result;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007832:	2320      	movs	r3, #32
 8007834:	e003      	b.n	800783e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	fab3 f383 	clz	r3, r3
 800783c:	b2db      	uxtb	r3, r3
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	431a      	orrs	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800784c:	bf00      	nop
 800784e:	372c      	adds	r7, #44	; 0x2c
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007858:	b480      	push	{r7}
 800785a:	b08b      	sub	sp, #44	; 0x2c
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	fa93 f3a3 	rbit	r3, r3
 8007872:	613b      	str	r3, [r7, #16]
  return result;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800787e:	2320      	movs	r3, #32
 8007880:	e003      	b.n	800788a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	fab3 f383 	clz	r3, r3
 8007888:	b2db      	uxtb	r3, r3
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	2103      	movs	r1, #3
 800788e:	fa01 f303 	lsl.w	r3, r1, r3
 8007892:	43db      	mvns	r3, r3
 8007894:	401a      	ands	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	fa93 f3a3 	rbit	r3, r3
 80078a0:	61fb      	str	r3, [r7, #28]
  return result;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80078ac:	2320      	movs	r3, #32
 80078ae:	e003      	b.n	80078b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	fab3 f383 	clz	r3, r3
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	fa01 f303 	lsl.w	r3, r1, r3
 80078c0:	431a      	orrs	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	60da      	str	r2, [r3, #12]
}
 80078c6:	bf00      	nop
 80078c8:	372c      	adds	r7, #44	; 0x2c
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b08b      	sub	sp, #44	; 0x2c
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1a      	ldr	r2, [r3, #32]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	fa93 f3a3 	rbit	r3, r3
 80078ec:	613b      	str	r3, [r7, #16]
  return result;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80078f8:	2320      	movs	r3, #32
 80078fa:	e003      	b.n	8007904 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	fab3 f383 	clz	r3, r3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	210f      	movs	r1, #15
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	43db      	mvns	r3, r3
 800790e:	401a      	ands	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	fa93 f3a3 	rbit	r3, r3
 800791a:	61fb      	str	r3, [r7, #28]
  return result;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007926:	2320      	movs	r3, #32
 8007928:	e003      	b.n	8007932 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	fab3 f383 	clz	r3, r3
 8007930:	b2db      	uxtb	r3, r3
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	431a      	orrs	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007940:	bf00      	nop
 8007942:	372c      	adds	r7, #44	; 0x2c
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800794c:	b480      	push	{r7}
 800794e:	b08b      	sub	sp, #44	; 0x2c
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	fa93 f3a3 	rbit	r3, r3
 8007968:	613b      	str	r3, [r7, #16]
  return result;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007974:	2320      	movs	r3, #32
 8007976:	e003      	b.n	8007980 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	fab3 f383 	clz	r3, r3
 800797e:	b2db      	uxtb	r3, r3
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	210f      	movs	r1, #15
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	43db      	mvns	r3, r3
 800798a:	401a      	ands	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	fa93 f3a3 	rbit	r3, r3
 8007998:	61fb      	str	r3, [r7, #28]
  return result;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80079a4:	2320      	movs	r3, #32
 80079a6:	e003      	b.n	80079b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	fab3 f383 	clz	r3, r3
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	fa01 f303 	lsl.w	r3, r1, r3
 80079b8:	431a      	orrs	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80079be:	bf00      	nop
 80079c0:	372c      	adds	r7, #44	; 0x2c
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	fa93 f3a3 	rbit	r3, r3
 80079e0:	60fb      	str	r3, [r7, #12]
  return result;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <LL_GPIO_Init+0x26>
    return 32U;
 80079ec:	2320      	movs	r3, #32
 80079ee:	e003      	b.n	80079f8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	fab3 f383 	clz	r3, r3
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80079fa:	e048      	b.n	8007a8e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	2101      	movs	r1, #1
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	fa01 f303 	lsl.w	r3, r1, r3
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d03a      	beq.n	8007a88 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d003      	beq.n	8007a22 <LL_GPIO_Init+0x58>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d10e      	bne.n	8007a40 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	461a      	mov	r2, r3
 8007a28:	69b9      	ldr	r1, [r7, #24]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fed7 	bl	80077de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff feb7 	bl	80077ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	461a      	mov	r2, r3
 8007a46:	69b9      	ldr	r1, [r7, #24]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff05 	bl	8007858 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d111      	bne.n	8007a7a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2bff      	cmp	r3, #255	; 0xff
 8007a5a:	d807      	bhi.n	8007a6c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	461a      	mov	r2, r3
 8007a62:	69b9      	ldr	r1, [r7, #24]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff34 	bl	80078d2 <LL_GPIO_SetAFPin_0_7>
 8007a6a:	e006      	b.n	8007a7a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	461a      	mov	r2, r3
 8007a72:	69b9      	ldr	r1, [r7, #24]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff ff69 	bl	800794c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	69b9      	ldr	r1, [r7, #24]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fe56 	bl	8007734 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	fa22 f303 	lsr.w	r3, r2, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1af      	bne.n	80079fc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ab6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007aba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007adc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007ae0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	43db      	mvns	r3, r3
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4013      	ands	r3, r2
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	1d3b      	adds	r3, r7, #4
 8007b14:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b09d      	sub	sp, #116	; 0x74
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	78db      	ldrb	r3, [r3, #3]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d81f      	bhi.n	8007bba <USB_ActivateEndpoint+0x72>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <USB_ActivateEndpoint+0x38>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007b91 	.word	0x08007b91
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bc3 	.word	0x08007bc3
 8007b8c:	08007b9f 	.word	0x08007b9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007b9c:	e012      	b.n	8007bc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ba2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007ba6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007baa:	e00b      	b.n	8007bc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007bb8:	e004      	b.n	8007bc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007bc0:	e000      	b.n	8007bc4 <USB_ActivateEndpoint+0x7c>
      break;
 8007bc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	b21b      	sxth	r3, r3
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfe:	b21a      	sxth	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b21b      	sxth	r3, r3
 8007c06:	4313      	orrs	r3, r2
 8007c08:	b21b      	sxth	r3, r3
 8007c0a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	7b1b      	ldrb	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 8178 	bne.w	8007f2a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 8084 	beq.w	8007d4c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	4413      	add	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	00da      	lsls	r2, r3, #3
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	88db      	ldrh	r3, [r3, #6]
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	827b      	strh	r3, [r7, #18]
 8007c86:	8a7b      	ldrh	r3, [r7, #18]
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01b      	beq.n	8007cc8 <USB_ActivateEndpoint+0x180>
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	823b      	strh	r3, [r7, #16]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	441a      	add	r2, r3
 8007cb2:	8a3b      	ldrh	r3, [r7, #16]
 8007cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	78db      	ldrb	r3, [r3, #3]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d020      	beq.n	8007d12 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce6:	81bb      	strh	r3, [r7, #12]
 8007ce8:	89bb      	ldrh	r3, [r7, #12]
 8007cea:	f083 0320 	eor.w	r3, r3, #32
 8007cee:	81bb      	strh	r3, [r7, #12]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	89bb      	ldrh	r3, [r7, #12]
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]
 8007d10:	e2d5      	b.n	80082be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d28:	81fb      	strh	r3, [r7, #14]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	441a      	add	r2, r3
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	8013      	strh	r3, [r2, #0]
 8007d4a:	e2b8      	b.n	80082be <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	4413      	add	r3, r2
 8007d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	00da      	lsls	r2, r3, #3
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	4413      	add	r3, r2
 8007d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	88db      	ldrh	r3, [r3, #6]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	4413      	add	r3, r2
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00da      	lsls	r2, r3, #3
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <USB_ActivateEndpoint+0x28a>
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	e039      	b.n	8007e46 <USB_ActivateEndpoint+0x2fe>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8007dd8:	d818      	bhi.n	8007e0c <USB_ActivateEndpoint+0x2c4>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <USB_ActivateEndpoint+0x2ac>
 8007dee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007df0:	3301      	adds	r3, #1
 8007df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	029b      	lsls	r3, r3, #10
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	e01c      	b.n	8007e46 <USB_ActivateEndpoint+0x2fe>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 031f 	and.w	r3, r3, #31
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <USB_ActivateEndpoint+0x2de>
 8007e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e22:	3b01      	subs	r3, #1
 8007e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	029b      	lsls	r3, r3, #10
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01b      	beq.n	8007e96 <USB_ActivateEndpoint+0x34e>
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e74:	843b      	strh	r3, [r7, #32]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	441a      	add	r2, r3
 8007e80:	8c3b      	ldrh	r3, [r7, #32]
 8007e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d124      	bne.n	8007ee8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb4:	83bb      	strh	r3, [r7, #28]
 8007eb6:	8bbb      	ldrh	r3, [r7, #28]
 8007eb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ebc:	83bb      	strh	r3, [r7, #28]
 8007ebe:	8bbb      	ldrh	r3, [r7, #28]
 8007ec0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ec4:	83bb      	strh	r3, [r7, #28]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	441a      	add	r2, r3
 8007ed0:	8bbb      	ldrh	r3, [r7, #28]
 8007ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	8013      	strh	r3, [r2, #0]
 8007ee6:	e1ea      	b.n	80082be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	83fb      	strh	r3, [r7, #30]
 8007f00:	8bfb      	ldrh	r3, [r7, #30]
 8007f02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f06:	83fb      	strh	r3, [r7, #30]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	8bfb      	ldrh	r3, [r7, #30]
 8007f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	8013      	strh	r3, [r2, #0]
 8007f28:	e1c9      	b.n	80082be <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	78db      	ldrb	r3, [r3, #3]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d11e      	bne.n	8007f70 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f48:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	441a      	add	r2, r3
 8007f56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	8013      	strh	r3, [r2, #0]
 8007f6e:	e01d      	b.n	8007fac <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fbc:	4413      	add	r3, r2
 8007fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	00da      	lsls	r2, r3, #3
 8007fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	891b      	ldrh	r3, [r3, #8]
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff0:	4413      	add	r3, r2
 8007ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	00da      	lsls	r2, r3, #3
 8007ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008002:	653b      	str	r3, [r7, #80]	; 0x50
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	895b      	ldrh	r3, [r3, #10]
 8008008:	085b      	lsrs	r3, r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008012:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 8093 	bne.w	8008144 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800802e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01b      	beq.n	8008072 <USB_ActivateEndpoint+0x52a>
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008050:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	441a      	add	r2, r3
 800805c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800805e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	b29b      	uxth	r3, r3
 8008070:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008080:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01b      	beq.n	80080c2 <USB_ActivateEndpoint+0x57a>
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	441a      	add	r2, r3
 80080ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80080ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080be:	b29b      	uxth	r3, r3
 80080c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80080da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80080e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	441a      	add	r2, r3
 80080f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008106:	b29b      	uxth	r3, r3
 8008108:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008120:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	441a      	add	r2, r3
 800812c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
 8008142:	e0bc      	b.n	80082be <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008154:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01d      	beq.n	800819c <USB_ActivateEndpoint+0x654>
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	441a      	add	r2, r3
 8008184:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800818c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008198:	b29b      	uxth	r3, r3
 800819a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80081ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01d      	beq.n	80081f4 <USB_ActivateEndpoint+0x6ac>
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80081e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	78db      	ldrb	r3, [r3, #3]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d024      	beq.n	8008246 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008212:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008216:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800821a:	f083 0320 	eor.w	r3, r3, #32
 800821e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	441a      	add	r2, r3
 800822c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800823c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008240:	b29b      	uxth	r3, r3
 8008242:	8013      	strh	r3, [r2, #0]
 8008244:	e01d      	b.n	8008282 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800826e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827e:	b29b      	uxth	r3, r3
 8008280:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008298:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	441a      	add	r2, r3
 80082a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80082aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80082be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3774      	adds	r7, #116	; 0x74
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b08d      	sub	sp, #52	; 0x34
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	7b1b      	ldrb	r3, [r3, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f040 808e 	bne.w	8008400 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d044      	beq.n	8008376 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	81bb      	strh	r3, [r7, #12]
 80082fa:	89bb      	ldrh	r3, [r7, #12]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01b      	beq.n	800833c <USB_DeactivateEndpoint+0x6c>
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	817b      	strh	r3, [r7, #10]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008338:	b29b      	uxth	r3, r3
 800833a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008352:	813b      	strh	r3, [r7, #8]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	893b      	ldrh	r3, [r7, #8]
 8008360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008370:	b29b      	uxth	r3, r3
 8008372:	8013      	strh	r3, [r2, #0]
 8008374:	e192      	b.n	800869c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	827b      	strh	r3, [r7, #18]
 8008384:	8a7b      	ldrh	r3, [r7, #18]
 8008386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01b      	beq.n	80083c6 <USB_DeactivateEndpoint+0xf6>
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a4:	823b      	strh	r3, [r7, #16]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	8a3b      	ldrh	r3, [r7, #16]
 80083b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083dc:	81fb      	strh	r3, [r7, #14]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	441a      	add	r2, r3
 80083e8:	89fb      	ldrh	r3, [r7, #14]
 80083ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	8013      	strh	r3, [r2, #0]
 80083fe:	e14d      	b.n	800869c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f040 80a5 	bne.w	8008554 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	843b      	strh	r3, [r7, #32]
 8008418:	8c3b      	ldrh	r3, [r7, #32]
 800841a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01b      	beq.n	800845a <USB_DeactivateEndpoint+0x18a>
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008438:	83fb      	strh	r3, [r7, #30]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	8bfb      	ldrh	r3, [r7, #30]
 8008446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008456:	b29b      	uxth	r3, r3
 8008458:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	83bb      	strh	r3, [r7, #28]
 8008468:	8bbb      	ldrh	r3, [r7, #28]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01b      	beq.n	80084aa <USB_DeactivateEndpoint+0x1da>
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008488:	837b      	strh	r3, [r7, #26]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	441a      	add	r2, r3
 8008494:	8b7b      	ldrh	r3, [r7, #26]
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c0:	833b      	strh	r3, [r7, #24]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	441a      	add	r2, r3
 80084cc:	8b3b      	ldrh	r3, [r7, #24]
 80084ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084de:	b29b      	uxth	r3, r3
 80084e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f8:	82fb      	strh	r3, [r7, #22]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	441a      	add	r2, r3
 8008504:	8afb      	ldrh	r3, [r7, #22]
 8008506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800850e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008516:	b29b      	uxth	r3, r3
 8008518:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008530:	82bb      	strh	r3, [r7, #20]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	8abb      	ldrh	r3, [r7, #20]
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]
 8008552:	e0a3      	b.n	800869c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008562:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01b      	beq.n	80085a4 <USB_DeactivateEndpoint+0x2d4>
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80085b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01b      	beq.n	80085f4 <USB_DeactivateEndpoint+0x324>
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	441a      	add	r2, r3
 80085de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	441a      	add	r2, r3
 8008616:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	b29b      	uxth	r3, r3
 800862a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008642:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800865c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008660:	b29b      	uxth	r3, r3
 8008662:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867a:	847b      	strh	r3, [r7, #34]	; 0x22
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	441a      	add	r2, r3
 8008686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800868c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008698:	b29b      	uxth	r3, r3
 800869a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3734      	adds	r7, #52	; 0x34
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b0c2      	sub	sp, #264	; 0x108
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b8:	6018      	str	r0, [r3, #0]
 80086ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	f040 86b7 	bne.w	8009444 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d908      	bls.n	8008704 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008702:	e007      	b.n	8008714 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	7b1b      	ldrb	r3, [r3, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d13a      	bne.n	800879a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6959      	ldr	r1, [r3, #20]
 8008730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	88da      	ldrh	r2, [r3, #6]
 800873c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008740:	b29b      	uxth	r3, r3
 8008742:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008746:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800874a:	6800      	ldr	r0, [r0, #0]
 800874c:	f001 fc99 	bl	800a082 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876a:	b29b      	uxth	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4413      	add	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	00da      	lsls	r2, r3, #3
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4413      	add	r3, r2
 8008786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	f000 be1f 	b.w	80093d8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800879a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	f040 8462 	bne.w	8009070 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80087ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6a1a      	ldr	r2, [r3, #32]
 80087b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	f240 83df 	bls.w	8008f88 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80087f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	441a      	add	r2, r3
 800880e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800881e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008822:	b29b      	uxth	r3, r3
 8008824:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a1a      	ldr	r2, [r3, #32]
 8008832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 81c7 	beq.w	8008bfa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800886c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	633b      	str	r3, [r7, #48]	; 0x30
 8008878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d177      	bne.n	8008978 <USB_EPStartXfer+0x2ce>
 8008888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	62bb      	str	r3, [r7, #40]	; 0x28
 8008894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	4413      	add	r3, r2
 80088aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	00da      	lsls	r2, r3, #3
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	4413      	add	r3, r2
 80088be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <USB_EPStartXfer+0x248>
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	e067      	b.n	80089c2 <USB_EPStartXfer+0x318>
 80088f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f6:	2b3e      	cmp	r3, #62	; 0x3e
 80088f8:	d81c      	bhi.n	8008934 <USB_EPStartXfer+0x28a>
 80088fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <USB_EPStartXfer+0x270>
 8008910:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008914:	3301      	adds	r3, #1
 8008916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29a      	uxth	r2, r3
 8008920:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008924:	b29b      	uxth	r3, r3
 8008926:	029b      	lsls	r3, r3, #10
 8008928:	b29b      	uxth	r3, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	b29a      	uxth	r2, r3
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	e046      	b.n	80089c2 <USB_EPStartXfer+0x318>
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008938:	095b      	lsrs	r3, r3, #5
 800893a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800893e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	2b00      	cmp	r3, #0
 8008948:	d104      	bne.n	8008954 <USB_EPStartXfer+0x2aa>
 800894a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800894e:	3b01      	subs	r3, #1
 8008950:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800895e:	b29b      	uxth	r3, r3
 8008960:	029b      	lsls	r3, r3, #10
 8008962:	b29b      	uxth	r3, r3
 8008964:	4313      	orrs	r3, r2
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008970:	b29a      	uxth	r2, r3
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	e024      	b.n	80089c2 <USB_EPStartXfer+0x318>
 8008978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d11c      	bne.n	80089c2 <USB_EPStartXfer+0x318>
 8008988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008996:	b29b      	uxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	4413      	add	r3, r2
 800899e:	633b      	str	r3, [r7, #48]	; 0x30
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	00da      	lsls	r2, r3, #3
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	4413      	add	r3, r2
 80089b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089bc:	b29a      	uxth	r2, r3
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	895b      	ldrh	r3, [r3, #10]
 80089ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6959      	ldr	r1, [r3, #20]
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80089ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80089f0:	6800      	ldr	r0, [r0, #0]
 80089f2:	f001 fb46 	bl	800a082 <USB_WritePMA>
            ep->xfer_buff += len;
 80089f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a06:	441a      	add	r2, r3
 8008a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6a1a      	ldr	r2, [r3, #32]
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d90f      	bls.n	8008a50 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6a1a      	ldr	r2, [r3, #32]
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a40:	1ad2      	subs	r2, r2, r3
 8008a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	621a      	str	r2, [r3, #32]
 8008a4e:	e00e      	b.n	8008a6e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d177      	bne.n	8008b6e <USB_EPStartXfer+0x4c4>
 8008a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	61bb      	str	r3, [r7, #24]
 8008aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	00da      	lsls	r2, r3, #3
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <USB_EPStartXfer+0x43e>
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	801a      	strh	r2, [r3, #0]
 8008ae6:	e06d      	b.n	8008bc4 <USB_EPStartXfer+0x51a>
 8008ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aec:	2b3e      	cmp	r3, #62	; 0x3e
 8008aee:	d81c      	bhi.n	8008b2a <USB_EPStartXfer+0x480>
 8008af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <USB_EPStartXfer+0x466>
 8008b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	029b      	lsls	r3, r3, #10
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e04c      	b.n	8008bc4 <USB_EPStartXfer+0x51a>
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d104      	bne.n	8008b4a <USB_EPStartXfer+0x4a0>
 8008b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b44:	3b01      	subs	r3, #1
 8008b46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e02a      	b.n	8008bc4 <USB_EPStartXfer+0x51a>
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d122      	bne.n	8008bc4 <USB_EPStartXfer+0x51a>
 8008b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	623b      	str	r3, [r7, #32]
 8008b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	623b      	str	r3, [r7, #32]
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	00da      	lsls	r2, r3, #3
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bb8:	61fb      	str	r3, [r7, #28]
 8008bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	891b      	ldrh	r3, [r3, #8]
 8008bd0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6959      	ldr	r1, [r3, #20]
 8008be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bf2:	6800      	ldr	r0, [r0, #0]
 8008bf4:	f001 fa45 	bl	800a082 <USB_WritePMA>
 8008bf8:	e3ee      	b.n	80093d8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d177      	bne.n	8008cfa <USB_EPStartXfer+0x650>
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	461a      	mov	r2, r3
 8008c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c2a:	4413      	add	r3, r2
 8008c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	00da      	lsls	r2, r3, #3
 8008c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3e:	4413      	add	r3, r2
 8008c40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c44:	647b      	str	r3, [r7, #68]	; 0x44
 8008c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c54:	801a      	strh	r2, [r3, #0]
 8008c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <USB_EPStartXfer+0x5ca>
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	e06d      	b.n	8008d50 <USB_EPStartXfer+0x6a6>
 8008c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c78:	2b3e      	cmp	r3, #62	; 0x3e
 8008c7a:	d81c      	bhi.n	8008cb6 <USB_EPStartXfer+0x60c>
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c80:	085b      	lsrs	r3, r3, #1
 8008c82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d004      	beq.n	8008c9c <USB_EPStartXfer+0x5f2>
 8008c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c96:	3301      	adds	r3, #1
 8008c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	029b      	lsls	r3, r3, #10
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	4313      	orrs	r3, r2
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	e04c      	b.n	8008d50 <USB_EPStartXfer+0x6a6>
 8008cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cba:	095b      	lsrs	r3, r3, #5
 8008cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc4:	f003 031f 	and.w	r3, r3, #31
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <USB_EPStartXfer+0x62c>
 8008ccc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	029b      	lsls	r3, r3, #10
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf6:	801a      	strh	r2, [r3, #0]
 8008cf8:	e02a      	b.n	8008d50 <USB_EPStartXfer+0x6a6>
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d122      	bne.n	8008d50 <USB_EPStartXfer+0x6a6>
 8008d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	653b      	str	r3, [r7, #80]	; 0x50
 8008d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	461a      	mov	r2, r3
 8008d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2a:	4413      	add	r3, r2
 8008d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	00da      	lsls	r2, r3, #3
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3e:	4413      	add	r3, r2
 8008d40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	891b      	ldrh	r3, [r3, #8]
 8008d5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6959      	ldr	r1, [r3, #20]
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	f001 f97f 	bl	800a082 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	695a      	ldr	r2, [r3, #20]
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d94:	441a      	add	r2, r3
 8008d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d90f      	bls.n	8008dde <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	621a      	str	r2, [r3, #32]
 8008ddc:	e00e      	b.n	8008dfc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	643b      	str	r3, [r7, #64]	; 0x40
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	785b      	ldrb	r3, [r3, #1]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d177      	bne.n	8008f08 <USB_EPStartXfer+0x85e>
 8008e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	4413      	add	r3, r2
 8008e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	00da      	lsls	r2, r3, #3
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e52:	637b      	str	r3, [r7, #52]	; 0x34
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <USB_EPStartXfer+0x7d8>
 8008e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e067      	b.n	8008f52 <USB_EPStartXfer+0x8a8>
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e86:	2b3e      	cmp	r3, #62	; 0x3e
 8008e88:	d81c      	bhi.n	8008ec4 <USB_EPStartXfer+0x81a>
 8008e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8e:	085b      	lsrs	r3, r3, #1
 8008e90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <USB_EPStartXfer+0x800>
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	029b      	lsls	r3, r3, #10
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	801a      	strh	r2, [r3, #0]
 8008ec2:	e046      	b.n	8008f52 <USB_EPStartXfer+0x8a8>
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <USB_EPStartXfer+0x83a>
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	029b      	lsls	r3, r3, #10
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	e024      	b.n	8008f52 <USB_EPStartXfer+0x8a8>
 8008f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d11c      	bne.n	8008f52 <USB_EPStartXfer+0x8a8>
 8008f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2c:	4413      	add	r3, r2
 8008f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	00da      	lsls	r2, r3, #3
 8008f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f40:	4413      	add	r3, r2
 8008f42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	895b      	ldrh	r3, [r3, #10]
 8008f5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6959      	ldr	r1, [r3, #20]
 8008f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f80:	6800      	ldr	r0, [r0, #0]
 8008f82:	f001 f87e 	bl	800a082 <USB_WritePMA>
 8008f86:	e227      	b.n	80093d8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	441a      	add	r2, r3
 8008fdc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800900e:	b29b      	uxth	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009014:	4413      	add	r3, r2
 8009016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	00da      	lsls	r2, r3, #3
 8009026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009028:	4413      	add	r3, r2
 800902a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800902e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009034:	b29a      	uxth	r2, r3
 8009036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009038:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800903a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	891b      	ldrh	r3, [r3, #8]
 8009046:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6959      	ldr	r1, [r3, #20]
 8009056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905a:	b29b      	uxth	r3, r3
 800905c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009060:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009064:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009068:	6800      	ldr	r0, [r0, #0]
 800906a:	f001 f80a 	bl	800a082 <USB_WritePMA>
 800906e:	e1b3      	b.n	80093d8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6a1a      	ldr	r2, [r3, #32]
 800907c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009080:	1ad2      	subs	r2, r2, r3
 8009082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800908e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80c6 	beq.w	8009242 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	673b      	str	r3, [r7, #112]	; 0x70
 80090c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d177      	bne.n	80091c2 <USB_EPStartXfer+0xb18>
 80090d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80090de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	461a      	mov	r2, r3
 80090f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090f2:	4413      	add	r3, r2
 80090f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80090f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	00da      	lsls	r2, r3, #3
 8009104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009106:	4413      	add	r3, r2
 8009108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800910c:	667b      	str	r3, [r7, #100]	; 0x64
 800910e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009118:	b29a      	uxth	r2, r3
 800911a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <USB_EPStartXfer+0xa92>
 8009126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	b29b      	uxth	r3, r3
 800912c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009134:	b29a      	uxth	r2, r3
 8009136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009138:	801a      	strh	r2, [r3, #0]
 800913a:	e067      	b.n	800920c <USB_EPStartXfer+0xb62>
 800913c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009140:	2b3e      	cmp	r3, #62	; 0x3e
 8009142:	d81c      	bhi.n	800917e <USB_EPStartXfer+0xad4>
 8009144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d004      	beq.n	8009164 <USB_EPStartXfer+0xaba>
 800915a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800915e:	3301      	adds	r3, #1
 8009160:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29a      	uxth	r2, r3
 800916a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800916e:	b29b      	uxth	r3, r3
 8009170:	029b      	lsls	r3, r3, #10
 8009172:	b29b      	uxth	r3, r3
 8009174:	4313      	orrs	r3, r2
 8009176:	b29a      	uxth	r2, r3
 8009178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e046      	b.n	800920c <USB_EPStartXfer+0xb62>
 800917e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <USB_EPStartXfer+0xaf4>
 8009194:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009198:	3b01      	subs	r3, #1
 800919a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800919e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	029b      	lsls	r3, r3, #10
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4313      	orrs	r3, r2
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	e024      	b.n	800920c <USB_EPStartXfer+0xb62>
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d11c      	bne.n	800920c <USB_EPStartXfer+0xb62>
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091e6:	4413      	add	r3, r2
 80091e8:	673b      	str	r3, [r7, #112]	; 0x70
 80091ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	00da      	lsls	r2, r3, #3
 80091f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091fa:	4413      	add	r3, r2
 80091fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009206:	b29a      	uxth	r2, r3
 8009208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800920c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	895b      	ldrh	r3, [r3, #10]
 8009218:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800921c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6959      	ldr	r1, [r3, #20]
 8009228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922c:	b29b      	uxth	r3, r3
 800922e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009232:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009236:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800923a:	6800      	ldr	r0, [r0, #0]
 800923c:	f000 ff21 	bl	800a082 <USB_WritePMA>
 8009240:	e0ca      	b.n	80093d8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d177      	bne.n	8009342 <USB_EPStartXfer+0xc98>
 8009252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800925e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800926c:	b29b      	uxth	r3, r3
 800926e:	461a      	mov	r2, r3
 8009270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009272:	4413      	add	r3, r2
 8009274:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	00da      	lsls	r2, r3, #3
 8009284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009286:	4413      	add	r3, r2
 8009288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800928c:	67bb      	str	r3, [r7, #120]	; 0x78
 800928e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009298:	b29a      	uxth	r2, r3
 800929a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800929c:	801a      	strh	r2, [r3, #0]
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <USB_EPStartXfer+0xc12>
 80092a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b8:	801a      	strh	r2, [r3, #0]
 80092ba:	e073      	b.n	80093a4 <USB_EPStartXfer+0xcfa>
 80092bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c0:	2b3e      	cmp	r3, #62	; 0x3e
 80092c2:	d81c      	bhi.n	80092fe <USB_EPStartXfer+0xc54>
 80092c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c8:	085b      	lsrs	r3, r3, #1
 80092ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80092ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <USB_EPStartXfer+0xc3a>
 80092da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80092de:	3301      	adds	r3, #1
 80092e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80092e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	029b      	lsls	r3, r3, #10
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4313      	orrs	r3, r2
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fa:	801a      	strh	r2, [r3, #0]
 80092fc:	e052      	b.n	80093a4 <USB_EPStartXfer+0xcfa>
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <USB_EPStartXfer+0xc74>
 8009314:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009318:	3b01      	subs	r3, #1
 800931a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800931e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	b29a      	uxth	r2, r3
 8009324:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009328:	b29b      	uxth	r3, r3
 800932a:	029b      	lsls	r3, r3, #10
 800932c:	b29b      	uxth	r3, r3
 800932e:	4313      	orrs	r3, r2
 8009330:	b29b      	uxth	r3, r3
 8009332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933a:	b29a      	uxth	r2, r3
 800933c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800933e:	801a      	strh	r2, [r3, #0]
 8009340:	e030      	b.n	80093a4 <USB_EPStartXfer+0xcfa>
 8009342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d128      	bne.n	80093a4 <USB_EPStartXfer+0xcfa>
 8009352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800936e:	b29b      	uxth	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009376:	4413      	add	r3, r2
 8009378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800937c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	00da      	lsls	r2, r3, #3
 800938a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800938e:	4413      	add	r3, r2
 8009390:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939c:	b29a      	uxth	r2, r3
 800939e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80093a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	891b      	ldrh	r3, [r3, #8]
 80093b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6959      	ldr	r1, [r3, #20]
 80093c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093d2:	6800      	ldr	r0, [r0, #0]
 80093d4:	f000 fe55 	bl	800a082 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093fe:	817b      	strh	r3, [r7, #10]
 8009400:	897b      	ldrh	r3, [r7, #10]
 8009402:	f083 0310 	eor.w	r3, r3, #16
 8009406:	817b      	strh	r3, [r7, #10]
 8009408:	897b      	ldrh	r3, [r7, #10]
 800940a:	f083 0320 	eor.w	r3, r3, #32
 800940e:	817b      	strh	r3, [r7, #10]
 8009410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	441a      	add	r2, r3
 800942a:	897b      	ldrh	r3, [r7, #10]
 800942c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943c:	b29b      	uxth	r3, r3
 800943e:	8013      	strh	r3, [r2, #0]
 8009440:	f000 bcdf 	b.w	8009e02 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	7b1b      	ldrb	r3, [r3, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 80bc 	bne.w	80095ce <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	429a      	cmp	r2, r3
 8009470:	d917      	bls.n	80094a2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699a      	ldr	r2, [r3, #24]
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	619a      	str	r2, [r3, #24]
 80094a0:	e00e      	b.n	80094c0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80094a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80094b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2200      	movs	r2, #0
 80094be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094dc:	b29b      	uxth	r3, r3
 80094de:	461a      	mov	r2, r3
 80094e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094e4:	4413      	add	r3, r2
 80094e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	00da      	lsls	r2, r3, #3
 80094f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094fc:	4413      	add	r3, r2
 80094fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29b      	uxth	r3, r3
 800950e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009512:	b29a      	uxth	r2, r3
 8009514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009518:	801a      	strh	r2, [r3, #0]
 800951a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10d      	bne.n	800953e <USB_EPStartXfer+0xe94>
 8009522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	b29b      	uxth	r3, r3
 800952a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800952e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009532:	b29a      	uxth	r2, r3
 8009534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	f000 bc28 	b.w	8009d8e <USB_EPStartXfer+0x16e4>
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009542:	2b3e      	cmp	r3, #62	; 0x3e
 8009544:	d81f      	bhi.n	8009586 <USB_EPStartXfer+0xedc>
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d004      	beq.n	8009566 <USB_EPStartXfer+0xebc>
 800955c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009560:	3301      	adds	r3, #1
 8009562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29a      	uxth	r2, r3
 800956e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009572:	b29b      	uxth	r3, r3
 8009574:	029b      	lsls	r3, r3, #10
 8009576:	b29b      	uxth	r3, r3
 8009578:	4313      	orrs	r3, r2
 800957a:	b29a      	uxth	r2, r3
 800957c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	f000 bc04 	b.w	8009d8e <USB_EPStartXfer+0x16e4>
 8009586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <USB_EPStartXfer+0xefc>
 800959c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095a0:	3b01      	subs	r3, #1
 80095a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	029b      	lsls	r3, r3, #10
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ca:	801a      	strh	r2, [r3, #0]
 80095cc:	e3df      	b.n	8009d8e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	78db      	ldrb	r3, [r3, #3]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	f040 8218 	bne.w	8009a10 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80095e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 809d 	bne.w	800972c <USB_EPStartXfer+0x1082>
 80095f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009604:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800960e:	b29b      	uxth	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009616:	4413      	add	r3, r2
 8009618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800961c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	00da      	lsls	r2, r3, #3
 800962a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800962e:	4413      	add	r3, r2
 8009630:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009644:	b29a      	uxth	r2, r3
 8009646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800964a:	801a      	strh	r2, [r3, #0]
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10c      	bne.n	8009676 <USB_EPStartXfer+0xfcc>
 800965c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800966c:	b29a      	uxth	r2, r3
 800966e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009672:	801a      	strh	r2, [r3, #0]
 8009674:	e08f      	b.n	8009796 <USB_EPStartXfer+0x10ec>
 8009676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b3e      	cmp	r3, #62	; 0x3e
 8009684:	d826      	bhi.n	80096d4 <USB_EPStartXfer+0x102a>
 8009686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d004      	beq.n	80096b6 <USB_EPStartXfer+0x100c>
 80096ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b0:	3301      	adds	r3, #1
 80096b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	029b      	lsls	r3, r3, #10
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e060      	b.n	8009796 <USB_EPStartXfer+0x10ec>
 80096d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	f003 031f 	and.w	r3, r3, #31
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d104      	bne.n	8009704 <USB_EPStartXfer+0x105a>
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	3b01      	subs	r3, #1
 8009700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b29a      	uxth	r2, r3
 800970c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009710:	b29b      	uxth	r3, r3
 8009712:	029b      	lsls	r3, r3, #10
 8009714:	b29b      	uxth	r3, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	b29b      	uxth	r3, r3
 800971a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800971e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	e034      	b.n	8009796 <USB_EPStartXfer+0x10ec>
 800972c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d12c      	bne.n	8009796 <USB_EPStartXfer+0x10ec>
 800973c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009758:	b29b      	uxth	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009760:	4413      	add	r3, r2
 8009762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	00da      	lsls	r2, r3, #3
 8009774:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009778:	4413      	add	r3, r2
 800977a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800977e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	b29a      	uxth	r2, r3
 8009790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009794:	801a      	strh	r2, [r3, #0]
 8009796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	785b      	ldrb	r3, [r3, #1]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f040 809d 	bne.w	80098f0 <USB_EPStartXfer+0x1246>
 80097b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097da:	4413      	add	r3, r2
 80097dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	00da      	lsls	r2, r3, #3
 80097ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097f2:	4413      	add	r3, r2
 80097f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29b      	uxth	r3, r3
 8009804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10c      	bne.n	800983a <USB_EPStartXfer+0x1190>
 8009820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009830:	b29a      	uxth	r2, r3
 8009832:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e088      	b.n	800994c <USB_EPStartXfer+0x12a2>
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b3e      	cmp	r3, #62	; 0x3e
 8009848:	d826      	bhi.n	8009898 <USB_EPStartXfer+0x11ee>
 800984a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	085b      	lsrs	r3, r3, #1
 8009858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800985c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <USB_EPStartXfer+0x11d0>
 8009870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009874:	3301      	adds	r3, #1
 8009876:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800987a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	b29a      	uxth	r2, r3
 8009882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009886:	b29b      	uxth	r3, r3
 8009888:	029b      	lsls	r3, r3, #10
 800988a:	b29b      	uxth	r3, r3
 800988c:	4313      	orrs	r3, r2
 800988e:	b29a      	uxth	r2, r3
 8009890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	e059      	b.n	800994c <USB_EPStartXfer+0x12a2>
 8009898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	095b      	lsrs	r3, r3, #5
 80098a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <USB_EPStartXfer+0x121e>
 80098be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c2:	3b01      	subs	r3, #1
 80098c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	029b      	lsls	r3, r3, #10
 80098d8:	b29b      	uxth	r3, r3
 80098da:	4313      	orrs	r3, r2
 80098dc:	b29b      	uxth	r3, r3
 80098de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e02d      	b.n	800994c <USB_EPStartXfer+0x12a2>
 80098f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d125      	bne.n	800994c <USB_EPStartXfer+0x12a2>
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990e:	b29b      	uxth	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009916:	4413      	add	r3, r2
 8009918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800991c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	00da      	lsls	r2, r3, #3
 800992a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800992e:	4413      	add	r3, r2
 8009930:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	b29a      	uxth	r2, r3
 8009946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800994a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800994c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 8218 	beq.w	8009d8e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800995e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800997e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d005      	beq.n	8009996 <USB_EPStartXfer+0x12ec>
 800998a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10d      	bne.n	80099b2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009996:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800999a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f040 81f5 	bne.w	8009d8e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80099a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 81ee 	bne.w	8009d8e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80099b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80099dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	441a      	add	r2, r3
 80099f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80099fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	8013      	strh	r3, [r2, #0]
 8009a0e:	e1be      	b.n	8009d8e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	78db      	ldrb	r3, [r3, #3]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	f040 81b4 	bne.w	8009d8a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699a      	ldr	r2, [r3, #24]
 8009a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d917      	bls.n	8009a6e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8009a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5e:	1ad2      	subs	r2, r2, r3
 8009a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	619a      	str	r2, [r3, #24]
 8009a6c:	e00e      	b.n	8009a8c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8009a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 8085 	bne.w	8009ba8 <USB_EPStartXfer+0x14fe>
 8009a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	461a      	mov	r2, r3
 8009abe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	00da      	lsls	r2, r3, #3
 8009ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ada:	4413      	add	r3, r2
 8009adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009af6:	801a      	strh	r2, [r3, #0]
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10c      	bne.n	8009b1a <USB_EPStartXfer+0x1470>
 8009b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e077      	b.n	8009c0a <USB_EPStartXfer+0x1560>
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8009b20:	d81e      	bhi.n	8009b60 <USB_EPStartXfer+0x14b6>
 8009b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b26:	085b      	lsrs	r3, r3, #1
 8009b28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d004      	beq.n	8009b42 <USB_EPStartXfer+0x1498>
 8009b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	029b      	lsls	r3, r3, #10
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b5c:	801a      	strh	r2, [r3, #0]
 8009b5e:	e054      	b.n	8009c0a <USB_EPStartXfer+0x1560>
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b64:	095b      	lsrs	r3, r3, #5
 8009b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b6e:	f003 031f 	and.w	r3, r3, #31
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <USB_EPStartXfer+0x14d6>
 8009b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	029b      	lsls	r3, r3, #10
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4313      	orrs	r3, r2
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ba4:	801a      	strh	r2, [r3, #0]
 8009ba6:	e030      	b.n	8009c0a <USB_EPStartXfer+0x1560>
 8009ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d128      	bne.n	8009c0a <USB_EPStartXfer+0x1560>
 8009bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bdc:	4413      	add	r3, r2
 8009bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	00da      	lsls	r2, r3, #3
 8009bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bfa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 8085 	bne.w	8009d34 <USB_EPStartXfer+0x168a>
 8009c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c4e:	4413      	add	r3, r2
 8009c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	00da      	lsls	r2, r3, #3
 8009c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c66:	4413      	add	r3, r2
 8009c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c82:	801a      	strh	r2, [r3, #0]
 8009c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10c      	bne.n	8009ca6 <USB_EPStartXfer+0x15fc>
 8009c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ca2:	801a      	strh	r2, [r3, #0]
 8009ca4:	e073      	b.n	8009d8e <USB_EPStartXfer+0x16e4>
 8009ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009caa:	2b3e      	cmp	r3, #62	; 0x3e
 8009cac:	d81e      	bhi.n	8009cec <USB_EPStartXfer+0x1642>
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d004      	beq.n	8009cce <USB_EPStartXfer+0x1624>
 8009cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cc8:	3301      	adds	r3, #1
 8009cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	029b      	lsls	r3, r3, #10
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ce8:	801a      	strh	r2, [r3, #0]
 8009cea:	e050      	b.n	8009d8e <USB_EPStartXfer+0x16e4>
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf0:	095b      	lsrs	r3, r3, #5
 8009cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <USB_EPStartXfer+0x1662>
 8009d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d06:	3b01      	subs	r3, #1
 8009d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	029b      	lsls	r3, r3, #10
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d30:	801a      	strh	r2, [r3, #0]
 8009d32:	e02c      	b.n	8009d8e <USB_EPStartXfer+0x16e4>
 8009d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d124      	bne.n	8009d8e <USB_EPStartXfer+0x16e4>
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	461a      	mov	r2, r3
 8009d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	00da      	lsls	r2, r3, #3
 8009d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d72:	4413      	add	r3, r2
 8009d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	e001      	b.n	8009d8e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e03a      	b.n	8009e04 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009db8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009dbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009dc0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009dc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009dc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009dcc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	441a      	add	r2, r3
 8009dea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d020      	beq.n	8009e62 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e36:	81bb      	strh	r3, [r7, #12]
 8009e38:	89bb      	ldrh	r3, [r7, #12]
 8009e3a:	f083 0310 	eor.w	r3, r3, #16
 8009e3e:	81bb      	strh	r3, [r7, #12]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	441a      	add	r2, r3
 8009e4a:	89bb      	ldrh	r3, [r7, #12]
 8009e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	8013      	strh	r3, [r2, #0]
 8009e60:	e01f      	b.n	8009ea2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	81fb      	strh	r3, [r7, #14]
 8009e7a:	89fb      	ldrh	r3, [r7, #14]
 8009e7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e80:	81fb      	strh	r3, [r7, #14]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	89fb      	ldrh	r3, [r7, #14]
 8009e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	7b1b      	ldrb	r3, [r3, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f040 809d 	bne.w	8009ffe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d04c      	beq.n	8009f66 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	823b      	strh	r3, [r7, #16]
 8009eda:	8a3b      	ldrh	r3, [r7, #16]
 8009edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d01b      	beq.n	8009f1c <USB_EPClearStall+0x6c>
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	81fb      	strh	r3, [r7, #14]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	441a      	add	r2, r3
 8009f06:	89fb      	ldrh	r3, [r7, #14]
 8009f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	78db      	ldrb	r3, [r3, #3]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d06c      	beq.n	8009ffe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f3a:	81bb      	strh	r3, [r7, #12]
 8009f3c:	89bb      	ldrh	r3, [r7, #12]
 8009f3e:	f083 0320 	eor.w	r3, r3, #32
 8009f42:	81bb      	strh	r3, [r7, #12]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	441a      	add	r2, r3
 8009f4e:	89bb      	ldrh	r3, [r7, #12]
 8009f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	8013      	strh	r3, [r2, #0]
 8009f64:	e04b      	b.n	8009ffe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	82fb      	strh	r3, [r7, #22]
 8009f74:	8afb      	ldrh	r3, [r7, #22]
 8009f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01b      	beq.n	8009fb6 <USB_EPClearStall+0x106>
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f94:	82bb      	strh	r3, [r7, #20]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	8abb      	ldrh	r3, [r7, #20]
 8009fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fcc:	827b      	strh	r3, [r7, #18]
 8009fce:	8a7b      	ldrh	r3, [r7, #18]
 8009fd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fd4:	827b      	strh	r3, [r7, #18]
 8009fd6:	8a7b      	ldrh	r3, [r7, #18]
 8009fd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fdc:	827b      	strh	r3, [r7, #18]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	441a      	add	r2, r3
 8009fe8:	8a7b      	ldrh	r3, [r7, #18]
 8009fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d103      	bne.n	800a026 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2280      	movs	r2, #128	; 0x80
 800a022:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a042:	b29b      	uxth	r3, r3
 800a044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a062:	b480      	push	{r7}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a070:	b29b      	uxth	r3, r3
 800a072:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a074:	68fb      	ldr	r3, [r7, #12]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a082:	b480      	push	{r7}
 800a084:	b08b      	sub	sp, #44	; 0x2c
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	4611      	mov	r1, r2
 800a08e:	461a      	mov	r2, r3
 800a090:	460b      	mov	r3, r1
 800a092:	80fb      	strh	r3, [r7, #6]
 800a094:	4613      	mov	r3, r2
 800a096:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a098:	88bb      	ldrh	r3, [r7, #4]
 800a09a:	3301      	adds	r3, #1
 800a09c:	085b      	lsrs	r3, r3, #1
 800a09e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0a8:	88fa      	ldrh	r2, [r7, #6]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0b8:	e01b      	b.n	800a0f2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	b21a      	sxth	r2, r3
 800a0ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b21b      	sxth	r3, r3
 800a0d2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	8a7a      	ldrh	r2, [r7, #18]
 800a0d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	3302      	adds	r3, #2
 800a0de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e0      	bne.n	800a0ba <USB_WritePMA+0x38>
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	372c      	adds	r7, #44	; 0x2c
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a106:	b480      	push	{r7}
 800a108:	b08b      	sub	sp, #44	; 0x2c
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	4611      	mov	r1, r2
 800a112:	461a      	mov	r2, r3
 800a114:	460b      	mov	r3, r1
 800a116:	80fb      	strh	r3, [r7, #6]
 800a118:	4613      	mov	r3, r2
 800a11a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a11c:	88bb      	ldrh	r3, [r7, #4]
 800a11e:	085b      	lsrs	r3, r3, #1
 800a120:	b29b      	uxth	r3, r3
 800a122:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a136:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
 800a13c:	e018      	b.n	800a170 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	3302      	adds	r3, #2
 800a14a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	3301      	adds	r3, #1
 800a158:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	0a1b      	lsrs	r3, r3, #8
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	3301      	adds	r3, #1
 800a168:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	3b01      	subs	r3, #1
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e3      	bne.n	800a13e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a176:	88bb      	ldrh	r3, [r7, #4]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	701a      	strb	r2, [r3, #0]
  }
}
 800a192:	bf00      	nop
 800a194:	372c      	adds	r7, #44	; 0x2c
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a1aa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a1ae:	f002 f8fb 	bl	800c3a8 <USBD_static_malloc>
 800a1b2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e066      	b.n	800a294 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7c1b      	ldrb	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d119      	bne.n	800a20a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1da:	2202      	movs	r2, #2
 800a1dc:	2181      	movs	r1, #129	; 0x81
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 ff89 	bl	800c0f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 ff7f 	bl	800c0f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2210      	movs	r2, #16
 800a204:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a208:	e016      	b.n	800a238 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	2202      	movs	r2, #2
 800a20e:	2181      	movs	r1, #129	; 0x81
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f001 ff70 	bl	800c0f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a21c:	2340      	movs	r3, #64	; 0x40
 800a21e:	2202      	movs	r2, #2
 800a220:	2101      	movs	r1, #1
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 ff67 	bl	800c0f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2210      	movs	r2, #16
 800a234:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a238:	2308      	movs	r3, #8
 800a23a:	2203      	movs	r2, #3
 800a23c:	2182      	movs	r1, #130	; 0x82
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 ff59 	bl	800c0f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a278:	2101      	movs	r1, #1
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f002 f82a 	bl	800c2d4 <USBD_LL_PrepareReceive>
 800a280:	e007      	b.n	800a292 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a288:	2340      	movs	r3, #64	; 0x40
 800a28a:	2101      	movs	r1, #1
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f002 f821 	bl	800c2d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a2a8:	2181      	movs	r1, #129	; 0x81
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 ff49 	bl	800c142 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f001 ff42 	bl	800c142 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2c6:	2182      	movs	r1, #130	; 0x82
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 ff3a 	bl	800c142 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00e      	beq.n	800a306 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 f863 	bl	800c3c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a320:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a334:	2303      	movs	r3, #3
 800a336:	e0af      	b.n	800a498 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a340:	2b00      	cmp	r3, #0
 800a342:	d03f      	beq.n	800a3c4 <USBD_CDC_Setup+0xb4>
 800a344:	2b20      	cmp	r3, #32
 800a346:	f040 809f 	bne.w	800a488 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	88db      	ldrh	r3, [r3, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d02e      	beq.n	800a3b0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b25b      	sxtb	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da16      	bge.n	800a38a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a368:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	88d2      	ldrh	r2, [r2, #6]
 800a36e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	88db      	ldrh	r3, [r3, #6]
 800a374:	2b07      	cmp	r3, #7
 800a376:	bf28      	it	cs
 800a378:	2307      	movcs	r3, #7
 800a37a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	89fa      	ldrh	r2, [r7, #14]
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f001 facf 	bl	800b926 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a388:	e085      	b.n	800a496 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	785a      	ldrb	r2, [r3, #1]
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	88db      	ldrh	r3, [r3, #6]
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	88db      	ldrh	r3, [r3, #6]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fae8 	bl	800b97e <USBD_CtlPrepareRx>
      break;
 800a3ae:	e072      	b.n	800a496 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	7850      	ldrb	r0, [r2, #1]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	4798      	blx	r3
      break;
 800a3c2:	e068      	b.n	800a496 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	785b      	ldrb	r3, [r3, #1]
 800a3c8:	2b0b      	cmp	r3, #11
 800a3ca:	d852      	bhi.n	800a472 <USBD_CDC_Setup+0x162>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <USBD_CDC_Setup+0xc4>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a405 	.word	0x0800a405
 800a3d8:	0800a481 	.word	0x0800a481
 800a3dc:	0800a473 	.word	0x0800a473
 800a3e0:	0800a473 	.word	0x0800a473
 800a3e4:	0800a473 	.word	0x0800a473
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a473 	.word	0x0800a473
 800a3f0:	0800a473 	.word	0x0800a473
 800a3f4:	0800a473 	.word	0x0800a473
 800a3f8:	0800a473 	.word	0x0800a473
 800a3fc:	0800a42f 	.word	0x0800a42f
 800a400:	0800a459 	.word	0x0800a459
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d107      	bne.n	800a420 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a410:	f107 030a 	add.w	r3, r7, #10
 800a414:	2202      	movs	r2, #2
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f001 fa84 	bl	800b926 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a41e:	e032      	b.n	800a486 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 fa0e 	bl	800b844 <USBD_CtlError>
            ret = USBD_FAIL;
 800a428:	2303      	movs	r3, #3
 800a42a:	75fb      	strb	r3, [r7, #23]
          break;
 800a42c:	e02b      	b.n	800a486 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b03      	cmp	r3, #3
 800a438:	d107      	bne.n	800a44a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a43a:	f107 030d 	add.w	r3, r7, #13
 800a43e:	2201      	movs	r2, #1
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 fa6f 	bl	800b926 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a448:	e01d      	b.n	800a486 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 f9f9 	bl	800b844 <USBD_CtlError>
            ret = USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	75fb      	strb	r3, [r7, #23]
          break;
 800a456:	e016      	b.n	800a486 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b03      	cmp	r3, #3
 800a462:	d00f      	beq.n	800a484 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 f9ec 	bl	800b844 <USBD_CtlError>
            ret = USBD_FAIL;
 800a46c:	2303      	movs	r3, #3
 800a46e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a470:	e008      	b.n	800a484 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 f9e5 	bl	800b844 <USBD_CtlError>
          ret = USBD_FAIL;
 800a47a:	2303      	movs	r3, #3
 800a47c:	75fb      	strb	r3, [r7, #23]
          break;
 800a47e:	e002      	b.n	800a486 <USBD_CDC_Setup+0x176>
          break;
 800a480:	bf00      	nop
 800a482:	e008      	b.n	800a496 <USBD_CDC_Setup+0x186>
          break;
 800a484:	bf00      	nop
      }
      break;
 800a486:	e006      	b.n	800a496 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 f9da 	bl	800b844 <USBD_CtlError>
      ret = USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	75fb      	strb	r3, [r7, #23]
      break;
 800a494:	bf00      	nop
  }

  return (uint8_t)ret;
 800a496:	7dfb      	ldrb	r3, [r7, #23]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e04f      	b.n	800a562 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a4ca:	78fa      	ldrb	r2, [r7, #3]
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	440b      	add	r3, r1
 800a4d8:	3318      	adds	r3, #24
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d029      	beq.n	800a534 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4e0:	78fa      	ldrb	r2, [r7, #3]
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	3318      	adds	r3, #24
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	78f9      	ldrb	r1, [r7, #3]
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	440b      	add	r3, r1
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	4403      	add	r3, r0
 800a500:	3320      	adds	r3, #32
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	fbb2 f1f3 	udiv	r1, r2, r3
 800a508:	fb01 f303 	mul.w	r3, r1, r3
 800a50c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d110      	bne.n	800a534 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	3318      	adds	r3, #24
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a526:	78f9      	ldrb	r1, [r7, #3]
 800a528:	2300      	movs	r3, #0
 800a52a:	2200      	movs	r2, #0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f001 feb0 	bl	800c292 <USBD_LL_Transmit>
 800a532:	e015      	b.n	800a560 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a55c:	78fa      	ldrb	r2, [r7, #3]
 800a55e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	460b      	mov	r3, r1
 800a574:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a57c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	e015      	b.n	800a5b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 fec0 	bl	800c316 <USBD_LL_GetRxDataSize>
 800a596:	4602      	mov	r2, r0
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e01b      	b.n	800a612 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d015      	beq.n	800a610 <USBD_CDC_EP0_RxReady+0x50>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5ea:	2bff      	cmp	r3, #255	; 0xff
 800a5ec:	d010      	beq.n	800a610 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a5fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a604:	b292      	uxth	r2, r2
 800a606:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	22ff      	movs	r2, #255	; 0xff
 800a60c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2243      	movs	r2, #67	; 0x43
 800a628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a62a:	4b03      	ldr	r3, [pc, #12]	; (800a638 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	200000dc 	.word	0x200000dc

0800a63c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2243      	movs	r2, #67	; 0x43
 800a648:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	20000098 	.word	0x20000098

0800a65c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2243      	movs	r2, #67	; 0x43
 800a668:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a66a:	4b03      	ldr	r3, [pc, #12]	; (800a678 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20000120 	.word	0x20000120

0800a67c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	220a      	movs	r2, #10
 800a688:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a68a:	4b03      	ldr	r3, [pc, #12]	; (800a698 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	20000054 	.word	0x20000054

0800a69c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e004      	b.n	800a6ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b087      	sub	sp, #28
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6d8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e008      	b.n	800a6f6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a702:	b480      	push	{r7}
 800a704:	b085      	sub	sp, #20
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a712:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e004      	b.n	800a728 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a742:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a744:	2301      	movs	r3, #1
 800a746:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a752:	2303      	movs	r3, #3
 800a754:	e01a      	b.n	800a78c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d114      	bne.n	800a78a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2201      	movs	r2, #1
 800a764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a77e:	2181      	movs	r1, #129	; 0x81
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 fd86 	bl	800c292 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e016      	b.n	800a7e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7c1b      	ldrb	r3, [r3, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fd84 	bl	800c2d4 <USBD_LL_PrepareReceive>
 800a7cc:	e007      	b.n	800a7de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fd7b 	bl	800c2d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e01f      	b.n	800a840 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	79fa      	ldrb	r2, [r7, #7]
 800a832:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f001 fbe3 	bl	800c000 <USBD_LL_Init>
 800a83a:	4603      	mov	r3, r0
 800a83c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e016      	b.n	800a88e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00b      	beq.n	800a88c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	f107 020e 	add.w	r2, r7, #14
 800a880:	4610      	mov	r0, r2
 800a882:	4798      	blx	r3
 800a884:	4602      	mov	r2, r0
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fc0e 	bl	800c0c0 <USBD_LL_Start>
 800a8a4:	4603      	mov	r3, r0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	4798      	blx	r3
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d007      	beq.n	800a922 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	78fa      	ldrb	r2, [r7, #3]
 800a91c:	4611      	mov	r1, r2
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	4798      	blx	r3
  }

  return USBD_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 ff46 	bl	800b7d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a952:	461a      	mov	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a960:	f003 031f 	and.w	r3, r3, #31
 800a964:	2b02      	cmp	r3, #2
 800a966:	d01a      	beq.n	800a99e <USBD_LL_SetupStage+0x72>
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d822      	bhi.n	800a9b2 <USBD_LL_SetupStage+0x86>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <USBD_LL_SetupStage+0x4a>
 800a970:	2b01      	cmp	r3, #1
 800a972:	d00a      	beq.n	800a98a <USBD_LL_SetupStage+0x5e>
 800a974:	e01d      	b.n	800a9b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f9ee 	bl	800ad60 <USBD_StdDevReq>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
      break;
 800a988:	e020      	b.n	800a9cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fa52 	bl	800ae3c <USBD_StdItfReq>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
      break;
 800a99c:	e016      	b.n	800a9cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa91 	bl	800aece <USBD_StdEPReq>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b0:	e00c      	b.n	800a9cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 fbdd 	bl	800c180 <USBD_LL_StallEP>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ca:	bf00      	nop
  }

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b086      	sub	sp, #24
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	607a      	str	r2, [r7, #4]
 800a9e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d138      	bne.n	800aa5c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d14a      	bne.n	800aa92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d913      	bls.n	800aa30 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	1ad2      	subs	r2, r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	bf28      	it	cs
 800aa22:	4613      	movcs	r3, r2
 800aa24:	461a      	mov	r2, r3
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 ffc5 	bl	800b9b8 <USBD_CtlContinueRx>
 800aa2e:	e030      	b.n	800aa92 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d10b      	bne.n	800aa54 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d005      	beq.n	800aa54 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 ffc0 	bl	800b9da <USBD_CtlSendStatus>
 800aa5a:	e01a      	b.n	800aa92 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d114      	bne.n	800aa92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00e      	beq.n	800aa92 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	7afa      	ldrb	r2, [r7, #11]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	4798      	blx	r3
 800aa84:	4603      	mov	r3, r0
 800aa86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	e000      	b.n	800aa94 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aaaa:	7afb      	ldrb	r3, [r7, #11]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d16b      	bne.n	800ab88 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3314      	adds	r3, #20
 800aab4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d156      	bne.n	800ab6e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	689a      	ldr	r2, [r3, #8]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d914      	bls.n	800aaf6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	1ad2      	subs	r2, r2, r3
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	461a      	mov	r2, r3
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 ff3a 	bl	800b95c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae8:	2300      	movs	r3, #0
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f001 fbf0 	bl	800c2d4 <USBD_LL_PrepareReceive>
 800aaf4:	e03b      	b.n	800ab6e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d11c      	bne.n	800ab3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d316      	bcc.n	800ab3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d20f      	bcs.n	800ab3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 ff1b 	bl	800b95c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab2e:	2300      	movs	r3, #0
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f001 fbcd 	bl	800c2d4 <USBD_LL_PrepareReceive>
 800ab3a:	e018      	b.n	800ab6e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d10b      	bne.n	800ab60 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d005      	beq.n	800ab60 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab60:	2180      	movs	r1, #128	; 0x80
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f001 fb0c 	bl	800c180 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 ff49 	bl	800ba00 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d122      	bne.n	800abbe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7ff fe98 	bl	800a8ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab86:	e01a      	b.n	800abbe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d114      	bne.n	800abbe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00e      	beq.n	800abbe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	7afa      	ldrb	r2, [r7, #11]
 800abaa:	4611      	mov	r1, r2
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	4798      	blx	r3
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	e000      	b.n	800abc0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e02f      	b.n	800ac5c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00f      	beq.n	800ac26 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d009      	beq.n	800ac26 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6852      	ldr	r2, [r2, #4]
 800ac1e:	b2d2      	uxtb	r2, r2
 800ac20:	4611      	mov	r1, r2
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f001 fa62 	bl	800c0f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2240      	movs	r2, #64	; 0x40
 800ac3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac42:	2340      	movs	r3, #64	; 0x40
 800ac44:	2200      	movs	r2, #0
 800ac46:	2180      	movs	r1, #128	; 0x80
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 fa54 	bl	800c0f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2240      	movs	r2, #64	; 0x40
 800ac58:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	78fa      	ldrb	r2, [r7, #3]
 800ac74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d106      	bne.n	800acd2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800acca:	b2da      	uxtb	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e012      	b.n	800ad1c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	d10b      	bne.n	800ad1a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d005      	beq.n	800ad1a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad42:	8a3b      	ldrh	r3, [r7, #16]
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	b21a      	sxth	r2, r3
 800ad48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	b21b      	sxth	r3, r3
 800ad50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad52:	89fb      	ldrh	r3, [r7, #14]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	371c      	adds	r7, #28
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d005      	beq.n	800ad86 <USBD_StdDevReq+0x26>
 800ad7a:	2b40      	cmp	r3, #64	; 0x40
 800ad7c:	d853      	bhi.n	800ae26 <USBD_StdDevReq+0xc6>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00b      	beq.n	800ad9a <USBD_StdDevReq+0x3a>
 800ad82:	2b20      	cmp	r3, #32
 800ad84:	d14f      	bne.n	800ae26 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	4798      	blx	r3
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]
      break;
 800ad98:	e04a      	b.n	800ae30 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	2b09      	cmp	r3, #9
 800ada0:	d83b      	bhi.n	800ae1a <USBD_StdDevReq+0xba>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <USBD_StdDevReq+0x48>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800adfd 	.word	0x0800adfd
 800adac:	0800ae11 	.word	0x0800ae11
 800adb0:	0800ae1b 	.word	0x0800ae1b
 800adb4:	0800ae07 	.word	0x0800ae07
 800adb8:	0800ae1b 	.word	0x0800ae1b
 800adbc:	0800addb 	.word	0x0800addb
 800adc0:	0800add1 	.word	0x0800add1
 800adc4:	0800ae1b 	.word	0x0800ae1b
 800adc8:	0800adf3 	.word	0x0800adf3
 800adcc:	0800ade5 	.word	0x0800ade5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f9de 	bl	800b194 <USBD_GetDescriptor>
          break;
 800add8:	e024      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fb6d 	bl	800b4bc <USBD_SetAddress>
          break;
 800ade2:	e01f      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fbac 	bl	800b544 <USBD_SetConfig>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
          break;
 800adf0:	e018      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fc4b 	bl	800b690 <USBD_GetConfig>
          break;
 800adfa:	e013      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fc7c 	bl	800b6fc <USBD_GetStatus>
          break;
 800ae04:	e00e      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fcab 	bl	800b764 <USBD_SetFeature>
          break;
 800ae0e:	e009      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fcba 	bl	800b78c <USBD_ClrFeature>
          break;
 800ae18:	e004      	b.n	800ae24 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fd11 	bl	800b844 <USBD_CtlError>
          break;
 800ae22:	bf00      	nop
      }
      break;
 800ae24:	e004      	b.n	800ae30 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fd0b 	bl	800b844 <USBD_CtlError>
      break;
 800ae2e:	bf00      	nop
  }

  return ret;
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop

0800ae3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae52:	2b40      	cmp	r3, #64	; 0x40
 800ae54:	d005      	beq.n	800ae62 <USBD_StdItfReq+0x26>
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	d82f      	bhi.n	800aeba <USBD_StdItfReq+0x7e>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <USBD_StdItfReq+0x26>
 800ae5e:	2b20      	cmp	r3, #32
 800ae60:	d12b      	bne.n	800aeba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d81d      	bhi.n	800aeac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	889b      	ldrh	r3, [r3, #4]
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d813      	bhi.n	800aea2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	4798      	blx	r3
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	88db      	ldrh	r3, [r3, #6]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d110      	bne.n	800aeb6 <USBD_StdItfReq+0x7a>
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10d      	bne.n	800aeb6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fd9d 	bl	800b9da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aea0:	e009      	b.n	800aeb6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fccd 	bl	800b844 <USBD_CtlError>
          break;
 800aeaa:	e004      	b.n	800aeb6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fcc8 	bl	800b844 <USBD_CtlError>
          break;
 800aeb4:	e000      	b.n	800aeb8 <USBD_StdItfReq+0x7c>
          break;
 800aeb6:	bf00      	nop
      }
      break;
 800aeb8:	e004      	b.n	800aec4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fcc1 	bl	800b844 <USBD_CtlError>
      break;
 800aec2:	bf00      	nop
  }

  return ret;
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	889b      	ldrh	r3, [r3, #4]
 800aee0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeea:	2b40      	cmp	r3, #64	; 0x40
 800aeec:	d007      	beq.n	800aefe <USBD_StdEPReq+0x30>
 800aeee:	2b40      	cmp	r3, #64	; 0x40
 800aef0:	f200 8145 	bhi.w	800b17e <USBD_StdEPReq+0x2b0>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00c      	beq.n	800af12 <USBD_StdEPReq+0x44>
 800aef8:	2b20      	cmp	r3, #32
 800aefa:	f040 8140 	bne.w	800b17e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]
      break;
 800af10:	e13a      	b.n	800b188 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	785b      	ldrb	r3, [r3, #1]
 800af16:	2b03      	cmp	r3, #3
 800af18:	d007      	beq.n	800af2a <USBD_StdEPReq+0x5c>
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	f300 8129 	bgt.w	800b172 <USBD_StdEPReq+0x2a4>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d07f      	beq.n	800b024 <USBD_StdEPReq+0x156>
 800af24:	2b01      	cmp	r3, #1
 800af26:	d03c      	beq.n	800afa2 <USBD_StdEPReq+0xd4>
 800af28:	e123      	b.n	800b172 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b02      	cmp	r3, #2
 800af34:	d002      	beq.n	800af3c <USBD_StdEPReq+0x6e>
 800af36:	2b03      	cmp	r3, #3
 800af38:	d016      	beq.n	800af68 <USBD_StdEPReq+0x9a>
 800af3a:	e02c      	b.n	800af96 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00d      	beq.n	800af5e <USBD_StdEPReq+0x90>
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b80      	cmp	r3, #128	; 0x80
 800af46:	d00a      	beq.n	800af5e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 f917 	bl	800c180 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af52:	2180      	movs	r1, #128	; 0x80
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 f913 	bl	800c180 <USBD_LL_StallEP>
 800af5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af5c:	e020      	b.n	800afa0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fc6f 	bl	800b844 <USBD_CtlError>
              break;
 800af66:	e01b      	b.n	800afa0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	885b      	ldrh	r3, [r3, #2]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10e      	bne.n	800af8e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <USBD_StdEPReq+0xc0>
 800af76:	7bbb      	ldrb	r3, [r7, #14]
 800af78:	2b80      	cmp	r3, #128	; 0x80
 800af7a:	d008      	beq.n	800af8e <USBD_StdEPReq+0xc0>
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	88db      	ldrh	r3, [r3, #6]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d104      	bne.n	800af8e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 f8f9 	bl	800c180 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fd23 	bl	800b9da <USBD_CtlSendStatus>

              break;
 800af94:	e004      	b.n	800afa0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fc53 	bl	800b844 <USBD_CtlError>
              break;
 800af9e:	bf00      	nop
          }
          break;
 800afa0:	e0ec      	b.n	800b17c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d002      	beq.n	800afb4 <USBD_StdEPReq+0xe6>
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d016      	beq.n	800afe0 <USBD_StdEPReq+0x112>
 800afb2:	e030      	b.n	800b016 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00d      	beq.n	800afd6 <USBD_StdEPReq+0x108>
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2b80      	cmp	r3, #128	; 0x80
 800afbe:	d00a      	beq.n	800afd6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 f8db 	bl	800c180 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afca:	2180      	movs	r1, #128	; 0x80
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 f8d7 	bl	800c180 <USBD_LL_StallEP>
 800afd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afd4:	e025      	b.n	800b022 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fc33 	bl	800b844 <USBD_CtlError>
              break;
 800afde:	e020      	b.n	800b022 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	885b      	ldrh	r3, [r3, #2]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11b      	bne.n	800b020 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f001 f8e1 	bl	800c1be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fcec 	bl	800b9da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b014:	e004      	b.n	800b020 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fc13 	bl	800b844 <USBD_CtlError>
              break;
 800b01e:	e000      	b.n	800b022 <USBD_StdEPReq+0x154>
              break;
 800b020:	bf00      	nop
          }
          break;
 800b022:	e0ab      	b.n	800b17c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d002      	beq.n	800b036 <USBD_StdEPReq+0x168>
 800b030:	2b03      	cmp	r3, #3
 800b032:	d032      	beq.n	800b09a <USBD_StdEPReq+0x1cc>
 800b034:	e097      	b.n	800b166 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d007      	beq.n	800b04c <USBD_StdEPReq+0x17e>
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b80      	cmp	r3, #128	; 0x80
 800b040:	d004      	beq.n	800b04c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fbfd 	bl	800b844 <USBD_CtlError>
                break;
 800b04a:	e091      	b.n	800b170 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b04c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b050:	2b00      	cmp	r3, #0
 800b052:	da0b      	bge.n	800b06c <USBD_StdEPReq+0x19e>
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b05a:	4613      	mov	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	3310      	adds	r3, #16
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	4413      	add	r3, r2
 800b068:	3304      	adds	r3, #4
 800b06a:	e00b      	b.n	800b084 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	4413      	add	r3, r2
 800b082:	3304      	adds	r3, #4
 800b084:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2200      	movs	r2, #0
 800b08a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2202      	movs	r2, #2
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fc47 	bl	800b926 <USBD_CtlSendData>
              break;
 800b098:	e06a      	b.n	800b170 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b09a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	da11      	bge.n	800b0c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	f003 020f 	and.w	r2, r3, #15
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	440b      	add	r3, r1
 800b0b4:	3324      	adds	r3, #36	; 0x24
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d117      	bne.n	800b0ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fbc0 	bl	800b844 <USBD_CtlError>
                  break;
 800b0c4:	e054      	b.n	800b170 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	f003 020f 	and.w	r2, r3, #15
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	440b      	add	r3, r1
 800b0d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d104      	bne.n	800b0ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fbad 	bl	800b844 <USBD_CtlError>
                  break;
 800b0ea:	e041      	b.n	800b170 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	da0b      	bge.n	800b10c <USBD_StdEPReq+0x23e>
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	3310      	adds	r3, #16
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	4413      	add	r3, r2
 800b108:	3304      	adds	r3, #4
 800b10a:	e00b      	b.n	800b124 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b112:	4613      	mov	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	4413      	add	r3, r2
 800b122:	3304      	adds	r3, #4
 800b124:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <USBD_StdEPReq+0x264>
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	2b80      	cmp	r3, #128	; 0x80
 800b130:	d103      	bne.n	800b13a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	e00e      	b.n	800b158 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f001 f85c 	bl	800c1fc <USBD_LL_IsStallEP>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2201      	movs	r2, #1
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e002      	b.n	800b158 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2202      	movs	r2, #2
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fbe1 	bl	800b926 <USBD_CtlSendData>
              break;
 800b164:	e004      	b.n	800b170 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fb6b 	bl	800b844 <USBD_CtlError>
              break;
 800b16e:	bf00      	nop
          }
          break;
 800b170:	e004      	b.n	800b17c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fb65 	bl	800b844 <USBD_CtlError>
          break;
 800b17a:	bf00      	nop
      }
      break;
 800b17c:	e004      	b.n	800b188 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fb5f 	bl	800b844 <USBD_CtlError>
      break;
 800b186:	bf00      	nop
  }

  return ret;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	885b      	ldrh	r3, [r3, #2]
 800b1ae:	0a1b      	lsrs	r3, r3, #8
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	2b0e      	cmp	r3, #14
 800b1b6:	f200 8152 	bhi.w	800b45e <USBD_GetDescriptor+0x2ca>
 800b1ba:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <USBD_GetDescriptor+0x2c>)
 800b1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c0:	0800b231 	.word	0x0800b231
 800b1c4:	0800b249 	.word	0x0800b249
 800b1c8:	0800b289 	.word	0x0800b289
 800b1cc:	0800b45f 	.word	0x0800b45f
 800b1d0:	0800b45f 	.word	0x0800b45f
 800b1d4:	0800b3ff 	.word	0x0800b3ff
 800b1d8:	0800b42b 	.word	0x0800b42b
 800b1dc:	0800b45f 	.word	0x0800b45f
 800b1e0:	0800b45f 	.word	0x0800b45f
 800b1e4:	0800b45f 	.word	0x0800b45f
 800b1e8:	0800b45f 	.word	0x0800b45f
 800b1ec:	0800b45f 	.word	0x0800b45f
 800b1f0:	0800b45f 	.word	0x0800b45f
 800b1f4:	0800b45f 	.word	0x0800b45f
 800b1f8:	0800b1fd 	.word	0x0800b1fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00b      	beq.n	800b220 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	7c12      	ldrb	r2, [r2, #16]
 800b214:	f107 0108 	add.w	r1, r7, #8
 800b218:	4610      	mov	r0, r2
 800b21a:	4798      	blx	r3
 800b21c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b21e:	e126      	b.n	800b46e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fb0e 	bl	800b844 <USBD_CtlError>
        err++;
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	3301      	adds	r3, #1
 800b22c:	72fb      	strb	r3, [r7, #11]
      break;
 800b22e:	e11e      	b.n	800b46e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	7c12      	ldrb	r2, [r2, #16]
 800b23c:	f107 0108 	add.w	r1, r7, #8
 800b240:	4610      	mov	r0, r2
 800b242:	4798      	blx	r3
 800b244:	60f8      	str	r0, [r7, #12]
      break;
 800b246:	e112      	b.n	800b46e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	7c1b      	ldrb	r3, [r3, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10d      	bne.n	800b26c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	f107 0208 	add.w	r2, r7, #8
 800b25c:	4610      	mov	r0, r2
 800b25e:	4798      	blx	r3
 800b260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3301      	adds	r3, #1
 800b266:	2202      	movs	r2, #2
 800b268:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b26a:	e100      	b.n	800b46e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b274:	f107 0208 	add.w	r2, r7, #8
 800b278:	4610      	mov	r0, r2
 800b27a:	4798      	blx	r3
 800b27c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3301      	adds	r3, #1
 800b282:	2202      	movs	r2, #2
 800b284:	701a      	strb	r2, [r3, #0]
      break;
 800b286:	e0f2      	b.n	800b46e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	885b      	ldrh	r3, [r3, #2]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b05      	cmp	r3, #5
 800b290:	f200 80ac 	bhi.w	800b3ec <USBD_GetDescriptor+0x258>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <USBD_GetDescriptor+0x108>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b2b5 	.word	0x0800b2b5
 800b2a0:	0800b2e9 	.word	0x0800b2e9
 800b2a4:	0800b31d 	.word	0x0800b31d
 800b2a8:	0800b351 	.word	0x0800b351
 800b2ac:	0800b385 	.word	0x0800b385
 800b2b0:	0800b3b9 	.word	0x0800b3b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7c12      	ldrb	r2, [r2, #16]
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2d6:	e091      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fab2 	bl	800b844 <USBD_CtlError>
            err++;
 800b2e0:	7afb      	ldrb	r3, [r7, #11]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2e6:	e089      	b.n	800b3fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7c12      	ldrb	r2, [r2, #16]
 800b300:	f107 0108 	add.w	r1, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b30a:	e077      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa98 	bl	800b844 <USBD_CtlError>
            err++;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3301      	adds	r3, #1
 800b318:	72fb      	strb	r3, [r7, #11]
          break;
 800b31a:	e06f      	b.n	800b3fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	7c12      	ldrb	r2, [r2, #16]
 800b334:	f107 0108 	add.w	r1, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33e:	e05d      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fa7e 	bl	800b844 <USBD_CtlError>
            err++;
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	3301      	adds	r3, #1
 800b34c:	72fb      	strb	r3, [r7, #11]
          break;
 800b34e:	e055      	b.n	800b3fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b372:	e043      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa64 	bl	800b844 <USBD_CtlError>
            err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
          break;
 800b382:	e03b      	b.n	800b3fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	f107 0108 	add.w	r1, r7, #8
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a6:	e029      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa4a 	bl	800b844 <USBD_CtlError>
            err++;
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b6:	e021      	b.n	800b3fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	7c12      	ldrb	r2, [r2, #16]
 800b3d0:	f107 0108 	add.w	r1, r7, #8
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
 800b3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3da:	e00f      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa30 	bl	800b844 <USBD_CtlError>
            err++;
 800b3e4:	7afb      	ldrb	r3, [r7, #11]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ea:	e007      	b.n	800b3fc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa28 	bl	800b844 <USBD_CtlError>
          err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b3fa:	bf00      	nop
      }
      break;
 800b3fc:	e037      	b.n	800b46e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	7c1b      	ldrb	r3, [r3, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d109      	bne.n	800b41a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40e:	f107 0208 	add.w	r2, r7, #8
 800b412:	4610      	mov	r0, r2
 800b414:	4798      	blx	r3
 800b416:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b418:	e029      	b.n	800b46e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa11 	bl	800b844 <USBD_CtlError>
        err++;
 800b422:	7afb      	ldrb	r3, [r7, #11]
 800b424:	3301      	adds	r3, #1
 800b426:	72fb      	strb	r3, [r7, #11]
      break;
 800b428:	e021      	b.n	800b46e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7c1b      	ldrb	r3, [r3, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10d      	bne.n	800b44e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43a:	f107 0208 	add.w	r2, r7, #8
 800b43e:	4610      	mov	r0, r2
 800b440:	4798      	blx	r3
 800b442:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3301      	adds	r3, #1
 800b448:	2207      	movs	r2, #7
 800b44a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b44c:	e00f      	b.n	800b46e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f9f7 	bl	800b844 <USBD_CtlError>
        err++;
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	3301      	adds	r3, #1
 800b45a:	72fb      	strb	r3, [r7, #11]
      break;
 800b45c:	e007      	b.n	800b46e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f9ef 	bl	800b844 <USBD_CtlError>
      err++;
 800b466:	7afb      	ldrb	r3, [r7, #11]
 800b468:	3301      	adds	r3, #1
 800b46a:	72fb      	strb	r3, [r7, #11]
      break;
 800b46c:	bf00      	nop
  }

  if (err != 0U)
 800b46e:	7afb      	ldrb	r3, [r7, #11]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d11e      	bne.n	800b4b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	88db      	ldrh	r3, [r3, #6]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d016      	beq.n	800b4aa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b47c:	893b      	ldrh	r3, [r7, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00e      	beq.n	800b4a0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	88da      	ldrh	r2, [r3, #6]
 800b486:	893b      	ldrh	r3, [r7, #8]
 800b488:	4293      	cmp	r3, r2
 800b48a:	bf28      	it	cs
 800b48c:	4613      	movcs	r3, r2
 800b48e:	b29b      	uxth	r3, r3
 800b490:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b492:	893b      	ldrh	r3, [r7, #8]
 800b494:	461a      	mov	r2, r3
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fa44 	bl	800b926 <USBD_CtlSendData>
 800b49e:	e009      	b.n	800b4b4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f9ce 	bl	800b844 <USBD_CtlError>
 800b4a8:	e004      	b.n	800b4b4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fa95 	bl	800b9da <USBD_CtlSendStatus>
 800b4b0:	e000      	b.n	800b4b4 <USBD_GetDescriptor+0x320>
    return;
 800b4b2:	bf00      	nop
  }
}
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop

0800b4bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	889b      	ldrh	r3, [r3, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d131      	bne.n	800b532 <USBD_SetAddress+0x76>
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	88db      	ldrh	r3, [r3, #6]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d12d      	bne.n	800b532 <USBD_SetAddress+0x76>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	885b      	ldrh	r3, [r3, #2]
 800b4da:	2b7f      	cmp	r3, #127	; 0x7f
 800b4dc:	d829      	bhi.n	800b532 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	885b      	ldrh	r3, [r3, #2]
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d104      	bne.n	800b500 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f9a3 	bl	800b844 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	e01d      	b.n	800b53c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	7bfa      	ldrb	r2, [r7, #15]
 800b504:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b508:	7bfb      	ldrb	r3, [r7, #15]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fea1 	bl	800c254 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa61 	bl	800b9da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d004      	beq.n	800b528 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2202      	movs	r2, #2
 800b522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b526:	e009      	b.n	800b53c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b530:	e004      	b.n	800b53c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f985 	bl	800b844 <USBD_CtlError>
  }
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	885b      	ldrh	r3, [r3, #2]
 800b556:	b2da      	uxtb	r2, r3
 800b558:	4b4c      	ldr	r3, [pc, #304]	; (800b68c <USBD_SetConfig+0x148>)
 800b55a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b55c:	4b4b      	ldr	r3, [pc, #300]	; (800b68c <USBD_SetConfig+0x148>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d905      	bls.n	800b570 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f96c 	bl	800b844 <USBD_CtlError>
    return USBD_FAIL;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e088      	b.n	800b682 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d002      	beq.n	800b582 <USBD_SetConfig+0x3e>
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d025      	beq.n	800b5cc <USBD_SetConfig+0x88>
 800b580:	e071      	b.n	800b666 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b582:	4b42      	ldr	r3, [pc, #264]	; (800b68c <USBD_SetConfig+0x148>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d01c      	beq.n	800b5c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b58a:	4b40      	ldr	r3, [pc, #256]	; (800b68c <USBD_SetConfig+0x148>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b594:	4b3d      	ldr	r3, [pc, #244]	; (800b68c <USBD_SetConfig+0x148>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff f992 	bl	800a8c4 <USBD_SetClassConfig>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f949 	bl	800b844 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5b2:	e065      	b.n	800b680 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa10 	bl	800b9da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2203      	movs	r2, #3
 800b5be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5c2:	e05d      	b.n	800b680 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fa08 	bl	800b9da <USBD_CtlSendStatus>
      break;
 800b5ca:	e059      	b.n	800b680 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5cc:	4b2f      	ldr	r3, [pc, #188]	; (800b68c <USBD_SetConfig+0x148>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d112      	bne.n	800b5fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b5dc:	4b2b      	ldr	r3, [pc, #172]	; (800b68c <USBD_SetConfig+0x148>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5e6:	4b29      	ldr	r3, [pc, #164]	; (800b68c <USBD_SetConfig+0x148>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff f985 	bl	800a8fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f9f1 	bl	800b9da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5f8:	e042      	b.n	800b680 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <USBD_SetConfig+0x148>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d02a      	beq.n	800b65e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff f973 	bl	800a8fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b616:	4b1d      	ldr	r3, [pc, #116]	; (800b68c <USBD_SetConfig+0x148>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b620:	4b1a      	ldr	r3, [pc, #104]	; (800b68c <USBD_SetConfig+0x148>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff f94c 	bl	800a8c4 <USBD_SetClassConfig>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00f      	beq.n	800b656 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f903 	bl	800b844 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	b2db      	uxtb	r3, r3
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff f958 	bl	800a8fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b654:	e014      	b.n	800b680 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f9bf 	bl	800b9da <USBD_CtlSendStatus>
      break;
 800b65c:	e010      	b.n	800b680 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f9bb 	bl	800b9da <USBD_CtlSendStatus>
      break;
 800b664:	e00c      	b.n	800b680 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f8eb 	bl	800b844 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b66e:	4b07      	ldr	r3, [pc, #28]	; (800b68c <USBD_SetConfig+0x148>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff f941 	bl	800a8fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b67a:	2303      	movs	r3, #3
 800b67c:	73fb      	strb	r3, [r7, #15]
      break;
 800b67e:	bf00      	nop
  }

  return ret;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	200004a4 	.word	0x200004a4

0800b690 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	88db      	ldrh	r3, [r3, #6]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d004      	beq.n	800b6ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f8cd 	bl	800b844 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6aa:	e023      	b.n	800b6f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	dc02      	bgt.n	800b6be <USBD_GetConfig+0x2e>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dc03      	bgt.n	800b6c4 <USBD_GetConfig+0x34>
 800b6bc:	e015      	b.n	800b6ea <USBD_GetConfig+0x5a>
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d00b      	beq.n	800b6da <USBD_GetConfig+0x4a>
 800b6c2:	e012      	b.n	800b6ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f927 	bl	800b926 <USBD_CtlSendData>
        break;
 800b6d8:	e00c      	b.n	800b6f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	2201      	movs	r2, #1
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f91f 	bl	800b926 <USBD_CtlSendData>
        break;
 800b6e8:	e004      	b.n	800b6f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f8a9 	bl	800b844 <USBD_CtlError>
        break;
 800b6f2:	bf00      	nop
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	2b02      	cmp	r3, #2
 800b712:	d81e      	bhi.n	800b752 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	88db      	ldrh	r3, [r3, #6]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d004      	beq.n	800b726 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f890 	bl	800b844 <USBD_CtlError>
        break;
 800b724:	e01a      	b.n	800b75c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f043 0202 	orr.w	r2, r3, #2
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	330c      	adds	r3, #12
 800b746:	2202      	movs	r2, #2
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f8eb 	bl	800b926 <USBD_CtlSendData>
      break;
 800b750:	e004      	b.n	800b75c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f875 	bl	800b844 <USBD_CtlError>
      break;
 800b75a:	bf00      	nop
  }
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d106      	bne.n	800b784 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f92b 	bl	800b9da <USBD_CtlSendStatus>
  }
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d80b      	bhi.n	800b7bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	885b      	ldrh	r3, [r3, #2]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d10c      	bne.n	800b7c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f910 	bl	800b9da <USBD_CtlSendStatus>
      }
      break;
 800b7ba:	e004      	b.n	800b7c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f840 	bl	800b844 <USBD_CtlError>
      break;
 800b7c4:	e000      	b.n	800b7c8 <USBD_ClrFeature+0x3c>
      break;
 800b7c6:	bf00      	nop
  }
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	781a      	ldrb	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	781a      	ldrb	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7ff fa92 	bl	800ad24 <SWAPBYTE>
 800b800:	4603      	mov	r3, r0
 800b802:	461a      	mov	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3301      	adds	r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff fa85 	bl	800ad24 <SWAPBYTE>
 800b81a:	4603      	mov	r3, r0
 800b81c:	461a      	mov	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fa78 	bl	800ad24 <SWAPBYTE>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	80da      	strh	r2, [r3, #6]
}
 800b83c:	bf00      	nop
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b84e:	2180      	movs	r1, #128	; 0x80
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fc95 	bl	800c180 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b856:	2100      	movs	r1, #0
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fc91 	bl	800c180 <USBD_LL_StallEP>
}
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b086      	sub	sp, #24
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d036      	beq.n	800b8ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b880:	6938      	ldr	r0, [r7, #16]
 800b882:	f000 f836 	bl	800b8f2 <USBD_GetLen>
 800b886:	4603      	mov	r3, r0
 800b888:	3301      	adds	r3, #1
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	7812      	ldrb	r2, [r2, #0]
 800b89e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8b6:	e013      	b.n	800b8e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4413      	add	r3, r2
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	7812      	ldrb	r2, [r2, #0]
 800b8c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	613b      	str	r3, [r7, #16]
    idx++;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e7      	bne.n	800b8b8 <USBD_GetString+0x52>
 800b8e8:	e000      	b.n	800b8ec <USBD_GetString+0x86>
    return;
 800b8ea:	bf00      	nop
  }
}
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b085      	sub	sp, #20
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b902:	e005      	b.n	800b910 <USBD_GetLen+0x1e>
  {
    len++;
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	3301      	adds	r3, #1
 800b908:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3301      	adds	r3, #1
 800b90e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1f5      	bne.n	800b904 <USBD_GetLen+0x12>
  }

  return len;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2202      	movs	r2, #2
 800b936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	2100      	movs	r1, #0
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 fca0 	bl	800c292 <USBD_LL_Transmit>

  return USBD_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	2100      	movs	r1, #0
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f000 fc8f 	bl	800c292 <USBD_LL_Transmit>

  return USBD_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	60f8      	str	r0, [r7, #12]
 800b986:	60b9      	str	r1, [r7, #8]
 800b988:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2203      	movs	r2, #3
 800b98e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 fc93 	bl	800c2d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 fc82 	bl	800c2d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fc4e 	bl	800c292 <USBD_LL_Transmit>

  return USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2205      	movs	r2, #5
 800ba0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba10:	2300      	movs	r3, #0
 800ba12:	2200      	movs	r2, #0
 800ba14:	2100      	movs	r1, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fc5c 	bl	800c2d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4912      	ldr	r1, [pc, #72]	; (800ba78 <MX_USB_Device_Init+0x50>)
 800ba30:	4812      	ldr	r0, [pc, #72]	; (800ba7c <MX_USB_Device_Init+0x54>)
 800ba32:	f7fe fed9 	bl	800a7e8 <USBD_Init>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ba3c:	f7f5 faeb 	bl	8001016 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ba40:	490f      	ldr	r1, [pc, #60]	; (800ba80 <MX_USB_Device_Init+0x58>)
 800ba42:	480e      	ldr	r0, [pc, #56]	; (800ba7c <MX_USB_Device_Init+0x54>)
 800ba44:	f7fe ff00 	bl	800a848 <USBD_RegisterClass>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ba4e:	f7f5 fae2 	bl	8001016 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ba52:	490c      	ldr	r1, [pc, #48]	; (800ba84 <MX_USB_Device_Init+0x5c>)
 800ba54:	4809      	ldr	r0, [pc, #36]	; (800ba7c <MX_USB_Device_Init+0x54>)
 800ba56:	f7fe fe21 	bl	800a69c <USBD_CDC_RegisterInterface>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ba60:	f7f5 fad9 	bl	8001016 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ba64:	4805      	ldr	r0, [pc, #20]	; (800ba7c <MX_USB_Device_Init+0x54>)
 800ba66:	f7fe ff16 	bl	800a896 <USBD_Start>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ba70:	f7f5 fad1 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ba74:	bf00      	nop
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20000178 	.word	0x20000178
 800ba7c:	200004a8 	.word	0x200004a8
 800ba80:	20000060 	.word	0x20000060
 800ba84:	20000164 	.word	0x20000164

0800ba88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4905      	ldr	r1, [pc, #20]	; (800baa4 <CDC_Init_FS+0x1c>)
 800ba90:	4805      	ldr	r0, [pc, #20]	; (800baa8 <CDC_Init_FS+0x20>)
 800ba92:	f7fe fe18 	bl	800a6c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba96:	4905      	ldr	r1, [pc, #20]	; (800baac <CDC_Init_FS+0x24>)
 800ba98:	4803      	ldr	r0, [pc, #12]	; (800baa8 <CDC_Init_FS+0x20>)
 800ba9a:	f7fe fe32 	bl	800a702 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	20000b78 	.word	0x20000b78
 800baa8:	200004a8 	.word	0x200004a8
 800baac:	20000778 	.word	0x20000778

0800bab0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bab0:	b480      	push	{r7}
 800bab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bab4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	6039      	str	r1, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	4613      	mov	r3, r2
 800bace:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	2b23      	cmp	r3, #35	; 0x23
 800bad4:	d84a      	bhi.n	800bb6c <CDC_Control_FS+0xac>
 800bad6:	a201      	add	r2, pc, #4	; (adr r2, 800badc <CDC_Control_FS+0x1c>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800bb6d 	.word	0x0800bb6d
 800bae0:	0800bb6d 	.word	0x0800bb6d
 800bae4:	0800bb6d 	.word	0x0800bb6d
 800bae8:	0800bb6d 	.word	0x0800bb6d
 800baec:	0800bb6d 	.word	0x0800bb6d
 800baf0:	0800bb6d 	.word	0x0800bb6d
 800baf4:	0800bb6d 	.word	0x0800bb6d
 800baf8:	0800bb6d 	.word	0x0800bb6d
 800bafc:	0800bb6d 	.word	0x0800bb6d
 800bb00:	0800bb6d 	.word	0x0800bb6d
 800bb04:	0800bb6d 	.word	0x0800bb6d
 800bb08:	0800bb6d 	.word	0x0800bb6d
 800bb0c:	0800bb6d 	.word	0x0800bb6d
 800bb10:	0800bb6d 	.word	0x0800bb6d
 800bb14:	0800bb6d 	.word	0x0800bb6d
 800bb18:	0800bb6d 	.word	0x0800bb6d
 800bb1c:	0800bb6d 	.word	0x0800bb6d
 800bb20:	0800bb6d 	.word	0x0800bb6d
 800bb24:	0800bb6d 	.word	0x0800bb6d
 800bb28:	0800bb6d 	.word	0x0800bb6d
 800bb2c:	0800bb6d 	.word	0x0800bb6d
 800bb30:	0800bb6d 	.word	0x0800bb6d
 800bb34:	0800bb6d 	.word	0x0800bb6d
 800bb38:	0800bb6d 	.word	0x0800bb6d
 800bb3c:	0800bb6d 	.word	0x0800bb6d
 800bb40:	0800bb6d 	.word	0x0800bb6d
 800bb44:	0800bb6d 	.word	0x0800bb6d
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb6d 	.word	0x0800bb6d
 800bb50:	0800bb6d 	.word	0x0800bb6d
 800bb54:	0800bb6d 	.word	0x0800bb6d
 800bb58:	0800bb6d 	.word	0x0800bb6d
 800bb5c:	0800bb6d 	.word	0x0800bb6d
 800bb60:	0800bb6d 	.word	0x0800bb6d
 800bb64:	0800bb6d 	.word	0x0800bb6d
 800bb68:	0800bb6d 	.word	0x0800bb6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb6c:	bf00      	nop
  }

  return (USBD_OK);
 800bb6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	4805      	ldr	r0, [pc, #20]	; (800bba0 <CDC_Receive_FS+0x24>)
 800bb8a:	f7fe fdba 	bl	800a702 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb8e:	4804      	ldr	r0, [pc, #16]	; (800bba0 <CDC_Receive_FS+0x24>)
 800bb90:	f7fe fe00 	bl	800a794 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bb94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	200004a8 	.word	0x200004a8

0800bba4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bbb4:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <CDC_Transmit_FS+0x48>)
 800bbb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e00b      	b.n	800bbe2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbca:	887b      	ldrh	r3, [r7, #2]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	4806      	ldr	r0, [pc, #24]	; (800bbec <CDC_Transmit_FS+0x48>)
 800bbd2:	f7fe fd78 	bl	800a6c6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bbd6:	4805      	ldr	r0, [pc, #20]	; (800bbec <CDC_Transmit_FS+0x48>)
 800bbd8:	f7fe fdac 	bl	800a734 <USBD_CDC_TransmitPacket>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	200004a8 	.word	0x200004a8

0800bbf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	371c      	adds	r7, #28
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
	...

0800bc14 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	6039      	str	r1, [r7, #0]
 800bc1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2212      	movs	r2, #18
 800bc24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bc26:	4b03      	ldr	r3, [pc, #12]	; (800bc34 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	20000198 	.word	0x20000198

0800bc38 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	6039      	str	r1, [r7, #0]
 800bc42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2204      	movs	r2, #4
 800bc48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc4a:	4b03      	ldr	r3, [pc, #12]	; (800bc58 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	200001ac 	.word	0x200001ac

0800bc5c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	6039      	str	r1, [r7, #0]
 800bc66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d105      	bne.n	800bc7a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	4907      	ldr	r1, [pc, #28]	; (800bc90 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bc72:	4808      	ldr	r0, [pc, #32]	; (800bc94 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bc74:	f7ff fdf7 	bl	800b866 <USBD_GetString>
 800bc78:	e004      	b.n	800bc84 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	4904      	ldr	r1, [pc, #16]	; (800bc90 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bc7e:	4805      	ldr	r0, [pc, #20]	; (800bc94 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bc80:	f7ff fdf1 	bl	800b866 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc84:	4b02      	ldr	r3, [pc, #8]	; (800bc90 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20000f78 	.word	0x20000f78
 800bc94:	0800cde8 	.word	0x0800cde8

0800bc98 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	4904      	ldr	r1, [pc, #16]	; (800bcb8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bca8:	4804      	ldr	r0, [pc, #16]	; (800bcbc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bcaa:	f7ff fddc 	bl	800b866 <USBD_GetString>
  return USBD_StrDesc;
 800bcae:	4b02      	ldr	r3, [pc, #8]	; (800bcb8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20000f78 	.word	0x20000f78
 800bcbc:	0800ce00 	.word	0x0800ce00

0800bcc0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	6039      	str	r1, [r7, #0]
 800bcca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	221a      	movs	r2, #26
 800bcd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcd2:	f000 f843 	bl	800bd5c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bcd6:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	200001b0 	.word	0x200001b0

0800bce4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d105      	bne.n	800bd02 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	4907      	ldr	r1, [pc, #28]	; (800bd18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bcfa:	4808      	ldr	r0, [pc, #32]	; (800bd1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bcfc:	f7ff fdb3 	bl	800b866 <USBD_GetString>
 800bd00:	e004      	b.n	800bd0c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	4904      	ldr	r1, [pc, #16]	; (800bd18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bd06:	4805      	ldr	r0, [pc, #20]	; (800bd1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bd08:	f7ff fdad 	bl	800b866 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd0c:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20000f78 	.word	0x20000f78
 800bd1c:	0800ce14 	.word	0x0800ce14

0800bd20 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d105      	bne.n	800bd3e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	4907      	ldr	r1, [pc, #28]	; (800bd54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bd36:	4808      	ldr	r0, [pc, #32]	; (800bd58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bd38:	f7ff fd95 	bl	800b866 <USBD_GetString>
 800bd3c:	e004      	b.n	800bd48 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	4904      	ldr	r1, [pc, #16]	; (800bd54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bd42:	4805      	ldr	r0, [pc, #20]	; (800bd58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bd44:	f7ff fd8f 	bl	800b866 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd48:	4b02      	ldr	r3, [pc, #8]	; (800bd54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	20000f78 	.word	0x20000f78
 800bd58:	0800ce20 	.word	0x0800ce20

0800bd5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd62:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <Get_SerialNum+0x44>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <Get_SerialNum+0x48>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd6e:	4b0e      	ldr	r3, [pc, #56]	; (800bda8 <Get_SerialNum+0x4c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4413      	add	r3, r2
 800bd7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d009      	beq.n	800bd96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd82:	2208      	movs	r2, #8
 800bd84:	4909      	ldr	r1, [pc, #36]	; (800bdac <Get_SerialNum+0x50>)
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 f814 	bl	800bdb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	4908      	ldr	r1, [pc, #32]	; (800bdb0 <Get_SerialNum+0x54>)
 800bd90:	68b8      	ldr	r0, [r7, #8]
 800bd92:	f000 f80f 	bl	800bdb4 <IntToUnicode>
  }
}
 800bd96:	bf00      	nop
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	1fff7590 	.word	0x1fff7590
 800bda4:	1fff7594 	.word	0x1fff7594
 800bda8:	1fff7598 	.word	0x1fff7598
 800bdac:	200001b2 	.word	0x200001b2
 800bdb0:	200001c2 	.word	0x200001c2

0800bdb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	75fb      	strb	r3, [r7, #23]
 800bdca:	e027      	b.n	800be1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	0f1b      	lsrs	r3, r3, #28
 800bdd0:	2b09      	cmp	r3, #9
 800bdd2:	d80b      	bhi.n	800bdec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	0f1b      	lsrs	r3, r3, #28
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	4619      	mov	r1, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	440b      	add	r3, r1
 800bde4:	3230      	adds	r2, #48	; 0x30
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	e00a      	b.n	800be02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	0f1b      	lsrs	r3, r3, #28
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3237      	adds	r2, #55	; 0x37
 800bdfe:	b2d2      	uxtb	r2, r2
 800be00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	011b      	lsls	r3, r3, #4
 800be06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	3301      	adds	r3, #1
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	4413      	add	r3, r2
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	3301      	adds	r3, #1
 800be1a:	75fb      	strb	r3, [r7, #23]
 800be1c:	7dfa      	ldrb	r2, [r7, #23]
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	429a      	cmp	r2, r3
 800be22:	d3d3      	bcc.n	800bdcc <IntToUnicode+0x18>
  }
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop
 800be28:	371c      	adds	r7, #28
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b094      	sub	sp, #80	; 0x50
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800be3c:	f107 030c 	add.w	r3, r7, #12
 800be40:	2244      	movs	r2, #68	; 0x44
 800be42:	2100      	movs	r1, #0
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fb2d 	bl	800c4a4 <memset>
  if(pcdHandle->Instance==USB)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a15      	ldr	r2, [pc, #84]	; (800bea4 <HAL_PCD_MspInit+0x70>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d123      	bne.n	800be9c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800be54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be58:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800be5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be5e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800be60:	f107 030c 	add.w	r3, r7, #12
 800be64:	4618      	mov	r0, r3
 800be66:	f7fa f96d 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800be70:	f7f5 f8d1 	bl	8001016 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800be74:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <HAL_PCD_MspInit+0x74>)
 800be76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be78:	4a0b      	ldr	r2, [pc, #44]	; (800bea8 <HAL_PCD_MspInit+0x74>)
 800be7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be7e:	6593      	str	r3, [r2, #88]	; 0x58
 800be80:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <HAL_PCD_MspInit+0x74>)
 800be82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be88:	60bb      	str	r3, [r7, #8]
 800be8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800be8c:	2200      	movs	r2, #0
 800be8e:	2100      	movs	r1, #0
 800be90:	2014      	movs	r0, #20
 800be92:	f7f7 f942 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800be96:	2014      	movs	r0, #20
 800be98:	f7f7 f959 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800be9c:	bf00      	nop
 800be9e:	3750      	adds	r7, #80	; 0x50
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	40005c00 	.word	0x40005c00
 800bea8:	40021000 	.word	0x40021000

0800beac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f7fe fd32 	bl	800a92c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	00db      	lsls	r3, r3, #3
 800beee:	440b      	add	r3, r1
 800bef0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	4619      	mov	r1, r3
 800befa:	f7fe fd6c 	bl	800a9d6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b082      	sub	sp, #8
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	440b      	add	r3, r1
 800bf26:	3324      	adds	r3, #36	; 0x24
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	78fb      	ldrb	r3, [r7, #3]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	f7fe fdb5 	bl	800aa9c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bf32:	bf00      	nop
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b082      	sub	sp, #8
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe fec9 	bl	800ace0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b084      	sub	sp, #16
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	795b      	ldrb	r3, [r3, #5]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d001      	beq.n	800bf6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf6a:	f7f5 f854 	bl	8001016 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf74:	7bfa      	ldrb	r2, [r7, #15]
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fe fe73 	bl	800ac64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe fe1f 	bl	800abc8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bf8a:	bf00      	nop
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
	...

0800bf94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fe fe6e 	bl	800ac84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	7a5b      	ldrb	r3, [r3, #9]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d005      	beq.n	800bfbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfb0:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <HAL_PCD_SuspendCallback+0x30>)
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	4a03      	ldr	r2, [pc, #12]	; (800bfc4 <HAL_PCD_SuspendCallback+0x30>)
 800bfb6:	f043 0306 	orr.w	r3, r3, #6
 800bfba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	e000ed00 	.word	0xe000ed00

0800bfc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	7a5b      	ldrb	r3, [r3, #9]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d007      	beq.n	800bfe8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfd8:	4b08      	ldr	r3, [pc, #32]	; (800bffc <HAL_PCD_ResumeCallback+0x34>)
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	4a07      	ldr	r2, [pc, #28]	; (800bffc <HAL_PCD_ResumeCallback+0x34>)
 800bfde:	f023 0306 	bic.w	r3, r3, #6
 800bfe2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bfe4:	f000 f9f8 	bl	800c3d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe fe5e 	bl	800acb0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	e000ed00 	.word	0xe000ed00

0800c000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c008:	4a2b      	ldr	r2, [pc, #172]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a29      	ldr	r2, [pc, #164]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c014:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c018:	4b27      	ldr	r3, [pc, #156]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c01a:	4a28      	ldr	r2, [pc, #160]	; (800c0bc <USBD_LL_Init+0xbc>)
 800c01c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c01e:	4b26      	ldr	r3, [pc, #152]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c020:	2208      	movs	r2, #8
 800c022:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c024:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c026:	2202      	movs	r2, #2
 800c028:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c02a:	4b23      	ldr	r3, [pc, #140]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c02c:	2202      	movs	r2, #2
 800c02e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c030:	4b21      	ldr	r3, [pc, #132]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c032:	2200      	movs	r2, #0
 800c034:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c036:	4b20      	ldr	r3, [pc, #128]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c038:	2200      	movs	r2, #0
 800c03a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c03c:	4b1e      	ldr	r3, [pc, #120]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c03e:	2200      	movs	r2, #0
 800c040:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c042:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c044:	2200      	movs	r2, #0
 800c046:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c048:	481b      	ldr	r0, [pc, #108]	; (800c0b8 <USBD_LL_Init+0xb8>)
 800c04a:	f7f7 fd73 	bl	8003b34 <HAL_PCD_Init>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c054:	f7f4 ffdf 	bl	8001016 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c05e:	2318      	movs	r3, #24
 800c060:	2200      	movs	r2, #0
 800c062:	2100      	movs	r1, #0
 800c064:	f7f9 fa2f 	bl	80054c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c06e:	2358      	movs	r3, #88	; 0x58
 800c070:	2200      	movs	r2, #0
 800c072:	2180      	movs	r1, #128	; 0x80
 800c074:	f7f9 fa27 	bl	80054c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c07e:	23c0      	movs	r3, #192	; 0xc0
 800c080:	2200      	movs	r2, #0
 800c082:	2181      	movs	r1, #129	; 0x81
 800c084:	f7f9 fa1f 	bl	80054c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c08e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c092:	2200      	movs	r2, #0
 800c094:	2101      	movs	r1, #1
 800c096:	f7f9 fa16 	bl	80054c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2182      	movs	r1, #130	; 0x82
 800c0a8:	f7f9 fa0d 	bl	80054c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20001178 	.word	0x20001178
 800c0bc:	40005c00 	.word	0x40005c00

0800c0c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f7 fdfa 	bl	8003cd0 <HAL_PCD_Start>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 f97e 	bl	800c3e4 <USBD_Get_USB_Status>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	4608      	mov	r0, r1
 800c100:	4611      	mov	r1, r2
 800c102:	461a      	mov	r2, r3
 800c104:	4603      	mov	r3, r0
 800c106:	70fb      	strb	r3, [r7, #3]
 800c108:	460b      	mov	r3, r1
 800c10a:	70bb      	strb	r3, [r7, #2]
 800c10c:	4613      	mov	r3, r2
 800c10e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c11e:	78bb      	ldrb	r3, [r7, #2]
 800c120:	883a      	ldrh	r2, [r7, #0]
 800c122:	78f9      	ldrb	r1, [r7, #3]
 800c124:	f7f7 ff41 	bl	8003faa <HAL_PCD_EP_Open>
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 f958 	bl	800c3e4 <USBD_Get_USB_Status>
 800c134:	4603      	mov	r3, r0
 800c136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c138:	7bbb      	ldrb	r3, [r7, #14]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b084      	sub	sp, #16
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c15c:	78fa      	ldrb	r2, [r7, #3]
 800c15e:	4611      	mov	r1, r2
 800c160:	4618      	mov	r0, r3
 800c162:	f7f7 ff81 	bl	8004068 <HAL_PCD_EP_Close>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 f939 	bl	800c3e4 <USBD_Get_USB_Status>
 800c172:	4603      	mov	r3, r0
 800c174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c176:	7bbb      	ldrb	r3, [r7, #14]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	4611      	mov	r1, r2
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f8 f82a 	bl	80041f8 <HAL_PCD_EP_SetStall>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 f91a 	bl	800c3e4 <USBD_Get_USB_Status>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1d8:	78fa      	ldrb	r2, [r7, #3]
 800c1da:	4611      	mov	r1, r2
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7f8 f85d 	bl	800429c <HAL_PCD_EP_ClrStall>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 f8fb 	bl	800c3e4 <USBD_Get_USB_Status>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c20e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c214:	2b00      	cmp	r3, #0
 800c216:	da0b      	bge.n	800c230 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c218:	78fb      	ldrb	r3, [r7, #3]
 800c21a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c21e:	68f9      	ldr	r1, [r7, #12]
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	3312      	adds	r3, #18
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	e00b      	b.n	800c248 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c236:	68f9      	ldr	r1, [r7, #12]
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	440b      	add	r3, r1
 800c242:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c246:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c26e:	78fa      	ldrb	r2, [r7, #3]
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f7 fe75 	bl	8003f62 <HAL_PCD_SetAddress>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f8b0 	bl	800c3e4 <USBD_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c288:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b086      	sub	sp, #24
 800c296:	af00      	add	r7, sp, #0
 800c298:	60f8      	str	r0, [r7, #12]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2b0:	7af9      	ldrb	r1, [r7, #11]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	f7f7 ff68 	bl	800418a <HAL_PCD_EP_Transmit>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 f88f 	bl	800c3e4 <USBD_Get_USB_Status>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	607a      	str	r2, [r7, #4]
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2f2:	7af9      	ldrb	r1, [r7, #11]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	f7f7 fefe 	bl	80040f8 <HAL_PCD_EP_Receive>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c300:	7dfb      	ldrb	r3, [r7, #23]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f86e 	bl	800c3e4 <USBD_Get_USB_Status>
 800c308:	4603      	mov	r3, r0
 800c30a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c30c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	460b      	mov	r3, r1
 800c320:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c328:	78fa      	ldrb	r2, [r7, #3]
 800c32a:	4611      	mov	r1, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7f7 ff14 	bl	800415a <HAL_PCD_EP_GetRxCount>
 800c332:	4603      	mov	r3, r0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <HAL_PCDEx_LPM_Callback+0x18>
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d013      	beq.n	800c37a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c352:	e023      	b.n	800c39c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7a5b      	ldrb	r3, [r3, #9]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d007      	beq.n	800c36c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c35c:	f000 f83c 	bl	800c3d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c360:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	4a0f      	ldr	r2, [pc, #60]	; (800c3a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c366:	f023 0306 	bic.w	r3, r3, #6
 800c36a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fc9c 	bl	800acb0 <USBD_LL_Resume>
    break;
 800c378:	e010      	b.n	800c39c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe fc7f 	bl	800ac84 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7a5b      	ldrb	r3, [r3, #9]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c38e:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	4a04      	ldr	r2, [pc, #16]	; (800c3a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800c394:	f043 0306 	orr.w	r3, r3, #6
 800c398:	6113      	str	r3, [r2, #16]
    break;
 800c39a:	bf00      	nop
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	e000ed00 	.word	0xe000ed00

0800c3a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3b0:	4b03      	ldr	r3, [pc, #12]	; (800c3c0 <USBD_static_malloc+0x18>)
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	20001454 	.word	0x20001454

0800c3c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]

}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c3dc:	f7f4 fdcc 	bl	8000f78 <SystemClock_Config>
}
 800c3e0:	bf00      	nop
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3f2:	79fb      	ldrb	r3, [r7, #7]
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d817      	bhi.n	800c428 <USBD_Get_USB_Status+0x44>
 800c3f8:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <USBD_Get_USB_Status+0x1c>)
 800c3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fe:	bf00      	nop
 800c400:	0800c411 	.word	0x0800c411
 800c404:	0800c417 	.word	0x0800c417
 800c408:	0800c41d 	.word	0x0800c41d
 800c40c:	0800c423 	.word	0x0800c423
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
    break;
 800c414:	e00b      	b.n	800c42e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c416:	2303      	movs	r3, #3
 800c418:	73fb      	strb	r3, [r7, #15]
    break;
 800c41a:	e008      	b.n	800c42e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c41c:	2301      	movs	r3, #1
 800c41e:	73fb      	strb	r3, [r7, #15]
    break;
 800c420:	e005      	b.n	800c42e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c422:	2303      	movs	r3, #3
 800c424:	73fb      	strb	r3, [r7, #15]
    break;
 800c426:	e002      	b.n	800c42e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c428:	2303      	movs	r3, #3
 800c42a:	73fb      	strb	r3, [r7, #15]
    break;
 800c42c:	bf00      	nop
  }
  return usb_status;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <sniprintf>:
 800c43c:	b40c      	push	{r2, r3}
 800c43e:	b530      	push	{r4, r5, lr}
 800c440:	4b17      	ldr	r3, [pc, #92]	; (800c4a0 <sniprintf+0x64>)
 800c442:	1e0c      	subs	r4, r1, #0
 800c444:	681d      	ldr	r5, [r3, #0]
 800c446:	b09d      	sub	sp, #116	; 0x74
 800c448:	da08      	bge.n	800c45c <sniprintf+0x20>
 800c44a:	238b      	movs	r3, #139	; 0x8b
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	f04f 30ff 	mov.w	r0, #4294967295
 800c452:	b01d      	add	sp, #116	; 0x74
 800c454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c458:	b002      	add	sp, #8
 800c45a:	4770      	bx	lr
 800c45c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c460:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c464:	bf14      	ite	ne
 800c466:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c46a:	4623      	moveq	r3, r4
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	9307      	str	r3, [sp, #28]
 800c470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c474:	9002      	str	r0, [sp, #8]
 800c476:	9006      	str	r0, [sp, #24]
 800c478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c47c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c47e:	ab21      	add	r3, sp, #132	; 0x84
 800c480:	a902      	add	r1, sp, #8
 800c482:	4628      	mov	r0, r5
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	f000 f993 	bl	800c7b0 <_svfiprintf_r>
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	bfbc      	itt	lt
 800c48e:	238b      	movlt	r3, #139	; 0x8b
 800c490:	602b      	strlt	r3, [r5, #0]
 800c492:	2c00      	cmp	r4, #0
 800c494:	d0dd      	beq.n	800c452 <sniprintf+0x16>
 800c496:	9b02      	ldr	r3, [sp, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	e7d9      	b.n	800c452 <sniprintf+0x16>
 800c49e:	bf00      	nop
 800c4a0:	20000218 	.word	0x20000218

0800c4a4 <memset>:
 800c4a4:	4402      	add	r2, r0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d100      	bne.n	800c4ae <memset+0xa>
 800c4ac:	4770      	bx	lr
 800c4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b2:	e7f9      	b.n	800c4a8 <memset+0x4>

0800c4b4 <__errno>:
 800c4b4:	4b01      	ldr	r3, [pc, #4]	; (800c4bc <__errno+0x8>)
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20000218 	.word	0x20000218

0800c4c0 <__libc_init_array>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	4d0d      	ldr	r5, [pc, #52]	; (800c4f8 <__libc_init_array+0x38>)
 800c4c4:	4c0d      	ldr	r4, [pc, #52]	; (800c4fc <__libc_init_array+0x3c>)
 800c4c6:	1b64      	subs	r4, r4, r5
 800c4c8:	10a4      	asrs	r4, r4, #2
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	42a6      	cmp	r6, r4
 800c4ce:	d109      	bne.n	800c4e4 <__libc_init_array+0x24>
 800c4d0:	4d0b      	ldr	r5, [pc, #44]	; (800c500 <__libc_init_array+0x40>)
 800c4d2:	4c0c      	ldr	r4, [pc, #48]	; (800c504 <__libc_init_array+0x44>)
 800c4d4:	f000 fc6a 	bl	800cdac <_init>
 800c4d8:	1b64      	subs	r4, r4, r5
 800c4da:	10a4      	asrs	r4, r4, #2
 800c4dc:	2600      	movs	r6, #0
 800c4de:	42a6      	cmp	r6, r4
 800c4e0:	d105      	bne.n	800c4ee <__libc_init_array+0x2e>
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e8:	4798      	blx	r3
 800c4ea:	3601      	adds	r6, #1
 800c4ec:	e7ee      	b.n	800c4cc <__libc_init_array+0xc>
 800c4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f2:	4798      	blx	r3
 800c4f4:	3601      	adds	r6, #1
 800c4f6:	e7f2      	b.n	800c4de <__libc_init_array+0x1e>
 800c4f8:	0800ceac 	.word	0x0800ceac
 800c4fc:	0800ceac 	.word	0x0800ceac
 800c500:	0800ceac 	.word	0x0800ceac
 800c504:	0800ceb0 	.word	0x0800ceb0

0800c508 <__retarget_lock_acquire_recursive>:
 800c508:	4770      	bx	lr

0800c50a <__retarget_lock_release_recursive>:
 800c50a:	4770      	bx	lr

0800c50c <_free_r>:
 800c50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c50e:	2900      	cmp	r1, #0
 800c510:	d044      	beq.n	800c59c <_free_r+0x90>
 800c512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c516:	9001      	str	r0, [sp, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f1a1 0404 	sub.w	r4, r1, #4
 800c51e:	bfb8      	it	lt
 800c520:	18e4      	addlt	r4, r4, r3
 800c522:	f000 f8df 	bl	800c6e4 <__malloc_lock>
 800c526:	4a1e      	ldr	r2, [pc, #120]	; (800c5a0 <_free_r+0x94>)
 800c528:	9801      	ldr	r0, [sp, #4]
 800c52a:	6813      	ldr	r3, [r2, #0]
 800c52c:	b933      	cbnz	r3, 800c53c <_free_r+0x30>
 800c52e:	6063      	str	r3, [r4, #4]
 800c530:	6014      	str	r4, [r2, #0]
 800c532:	b003      	add	sp, #12
 800c534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c538:	f000 b8da 	b.w	800c6f0 <__malloc_unlock>
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	d908      	bls.n	800c552 <_free_r+0x46>
 800c540:	6825      	ldr	r5, [r4, #0]
 800c542:	1961      	adds	r1, r4, r5
 800c544:	428b      	cmp	r3, r1
 800c546:	bf01      	itttt	eq
 800c548:	6819      	ldreq	r1, [r3, #0]
 800c54a:	685b      	ldreq	r3, [r3, #4]
 800c54c:	1949      	addeq	r1, r1, r5
 800c54e:	6021      	streq	r1, [r4, #0]
 800c550:	e7ed      	b.n	800c52e <_free_r+0x22>
 800c552:	461a      	mov	r2, r3
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	b10b      	cbz	r3, 800c55c <_free_r+0x50>
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d9fa      	bls.n	800c552 <_free_r+0x46>
 800c55c:	6811      	ldr	r1, [r2, #0]
 800c55e:	1855      	adds	r5, r2, r1
 800c560:	42a5      	cmp	r5, r4
 800c562:	d10b      	bne.n	800c57c <_free_r+0x70>
 800c564:	6824      	ldr	r4, [r4, #0]
 800c566:	4421      	add	r1, r4
 800c568:	1854      	adds	r4, r2, r1
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	6011      	str	r1, [r2, #0]
 800c56e:	d1e0      	bne.n	800c532 <_free_r+0x26>
 800c570:	681c      	ldr	r4, [r3, #0]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	6053      	str	r3, [r2, #4]
 800c576:	440c      	add	r4, r1
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	e7da      	b.n	800c532 <_free_r+0x26>
 800c57c:	d902      	bls.n	800c584 <_free_r+0x78>
 800c57e:	230c      	movs	r3, #12
 800c580:	6003      	str	r3, [r0, #0]
 800c582:	e7d6      	b.n	800c532 <_free_r+0x26>
 800c584:	6825      	ldr	r5, [r4, #0]
 800c586:	1961      	adds	r1, r4, r5
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf04      	itt	eq
 800c58c:	6819      	ldreq	r1, [r3, #0]
 800c58e:	685b      	ldreq	r3, [r3, #4]
 800c590:	6063      	str	r3, [r4, #4]
 800c592:	bf04      	itt	eq
 800c594:	1949      	addeq	r1, r1, r5
 800c596:	6021      	streq	r1, [r4, #0]
 800c598:	6054      	str	r4, [r2, #4]
 800c59a:	e7ca      	b.n	800c532 <_free_r+0x26>
 800c59c:	b003      	add	sp, #12
 800c59e:	bd30      	pop	{r4, r5, pc}
 800c5a0:	200017b4 	.word	0x200017b4

0800c5a4 <sbrk_aligned>:
 800c5a4:	b570      	push	{r4, r5, r6, lr}
 800c5a6:	4e0e      	ldr	r6, [pc, #56]	; (800c5e0 <sbrk_aligned+0x3c>)
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	6831      	ldr	r1, [r6, #0]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	b911      	cbnz	r1, 800c5b6 <sbrk_aligned+0x12>
 800c5b0:	f000 fba6 	bl	800cd00 <_sbrk_r>
 800c5b4:	6030      	str	r0, [r6, #0]
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f000 fba1 	bl	800cd00 <_sbrk_r>
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	d00a      	beq.n	800c5d8 <sbrk_aligned+0x34>
 800c5c2:	1cc4      	adds	r4, r0, #3
 800c5c4:	f024 0403 	bic.w	r4, r4, #3
 800c5c8:	42a0      	cmp	r0, r4
 800c5ca:	d007      	beq.n	800c5dc <sbrk_aligned+0x38>
 800c5cc:	1a21      	subs	r1, r4, r0
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f000 fb96 	bl	800cd00 <_sbrk_r>
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d101      	bne.n	800c5dc <sbrk_aligned+0x38>
 800c5d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c5dc:	4620      	mov	r0, r4
 800c5de:	bd70      	pop	{r4, r5, r6, pc}
 800c5e0:	200017b8 	.word	0x200017b8

0800c5e4 <_malloc_r>:
 800c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	1ccd      	adds	r5, r1, #3
 800c5ea:	f025 0503 	bic.w	r5, r5, #3
 800c5ee:	3508      	adds	r5, #8
 800c5f0:	2d0c      	cmp	r5, #12
 800c5f2:	bf38      	it	cc
 800c5f4:	250c      	movcc	r5, #12
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	db01      	blt.n	800c600 <_malloc_r+0x1c>
 800c5fc:	42a9      	cmp	r1, r5
 800c5fe:	d905      	bls.n	800c60c <_malloc_r+0x28>
 800c600:	230c      	movs	r3, #12
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	2600      	movs	r6, #0
 800c606:	4630      	mov	r0, r6
 800c608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c60c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6e0 <_malloc_r+0xfc>
 800c610:	f000 f868 	bl	800c6e4 <__malloc_lock>
 800c614:	f8d8 3000 	ldr.w	r3, [r8]
 800c618:	461c      	mov	r4, r3
 800c61a:	bb5c      	cbnz	r4, 800c674 <_malloc_r+0x90>
 800c61c:	4629      	mov	r1, r5
 800c61e:	4638      	mov	r0, r7
 800c620:	f7ff ffc0 	bl	800c5a4 <sbrk_aligned>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	4604      	mov	r4, r0
 800c628:	d155      	bne.n	800c6d6 <_malloc_r+0xf2>
 800c62a:	f8d8 4000 	ldr.w	r4, [r8]
 800c62e:	4626      	mov	r6, r4
 800c630:	2e00      	cmp	r6, #0
 800c632:	d145      	bne.n	800c6c0 <_malloc_r+0xdc>
 800c634:	2c00      	cmp	r4, #0
 800c636:	d048      	beq.n	800c6ca <_malloc_r+0xe6>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	4631      	mov	r1, r6
 800c63c:	4638      	mov	r0, r7
 800c63e:	eb04 0903 	add.w	r9, r4, r3
 800c642:	f000 fb5d 	bl	800cd00 <_sbrk_r>
 800c646:	4581      	cmp	r9, r0
 800c648:	d13f      	bne.n	800c6ca <_malloc_r+0xe6>
 800c64a:	6821      	ldr	r1, [r4, #0]
 800c64c:	1a6d      	subs	r5, r5, r1
 800c64e:	4629      	mov	r1, r5
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff ffa7 	bl	800c5a4 <sbrk_aligned>
 800c656:	3001      	adds	r0, #1
 800c658:	d037      	beq.n	800c6ca <_malloc_r+0xe6>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	442b      	add	r3, r5
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	f8d8 3000 	ldr.w	r3, [r8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d038      	beq.n	800c6da <_malloc_r+0xf6>
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	42a2      	cmp	r2, r4
 800c66c:	d12b      	bne.n	800c6c6 <_malloc_r+0xe2>
 800c66e:	2200      	movs	r2, #0
 800c670:	605a      	str	r2, [r3, #4]
 800c672:	e00f      	b.n	800c694 <_malloc_r+0xb0>
 800c674:	6822      	ldr	r2, [r4, #0]
 800c676:	1b52      	subs	r2, r2, r5
 800c678:	d41f      	bmi.n	800c6ba <_malloc_r+0xd6>
 800c67a:	2a0b      	cmp	r2, #11
 800c67c:	d917      	bls.n	800c6ae <_malloc_r+0xca>
 800c67e:	1961      	adds	r1, r4, r5
 800c680:	42a3      	cmp	r3, r4
 800c682:	6025      	str	r5, [r4, #0]
 800c684:	bf18      	it	ne
 800c686:	6059      	strne	r1, [r3, #4]
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	bf08      	it	eq
 800c68c:	f8c8 1000 	streq.w	r1, [r8]
 800c690:	5162      	str	r2, [r4, r5]
 800c692:	604b      	str	r3, [r1, #4]
 800c694:	4638      	mov	r0, r7
 800c696:	f104 060b 	add.w	r6, r4, #11
 800c69a:	f000 f829 	bl	800c6f0 <__malloc_unlock>
 800c69e:	f026 0607 	bic.w	r6, r6, #7
 800c6a2:	1d23      	adds	r3, r4, #4
 800c6a4:	1af2      	subs	r2, r6, r3
 800c6a6:	d0ae      	beq.n	800c606 <_malloc_r+0x22>
 800c6a8:	1b9b      	subs	r3, r3, r6
 800c6aa:	50a3      	str	r3, [r4, r2]
 800c6ac:	e7ab      	b.n	800c606 <_malloc_r+0x22>
 800c6ae:	42a3      	cmp	r3, r4
 800c6b0:	6862      	ldr	r2, [r4, #4]
 800c6b2:	d1dd      	bne.n	800c670 <_malloc_r+0x8c>
 800c6b4:	f8c8 2000 	str.w	r2, [r8]
 800c6b8:	e7ec      	b.n	800c694 <_malloc_r+0xb0>
 800c6ba:	4623      	mov	r3, r4
 800c6bc:	6864      	ldr	r4, [r4, #4]
 800c6be:	e7ac      	b.n	800c61a <_malloc_r+0x36>
 800c6c0:	4634      	mov	r4, r6
 800c6c2:	6876      	ldr	r6, [r6, #4]
 800c6c4:	e7b4      	b.n	800c630 <_malloc_r+0x4c>
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	e7cc      	b.n	800c664 <_malloc_r+0x80>
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	603b      	str	r3, [r7, #0]
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	f000 f80e 	bl	800c6f0 <__malloc_unlock>
 800c6d4:	e797      	b.n	800c606 <_malloc_r+0x22>
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	e7dc      	b.n	800c694 <_malloc_r+0xb0>
 800c6da:	605b      	str	r3, [r3, #4]
 800c6dc:	deff      	udf	#255	; 0xff
 800c6de:	bf00      	nop
 800c6e0:	200017b4 	.word	0x200017b4

0800c6e4 <__malloc_lock>:
 800c6e4:	4801      	ldr	r0, [pc, #4]	; (800c6ec <__malloc_lock+0x8>)
 800c6e6:	f7ff bf0f 	b.w	800c508 <__retarget_lock_acquire_recursive>
 800c6ea:	bf00      	nop
 800c6ec:	200017b0 	.word	0x200017b0

0800c6f0 <__malloc_unlock>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__malloc_unlock+0x8>)
 800c6f2:	f7ff bf0a 	b.w	800c50a <__retarget_lock_release_recursive>
 800c6f6:	bf00      	nop
 800c6f8:	200017b0 	.word	0x200017b0

0800c6fc <__ssputs_r>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	688e      	ldr	r6, [r1, #8]
 800c702:	461f      	mov	r7, r3
 800c704:	42be      	cmp	r6, r7
 800c706:	680b      	ldr	r3, [r1, #0]
 800c708:	4682      	mov	sl, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	4690      	mov	r8, r2
 800c70e:	d82c      	bhi.n	800c76a <__ssputs_r+0x6e>
 800c710:	898a      	ldrh	r2, [r1, #12]
 800c712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c716:	d026      	beq.n	800c766 <__ssputs_r+0x6a>
 800c718:	6965      	ldr	r5, [r4, #20]
 800c71a:	6909      	ldr	r1, [r1, #16]
 800c71c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c720:	eba3 0901 	sub.w	r9, r3, r1
 800c724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c728:	1c7b      	adds	r3, r7, #1
 800c72a:	444b      	add	r3, r9
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	429d      	cmp	r5, r3
 800c730:	bf38      	it	cc
 800c732:	461d      	movcc	r5, r3
 800c734:	0553      	lsls	r3, r2, #21
 800c736:	d527      	bpl.n	800c788 <__ssputs_r+0x8c>
 800c738:	4629      	mov	r1, r5
 800c73a:	f7ff ff53 	bl	800c5e4 <_malloc_r>
 800c73e:	4606      	mov	r6, r0
 800c740:	b360      	cbz	r0, 800c79c <__ssputs_r+0xa0>
 800c742:	6921      	ldr	r1, [r4, #16]
 800c744:	464a      	mov	r2, r9
 800c746:	f000 faeb 	bl	800cd20 <memcpy>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	6126      	str	r6, [r4, #16]
 800c758:	6165      	str	r5, [r4, #20]
 800c75a:	444e      	add	r6, r9
 800c75c:	eba5 0509 	sub.w	r5, r5, r9
 800c760:	6026      	str	r6, [r4, #0]
 800c762:	60a5      	str	r5, [r4, #8]
 800c764:	463e      	mov	r6, r7
 800c766:	42be      	cmp	r6, r7
 800c768:	d900      	bls.n	800c76c <__ssputs_r+0x70>
 800c76a:	463e      	mov	r6, r7
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	4632      	mov	r2, r6
 800c770:	4641      	mov	r1, r8
 800c772:	f000 faab 	bl	800cccc <memmove>
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	1b9b      	subs	r3, r3, r6
 800c77a:	60a3      	str	r3, [r4, #8]
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	4433      	add	r3, r6
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	2000      	movs	r0, #0
 800c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c788:	462a      	mov	r2, r5
 800c78a:	f000 fad7 	bl	800cd3c <_realloc_r>
 800c78e:	4606      	mov	r6, r0
 800c790:	2800      	cmp	r0, #0
 800c792:	d1e0      	bne.n	800c756 <__ssputs_r+0x5a>
 800c794:	6921      	ldr	r1, [r4, #16]
 800c796:	4650      	mov	r0, sl
 800c798:	f7ff feb8 	bl	800c50c <_free_r>
 800c79c:	230c      	movs	r3, #12
 800c79e:	f8ca 3000 	str.w	r3, [sl]
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ae:	e7e9      	b.n	800c784 <__ssputs_r+0x88>

0800c7b0 <_svfiprintf_r>:
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	4698      	mov	r8, r3
 800c7b6:	898b      	ldrh	r3, [r1, #12]
 800c7b8:	061b      	lsls	r3, r3, #24
 800c7ba:	b09d      	sub	sp, #116	; 0x74
 800c7bc:	4607      	mov	r7, r0
 800c7be:	460d      	mov	r5, r1
 800c7c0:	4614      	mov	r4, r2
 800c7c2:	d50e      	bpl.n	800c7e2 <_svfiprintf_r+0x32>
 800c7c4:	690b      	ldr	r3, [r1, #16]
 800c7c6:	b963      	cbnz	r3, 800c7e2 <_svfiprintf_r+0x32>
 800c7c8:	2140      	movs	r1, #64	; 0x40
 800c7ca:	f7ff ff0b 	bl	800c5e4 <_malloc_r>
 800c7ce:	6028      	str	r0, [r5, #0]
 800c7d0:	6128      	str	r0, [r5, #16]
 800c7d2:	b920      	cbnz	r0, 800c7de <_svfiprintf_r+0x2e>
 800c7d4:	230c      	movs	r3, #12
 800c7d6:	603b      	str	r3, [r7, #0]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7dc:	e0d0      	b.n	800c980 <_svfiprintf_r+0x1d0>
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	616b      	str	r3, [r5, #20]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e6:	2320      	movs	r3, #32
 800c7e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f0:	2330      	movs	r3, #48	; 0x30
 800c7f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c998 <_svfiprintf_r+0x1e8>
 800c7f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7fa:	f04f 0901 	mov.w	r9, #1
 800c7fe:	4623      	mov	r3, r4
 800c800:	469a      	mov	sl, r3
 800c802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c806:	b10a      	cbz	r2, 800c80c <_svfiprintf_r+0x5c>
 800c808:	2a25      	cmp	r2, #37	; 0x25
 800c80a:	d1f9      	bne.n	800c800 <_svfiprintf_r+0x50>
 800c80c:	ebba 0b04 	subs.w	fp, sl, r4
 800c810:	d00b      	beq.n	800c82a <_svfiprintf_r+0x7a>
 800c812:	465b      	mov	r3, fp
 800c814:	4622      	mov	r2, r4
 800c816:	4629      	mov	r1, r5
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff ff6f 	bl	800c6fc <__ssputs_r>
 800c81e:	3001      	adds	r0, #1
 800c820:	f000 80a9 	beq.w	800c976 <_svfiprintf_r+0x1c6>
 800c824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c826:	445a      	add	r2, fp
 800c828:	9209      	str	r2, [sp, #36]	; 0x24
 800c82a:	f89a 3000 	ldrb.w	r3, [sl]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 80a1 	beq.w	800c976 <_svfiprintf_r+0x1c6>
 800c834:	2300      	movs	r3, #0
 800c836:	f04f 32ff 	mov.w	r2, #4294967295
 800c83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c83e:	f10a 0a01 	add.w	sl, sl, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	9307      	str	r3, [sp, #28]
 800c846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c84a:	931a      	str	r3, [sp, #104]	; 0x68
 800c84c:	4654      	mov	r4, sl
 800c84e:	2205      	movs	r2, #5
 800c850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c854:	4850      	ldr	r0, [pc, #320]	; (800c998 <_svfiprintf_r+0x1e8>)
 800c856:	f7f3 fce3 	bl	8000220 <memchr>
 800c85a:	9a04      	ldr	r2, [sp, #16]
 800c85c:	b9d8      	cbnz	r0, 800c896 <_svfiprintf_r+0xe6>
 800c85e:	06d0      	lsls	r0, r2, #27
 800c860:	bf44      	itt	mi
 800c862:	2320      	movmi	r3, #32
 800c864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c868:	0711      	lsls	r1, r2, #28
 800c86a:	bf44      	itt	mi
 800c86c:	232b      	movmi	r3, #43	; 0x2b
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c872:	f89a 3000 	ldrb.w	r3, [sl]
 800c876:	2b2a      	cmp	r3, #42	; 0x2a
 800c878:	d015      	beq.n	800c8a6 <_svfiprintf_r+0xf6>
 800c87a:	9a07      	ldr	r2, [sp, #28]
 800c87c:	4654      	mov	r4, sl
 800c87e:	2000      	movs	r0, #0
 800c880:	f04f 0c0a 	mov.w	ip, #10
 800c884:	4621      	mov	r1, r4
 800c886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c88a:	3b30      	subs	r3, #48	; 0x30
 800c88c:	2b09      	cmp	r3, #9
 800c88e:	d94d      	bls.n	800c92c <_svfiprintf_r+0x17c>
 800c890:	b1b0      	cbz	r0, 800c8c0 <_svfiprintf_r+0x110>
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	e014      	b.n	800c8c0 <_svfiprintf_r+0x110>
 800c896:	eba0 0308 	sub.w	r3, r0, r8
 800c89a:	fa09 f303 	lsl.w	r3, r9, r3
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	46a2      	mov	sl, r4
 800c8a4:	e7d2      	b.n	800c84c <_svfiprintf_r+0x9c>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	1d19      	adds	r1, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9103      	str	r1, [sp, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfbb      	ittet	lt
 800c8b2:	425b      	neglt	r3, r3
 800c8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b8:	9307      	strge	r3, [sp, #28]
 800c8ba:	9307      	strlt	r3, [sp, #28]
 800c8bc:	bfb8      	it	lt
 800c8be:	9204      	strlt	r2, [sp, #16]
 800c8c0:	7823      	ldrb	r3, [r4, #0]
 800c8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8c4:	d10c      	bne.n	800c8e0 <_svfiprintf_r+0x130>
 800c8c6:	7863      	ldrb	r3, [r4, #1]
 800c8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ca:	d134      	bne.n	800c936 <_svfiprintf_r+0x186>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	1d1a      	adds	r2, r3, #4
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	9203      	str	r2, [sp, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	bfb8      	it	lt
 800c8d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8dc:	3402      	adds	r4, #2
 800c8de:	9305      	str	r3, [sp, #20]
 800c8e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9a8 <_svfiprintf_r+0x1f8>
 800c8e4:	7821      	ldrb	r1, [r4, #0]
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	f7f3 fc99 	bl	8000220 <memchr>
 800c8ee:	b138      	cbz	r0, 800c900 <_svfiprintf_r+0x150>
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	eba0 000a 	sub.w	r0, r0, sl
 800c8f6:	2240      	movs	r2, #64	; 0x40
 800c8f8:	4082      	lsls	r2, r0
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	3401      	adds	r4, #1
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c904:	4825      	ldr	r0, [pc, #148]	; (800c99c <_svfiprintf_r+0x1ec>)
 800c906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c90a:	2206      	movs	r2, #6
 800c90c:	f7f3 fc88 	bl	8000220 <memchr>
 800c910:	2800      	cmp	r0, #0
 800c912:	d038      	beq.n	800c986 <_svfiprintf_r+0x1d6>
 800c914:	4b22      	ldr	r3, [pc, #136]	; (800c9a0 <_svfiprintf_r+0x1f0>)
 800c916:	bb1b      	cbnz	r3, 800c960 <_svfiprintf_r+0x1b0>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	3307      	adds	r3, #7
 800c91c:	f023 0307 	bic.w	r3, r3, #7
 800c920:	3308      	adds	r3, #8
 800c922:	9303      	str	r3, [sp, #12]
 800c924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c926:	4433      	add	r3, r6
 800c928:	9309      	str	r3, [sp, #36]	; 0x24
 800c92a:	e768      	b.n	800c7fe <_svfiprintf_r+0x4e>
 800c92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c930:	460c      	mov	r4, r1
 800c932:	2001      	movs	r0, #1
 800c934:	e7a6      	b.n	800c884 <_svfiprintf_r+0xd4>
 800c936:	2300      	movs	r3, #0
 800c938:	3401      	adds	r4, #1
 800c93a:	9305      	str	r3, [sp, #20]
 800c93c:	4619      	mov	r1, r3
 800c93e:	f04f 0c0a 	mov.w	ip, #10
 800c942:	4620      	mov	r0, r4
 800c944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c948:	3a30      	subs	r2, #48	; 0x30
 800c94a:	2a09      	cmp	r2, #9
 800c94c:	d903      	bls.n	800c956 <_svfiprintf_r+0x1a6>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0c6      	beq.n	800c8e0 <_svfiprintf_r+0x130>
 800c952:	9105      	str	r1, [sp, #20]
 800c954:	e7c4      	b.n	800c8e0 <_svfiprintf_r+0x130>
 800c956:	fb0c 2101 	mla	r1, ip, r1, r2
 800c95a:	4604      	mov	r4, r0
 800c95c:	2301      	movs	r3, #1
 800c95e:	e7f0      	b.n	800c942 <_svfiprintf_r+0x192>
 800c960:	ab03      	add	r3, sp, #12
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	462a      	mov	r2, r5
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <_svfiprintf_r+0x1f4>)
 800c968:	a904      	add	r1, sp, #16
 800c96a:	4638      	mov	r0, r7
 800c96c:	f3af 8000 	nop.w
 800c970:	1c42      	adds	r2, r0, #1
 800c972:	4606      	mov	r6, r0
 800c974:	d1d6      	bne.n	800c924 <_svfiprintf_r+0x174>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	065b      	lsls	r3, r3, #25
 800c97a:	f53f af2d 	bmi.w	800c7d8 <_svfiprintf_r+0x28>
 800c97e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c980:	b01d      	add	sp, #116	; 0x74
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	ab03      	add	r3, sp, #12
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	462a      	mov	r2, r5
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <_svfiprintf_r+0x1f4>)
 800c98e:	a904      	add	r1, sp, #16
 800c990:	4638      	mov	r0, r7
 800c992:	f000 f879 	bl	800ca88 <_printf_i>
 800c996:	e7eb      	b.n	800c970 <_svfiprintf_r+0x1c0>
 800c998:	0800ce70 	.word	0x0800ce70
 800c99c:	0800ce7a 	.word	0x0800ce7a
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	0800c6fd 	.word	0x0800c6fd
 800c9a8:	0800ce76 	.word	0x0800ce76

0800c9ac <_printf_common>:
 800c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	4616      	mov	r6, r2
 800c9b2:	4699      	mov	r9, r3
 800c9b4:	688a      	ldr	r2, [r1, #8]
 800c9b6:	690b      	ldr	r3, [r1, #16]
 800c9b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	bfb8      	it	lt
 800c9c0:	4613      	movlt	r3, r2
 800c9c2:	6033      	str	r3, [r6, #0]
 800c9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	b10a      	cbz	r2, 800c9d2 <_printf_common+0x26>
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	6033      	str	r3, [r6, #0]
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	0699      	lsls	r1, r3, #26
 800c9d6:	bf42      	ittt	mi
 800c9d8:	6833      	ldrmi	r3, [r6, #0]
 800c9da:	3302      	addmi	r3, #2
 800c9dc:	6033      	strmi	r3, [r6, #0]
 800c9de:	6825      	ldr	r5, [r4, #0]
 800c9e0:	f015 0506 	ands.w	r5, r5, #6
 800c9e4:	d106      	bne.n	800c9f4 <_printf_common+0x48>
 800c9e6:	f104 0a19 	add.w	sl, r4, #25
 800c9ea:	68e3      	ldr	r3, [r4, #12]
 800c9ec:	6832      	ldr	r2, [r6, #0]
 800c9ee:	1a9b      	subs	r3, r3, r2
 800c9f0:	42ab      	cmp	r3, r5
 800c9f2:	dc26      	bgt.n	800ca42 <_printf_common+0x96>
 800c9f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9f8:	1e13      	subs	r3, r2, #0
 800c9fa:	6822      	ldr	r2, [r4, #0]
 800c9fc:	bf18      	it	ne
 800c9fe:	2301      	movne	r3, #1
 800ca00:	0692      	lsls	r2, r2, #26
 800ca02:	d42b      	bmi.n	800ca5c <_printf_common+0xb0>
 800ca04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca08:	4649      	mov	r1, r9
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	47c0      	blx	r8
 800ca0e:	3001      	adds	r0, #1
 800ca10:	d01e      	beq.n	800ca50 <_printf_common+0xa4>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	6922      	ldr	r2, [r4, #16]
 800ca16:	f003 0306 	and.w	r3, r3, #6
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	bf02      	ittt	eq
 800ca1e:	68e5      	ldreq	r5, [r4, #12]
 800ca20:	6833      	ldreq	r3, [r6, #0]
 800ca22:	1aed      	subeq	r5, r5, r3
 800ca24:	68a3      	ldr	r3, [r4, #8]
 800ca26:	bf0c      	ite	eq
 800ca28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca2c:	2500      	movne	r5, #0
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	bfc4      	itt	gt
 800ca32:	1a9b      	subgt	r3, r3, r2
 800ca34:	18ed      	addgt	r5, r5, r3
 800ca36:	2600      	movs	r6, #0
 800ca38:	341a      	adds	r4, #26
 800ca3a:	42b5      	cmp	r5, r6
 800ca3c:	d11a      	bne.n	800ca74 <_printf_common+0xc8>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	e008      	b.n	800ca54 <_printf_common+0xa8>
 800ca42:	2301      	movs	r3, #1
 800ca44:	4652      	mov	r2, sl
 800ca46:	4649      	mov	r1, r9
 800ca48:	4638      	mov	r0, r7
 800ca4a:	47c0      	blx	r8
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d103      	bne.n	800ca58 <_printf_common+0xac>
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca58:	3501      	adds	r5, #1
 800ca5a:	e7c6      	b.n	800c9ea <_printf_common+0x3e>
 800ca5c:	18e1      	adds	r1, r4, r3
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	2030      	movs	r0, #48	; 0x30
 800ca62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca66:	4422      	add	r2, r4
 800ca68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca70:	3302      	adds	r3, #2
 800ca72:	e7c7      	b.n	800ca04 <_printf_common+0x58>
 800ca74:	2301      	movs	r3, #1
 800ca76:	4622      	mov	r2, r4
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	47c0      	blx	r8
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d0e6      	beq.n	800ca50 <_printf_common+0xa4>
 800ca82:	3601      	adds	r6, #1
 800ca84:	e7d9      	b.n	800ca3a <_printf_common+0x8e>
	...

0800ca88 <_printf_i>:
 800ca88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8c:	7e0f      	ldrb	r7, [r1, #24]
 800ca8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca90:	2f78      	cmp	r7, #120	; 0x78
 800ca92:	4691      	mov	r9, r2
 800ca94:	4680      	mov	r8, r0
 800ca96:	460c      	mov	r4, r1
 800ca98:	469a      	mov	sl, r3
 800ca9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca9e:	d807      	bhi.n	800cab0 <_printf_i+0x28>
 800caa0:	2f62      	cmp	r7, #98	; 0x62
 800caa2:	d80a      	bhi.n	800caba <_printf_i+0x32>
 800caa4:	2f00      	cmp	r7, #0
 800caa6:	f000 80d4 	beq.w	800cc52 <_printf_i+0x1ca>
 800caaa:	2f58      	cmp	r7, #88	; 0x58
 800caac:	f000 80c0 	beq.w	800cc30 <_printf_i+0x1a8>
 800cab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cab8:	e03a      	b.n	800cb30 <_printf_i+0xa8>
 800caba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cabe:	2b15      	cmp	r3, #21
 800cac0:	d8f6      	bhi.n	800cab0 <_printf_i+0x28>
 800cac2:	a101      	add	r1, pc, #4	; (adr r1, 800cac8 <_printf_i+0x40>)
 800cac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cac8:	0800cb21 	.word	0x0800cb21
 800cacc:	0800cb35 	.word	0x0800cb35
 800cad0:	0800cab1 	.word	0x0800cab1
 800cad4:	0800cab1 	.word	0x0800cab1
 800cad8:	0800cab1 	.word	0x0800cab1
 800cadc:	0800cab1 	.word	0x0800cab1
 800cae0:	0800cb35 	.word	0x0800cb35
 800cae4:	0800cab1 	.word	0x0800cab1
 800cae8:	0800cab1 	.word	0x0800cab1
 800caec:	0800cab1 	.word	0x0800cab1
 800caf0:	0800cab1 	.word	0x0800cab1
 800caf4:	0800cc39 	.word	0x0800cc39
 800caf8:	0800cb61 	.word	0x0800cb61
 800cafc:	0800cbf3 	.word	0x0800cbf3
 800cb00:	0800cab1 	.word	0x0800cab1
 800cb04:	0800cab1 	.word	0x0800cab1
 800cb08:	0800cc5b 	.word	0x0800cc5b
 800cb0c:	0800cab1 	.word	0x0800cab1
 800cb10:	0800cb61 	.word	0x0800cb61
 800cb14:	0800cab1 	.word	0x0800cab1
 800cb18:	0800cab1 	.word	0x0800cab1
 800cb1c:	0800cbfb 	.word	0x0800cbfb
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	1d1a      	adds	r2, r3, #4
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	602a      	str	r2, [r5, #0]
 800cb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb30:	2301      	movs	r3, #1
 800cb32:	e09f      	b.n	800cc74 <_printf_i+0x1ec>
 800cb34:	6820      	ldr	r0, [r4, #0]
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	0607      	lsls	r7, r0, #24
 800cb3a:	f103 0104 	add.w	r1, r3, #4
 800cb3e:	6029      	str	r1, [r5, #0]
 800cb40:	d501      	bpl.n	800cb46 <_printf_i+0xbe>
 800cb42:	681e      	ldr	r6, [r3, #0]
 800cb44:	e003      	b.n	800cb4e <_printf_i+0xc6>
 800cb46:	0646      	lsls	r6, r0, #25
 800cb48:	d5fb      	bpl.n	800cb42 <_printf_i+0xba>
 800cb4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	da03      	bge.n	800cb5a <_printf_i+0xd2>
 800cb52:	232d      	movs	r3, #45	; 0x2d
 800cb54:	4276      	negs	r6, r6
 800cb56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb5a:	485a      	ldr	r0, [pc, #360]	; (800ccc4 <_printf_i+0x23c>)
 800cb5c:	230a      	movs	r3, #10
 800cb5e:	e012      	b.n	800cb86 <_printf_i+0xfe>
 800cb60:	682b      	ldr	r3, [r5, #0]
 800cb62:	6820      	ldr	r0, [r4, #0]
 800cb64:	1d19      	adds	r1, r3, #4
 800cb66:	6029      	str	r1, [r5, #0]
 800cb68:	0605      	lsls	r5, r0, #24
 800cb6a:	d501      	bpl.n	800cb70 <_printf_i+0xe8>
 800cb6c:	681e      	ldr	r6, [r3, #0]
 800cb6e:	e002      	b.n	800cb76 <_printf_i+0xee>
 800cb70:	0641      	lsls	r1, r0, #25
 800cb72:	d5fb      	bpl.n	800cb6c <_printf_i+0xe4>
 800cb74:	881e      	ldrh	r6, [r3, #0]
 800cb76:	4853      	ldr	r0, [pc, #332]	; (800ccc4 <_printf_i+0x23c>)
 800cb78:	2f6f      	cmp	r7, #111	; 0x6f
 800cb7a:	bf0c      	ite	eq
 800cb7c:	2308      	moveq	r3, #8
 800cb7e:	230a      	movne	r3, #10
 800cb80:	2100      	movs	r1, #0
 800cb82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb86:	6865      	ldr	r5, [r4, #4]
 800cb88:	60a5      	str	r5, [r4, #8]
 800cb8a:	2d00      	cmp	r5, #0
 800cb8c:	bfa2      	ittt	ge
 800cb8e:	6821      	ldrge	r1, [r4, #0]
 800cb90:	f021 0104 	bicge.w	r1, r1, #4
 800cb94:	6021      	strge	r1, [r4, #0]
 800cb96:	b90e      	cbnz	r6, 800cb9c <_printf_i+0x114>
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	d04b      	beq.n	800cc34 <_printf_i+0x1ac>
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cba2:	fb03 6711 	mls	r7, r3, r1, r6
 800cba6:	5dc7      	ldrb	r7, [r0, r7]
 800cba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbac:	4637      	mov	r7, r6
 800cbae:	42bb      	cmp	r3, r7
 800cbb0:	460e      	mov	r6, r1
 800cbb2:	d9f4      	bls.n	800cb9e <_printf_i+0x116>
 800cbb4:	2b08      	cmp	r3, #8
 800cbb6:	d10b      	bne.n	800cbd0 <_printf_i+0x148>
 800cbb8:	6823      	ldr	r3, [r4, #0]
 800cbba:	07de      	lsls	r6, r3, #31
 800cbbc:	d508      	bpl.n	800cbd0 <_printf_i+0x148>
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	6861      	ldr	r1, [r4, #4]
 800cbc2:	4299      	cmp	r1, r3
 800cbc4:	bfde      	ittt	le
 800cbc6:	2330      	movle	r3, #48	; 0x30
 800cbc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbd0:	1b52      	subs	r2, r2, r5
 800cbd2:	6122      	str	r2, [r4, #16]
 800cbd4:	f8cd a000 	str.w	sl, [sp]
 800cbd8:	464b      	mov	r3, r9
 800cbda:	aa03      	add	r2, sp, #12
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f7ff fee4 	bl	800c9ac <_printf_common>
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d14a      	bne.n	800cc7e <_printf_i+0x1f6>
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbec:	b004      	add	sp, #16
 800cbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	f043 0320 	orr.w	r3, r3, #32
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	4833      	ldr	r0, [pc, #204]	; (800ccc8 <_printf_i+0x240>)
 800cbfc:	2778      	movs	r7, #120	; 0x78
 800cbfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	6829      	ldr	r1, [r5, #0]
 800cc06:	061f      	lsls	r7, r3, #24
 800cc08:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc0c:	d402      	bmi.n	800cc14 <_printf_i+0x18c>
 800cc0e:	065f      	lsls	r7, r3, #25
 800cc10:	bf48      	it	mi
 800cc12:	b2b6      	uxthmi	r6, r6
 800cc14:	07df      	lsls	r7, r3, #31
 800cc16:	bf48      	it	mi
 800cc18:	f043 0320 	orrmi.w	r3, r3, #32
 800cc1c:	6029      	str	r1, [r5, #0]
 800cc1e:	bf48      	it	mi
 800cc20:	6023      	strmi	r3, [r4, #0]
 800cc22:	b91e      	cbnz	r6, 800cc2c <_printf_i+0x1a4>
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	f023 0320 	bic.w	r3, r3, #32
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	e7a7      	b.n	800cb80 <_printf_i+0xf8>
 800cc30:	4824      	ldr	r0, [pc, #144]	; (800ccc4 <_printf_i+0x23c>)
 800cc32:	e7e4      	b.n	800cbfe <_printf_i+0x176>
 800cc34:	4615      	mov	r5, r2
 800cc36:	e7bd      	b.n	800cbb4 <_printf_i+0x12c>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	6826      	ldr	r6, [r4, #0]
 800cc3c:	6961      	ldr	r1, [r4, #20]
 800cc3e:	1d18      	adds	r0, r3, #4
 800cc40:	6028      	str	r0, [r5, #0]
 800cc42:	0635      	lsls	r5, r6, #24
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	d501      	bpl.n	800cc4c <_printf_i+0x1c4>
 800cc48:	6019      	str	r1, [r3, #0]
 800cc4a:	e002      	b.n	800cc52 <_printf_i+0x1ca>
 800cc4c:	0670      	lsls	r0, r6, #25
 800cc4e:	d5fb      	bpl.n	800cc48 <_printf_i+0x1c0>
 800cc50:	8019      	strh	r1, [r3, #0]
 800cc52:	2300      	movs	r3, #0
 800cc54:	6123      	str	r3, [r4, #16]
 800cc56:	4615      	mov	r5, r2
 800cc58:	e7bc      	b.n	800cbd4 <_printf_i+0x14c>
 800cc5a:	682b      	ldr	r3, [r5, #0]
 800cc5c:	1d1a      	adds	r2, r3, #4
 800cc5e:	602a      	str	r2, [r5, #0]
 800cc60:	681d      	ldr	r5, [r3, #0]
 800cc62:	6862      	ldr	r2, [r4, #4]
 800cc64:	2100      	movs	r1, #0
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7f3 fada 	bl	8000220 <memchr>
 800cc6c:	b108      	cbz	r0, 800cc72 <_printf_i+0x1ea>
 800cc6e:	1b40      	subs	r0, r0, r5
 800cc70:	6060      	str	r0, [r4, #4]
 800cc72:	6863      	ldr	r3, [r4, #4]
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	2300      	movs	r3, #0
 800cc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc7c:	e7aa      	b.n	800cbd4 <_printf_i+0x14c>
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	462a      	mov	r2, r5
 800cc82:	4649      	mov	r1, r9
 800cc84:	4640      	mov	r0, r8
 800cc86:	47d0      	blx	sl
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d0ad      	beq.n	800cbe8 <_printf_i+0x160>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	079b      	lsls	r3, r3, #30
 800cc90:	d413      	bmi.n	800ccba <_printf_i+0x232>
 800cc92:	68e0      	ldr	r0, [r4, #12]
 800cc94:	9b03      	ldr	r3, [sp, #12]
 800cc96:	4298      	cmp	r0, r3
 800cc98:	bfb8      	it	lt
 800cc9a:	4618      	movlt	r0, r3
 800cc9c:	e7a6      	b.n	800cbec <_printf_i+0x164>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4632      	mov	r2, r6
 800cca2:	4649      	mov	r1, r9
 800cca4:	4640      	mov	r0, r8
 800cca6:	47d0      	blx	sl
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d09d      	beq.n	800cbe8 <_printf_i+0x160>
 800ccac:	3501      	adds	r5, #1
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	9903      	ldr	r1, [sp, #12]
 800ccb2:	1a5b      	subs	r3, r3, r1
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	dcf2      	bgt.n	800cc9e <_printf_i+0x216>
 800ccb8:	e7eb      	b.n	800cc92 <_printf_i+0x20a>
 800ccba:	2500      	movs	r5, #0
 800ccbc:	f104 0619 	add.w	r6, r4, #25
 800ccc0:	e7f5      	b.n	800ccae <_printf_i+0x226>
 800ccc2:	bf00      	nop
 800ccc4:	0800ce81 	.word	0x0800ce81
 800ccc8:	0800ce92 	.word	0x0800ce92

0800cccc <memmove>:
 800cccc:	4288      	cmp	r0, r1
 800ccce:	b510      	push	{r4, lr}
 800ccd0:	eb01 0402 	add.w	r4, r1, r2
 800ccd4:	d902      	bls.n	800ccdc <memmove+0x10>
 800ccd6:	4284      	cmp	r4, r0
 800ccd8:	4623      	mov	r3, r4
 800ccda:	d807      	bhi.n	800ccec <memmove+0x20>
 800ccdc:	1e43      	subs	r3, r0, #1
 800ccde:	42a1      	cmp	r1, r4
 800cce0:	d008      	beq.n	800ccf4 <memmove+0x28>
 800cce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccea:	e7f8      	b.n	800ccde <memmove+0x12>
 800ccec:	4402      	add	r2, r0
 800ccee:	4601      	mov	r1, r0
 800ccf0:	428a      	cmp	r2, r1
 800ccf2:	d100      	bne.n	800ccf6 <memmove+0x2a>
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccfe:	e7f7      	b.n	800ccf0 <memmove+0x24>

0800cd00 <_sbrk_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4d06      	ldr	r5, [pc, #24]	; (800cd1c <_sbrk_r+0x1c>)
 800cd04:	2300      	movs	r3, #0
 800cd06:	4604      	mov	r4, r0
 800cd08:	4608      	mov	r0, r1
 800cd0a:	602b      	str	r3, [r5, #0]
 800cd0c:	f7f4 faf2 	bl	80012f4 <_sbrk>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_sbrk_r+0x1a>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_sbrk_r+0x1a>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	200017ac 	.word	0x200017ac

0800cd20 <memcpy>:
 800cd20:	440a      	add	r2, r1
 800cd22:	4291      	cmp	r1, r2
 800cd24:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd28:	d100      	bne.n	800cd2c <memcpy+0xc>
 800cd2a:	4770      	bx	lr
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd36:	4291      	cmp	r1, r2
 800cd38:	d1f9      	bne.n	800cd2e <memcpy+0xe>
 800cd3a:	bd10      	pop	{r4, pc}

0800cd3c <_realloc_r>:
 800cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	4680      	mov	r8, r0
 800cd42:	4614      	mov	r4, r2
 800cd44:	460e      	mov	r6, r1
 800cd46:	b921      	cbnz	r1, 800cd52 <_realloc_r+0x16>
 800cd48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	f7ff bc49 	b.w	800c5e4 <_malloc_r>
 800cd52:	b92a      	cbnz	r2, 800cd60 <_realloc_r+0x24>
 800cd54:	f7ff fbda 	bl	800c50c <_free_r>
 800cd58:	4625      	mov	r5, r4
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd60:	f000 f81b 	bl	800cd9a <_malloc_usable_size_r>
 800cd64:	4284      	cmp	r4, r0
 800cd66:	4607      	mov	r7, r0
 800cd68:	d802      	bhi.n	800cd70 <_realloc_r+0x34>
 800cd6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd6e:	d812      	bhi.n	800cd96 <_realloc_r+0x5a>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4640      	mov	r0, r8
 800cd74:	f7ff fc36 	bl	800c5e4 <_malloc_r>
 800cd78:	4605      	mov	r5, r0
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d0ed      	beq.n	800cd5a <_realloc_r+0x1e>
 800cd7e:	42bc      	cmp	r4, r7
 800cd80:	4622      	mov	r2, r4
 800cd82:	4631      	mov	r1, r6
 800cd84:	bf28      	it	cs
 800cd86:	463a      	movcs	r2, r7
 800cd88:	f7ff ffca 	bl	800cd20 <memcpy>
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f7ff fbbc 	bl	800c50c <_free_r>
 800cd94:	e7e1      	b.n	800cd5a <_realloc_r+0x1e>
 800cd96:	4635      	mov	r5, r6
 800cd98:	e7df      	b.n	800cd5a <_realloc_r+0x1e>

0800cd9a <_malloc_usable_size_r>:
 800cd9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd9e:	1f18      	subs	r0, r3, #4
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bfbc      	itt	lt
 800cda4:	580b      	ldrlt	r3, [r1, r0]
 800cda6:	18c0      	addlt	r0, r0, r3
 800cda8:	4770      	bx	lr
	...

0800cdac <_init>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_fini>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr
