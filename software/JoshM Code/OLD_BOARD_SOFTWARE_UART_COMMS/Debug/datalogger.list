
datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800cfd8  0800cfd8  0000dfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d160  0800d160  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d160  0800d160  0000e160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d168  0800d168  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d168  0800d168  0000e168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d16c  0800d16c  0000e16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d170  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  200001e0  0800d350  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800d350  0000f5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ed3  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b8e  00000000  00000000  000350e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e68  00000000  00000000  0003ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001723  00000000  00000000  0003cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293bd  00000000  00000000  0003e203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b647  00000000  00000000  000675c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee6e7  00000000  00000000  00092c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001812ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008624  00000000  00000000  00181334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00189958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cfc0 	.word	0x0800cfc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800cfc0 	.word	0x0800cfc0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	@ 0x30
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2220      	movs	r2, #32
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f00b ff75 	bl	800c4b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800060a:	2201      	movs	r2, #1
 800060c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	4817      	ldr	r0, [pc, #92]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800063a:	f001 f9dd 	bl	80019f8 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000644:	f000 fc1c 	bl	8000e80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800064c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000654:	f001 ff6a 	bl	800252c <HAL_ADCEx_MultiModeConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800065e:	f000 fc0f 	bl	8000e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_ADC1_Init+0xec>)
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2306      	movs	r3, #6
 8000668:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066e:	237f      	movs	r3, #127	@ 0x7f
 8000670:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2304      	movs	r3, #4
 8000674:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000680:	f001 fb3e 	bl	8001d00 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800068a:	f000 fbf9 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3730      	adds	r7, #48	@ 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200001fc 	.word	0x200001fc
 800069c:	04300002 	.word	0x04300002

080006a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2220      	movs	r2, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f00b ff03 	bl	800c4b8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000764 <MX_ADC2_Init+0xc4>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c6:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006cc:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d8:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006da:	2204      	movs	r2, #4
 80006dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_ADC2_Init+0xc0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <MX_ADC2_Init+0xc0>)
 800071c:	f001 f96c 	bl	80019f8 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000726:	f000 fbab 	bl	8000e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_ADC2_Init+0xc8>)
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072e:	2306      	movs	r3, #6
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000736:	237f      	movs	r3, #127	@ 0x7f
 8000738:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073a:	2304      	movs	r3, #4
 800073c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <MX_ADC2_Init+0xc0>)
 8000748:	f001 fada 	bl	8001d00 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000752:	f000 fb95 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000268 	.word	0x20000268
 8000764:	50000100 	.word	0x50000100
 8000768:	2e300800 	.word	0x2e300800

0800076c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09e      	sub	sp, #120	@ 0x78
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	2244      	movs	r2, #68	@ 0x44
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f00b fe93 	bl	800c4b8 <memset>
  if(adcHandle->Instance==ADC1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800079a:	d16f      	bne.n	800087c <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800079c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f005 f81f 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007b8:	f000 fb62 	bl	8000e80 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007bc:	4b52      	ldr	r3, [pc, #328]	@ (8000908 <HAL_ADC_MspInit+0x19c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a51      	ldr	r2, [pc, #324]	@ (8000908 <HAL_ADC_MspInit+0x19c>)
 80007c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007c6:	4b50      	ldr	r3, [pc, #320]	@ (8000908 <HAL_ADC_MspInit+0x19c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10b      	bne.n	80007e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ce:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a4e      	ldr	r2, [pc, #312]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80007d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a48      	ldr	r2, [pc, #288]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b46      	ldr	r3, [pc, #280]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b43      	ldr	r3, [pc, #268]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a42      	ldr	r2, [pc, #264]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b40      	ldr	r3, [pc, #256]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b3d      	ldr	r3, [pc, #244]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a3c      	ldr	r2, [pc, #240]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = SIG_4_Pin|SIG_2_Pin|ADC_9_Pin|ADC_10_Pin;
 800082e:	230f      	movs	r3, #15
 8000830:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800083e:	4619      	mov	r1, r3
 8000840:	4833      	ldr	r0, [pc, #204]	@ (8000910 <HAL_ADC_MspInit+0x1a4>)
 8000842:	f002 fa01 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_4_Pin;
 8000846:	230b      	movs	r3, #11
 8000848:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084a:	2303      	movs	r3, #3
 800084c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f002 f9f4 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_OUT_Pin|ADC_3_Pin|GPIO_PIN_14;
 8000860:	f245 0301 	movw	r3, #20481	@ 0x5001
 8000864:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000872:	4619      	mov	r1, r3
 8000874:	4827      	ldr	r0, [pc, #156]	@ (8000914 <HAL_ADC_MspInit+0x1a8>)
 8000876:	f002 f9e7 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800087a:	e041      	b.n	8000900 <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a25      	ldr	r2, [pc, #148]	@ (8000918 <HAL_ADC_MspInit+0x1ac>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d13c      	bne.n	8000900 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800088a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800088c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000890:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	4618      	mov	r0, r3
 8000898:	f004 ffaa 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 80008a2:	f000 faed 	bl	8000e80 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <HAL_ADC_MspInit+0x19c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <HAL_ADC_MspInit+0x19c>)
 80008ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_ADC_MspInit+0x19c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d10b      	bne.n	80008d0 <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a13      	ldr	r2, [pc, #76]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80008be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <HAL_ADC_MspInit+0x1a0>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12_Pin;
 80008e8:	2320      	movs	r3, #32
 80008ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(ADC_12_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008f8:	4619      	mov	r1, r3
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <HAL_ADC_MspInit+0x1a4>)
 80008fc:	f002 f9a4 	bl	8002c48 <HAL_GPIO_Init>
}
 8000900:	bf00      	nop
 8000902:	3778      	adds	r7, #120	@ 0x78
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002d4 	.word	0x200002d4
 800090c:	40021000 	.word	0x40021000
 8000910:	48000800 	.word	0x48000800
 8000914:	48000400 	.word	0x48000400
 8000918:	50000100 	.word	0x50000100

0800091c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2230      	movs	r2, #48	@ 0x30
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f00b fdc5 	bl	800c4b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_DAC1_Init+0x80>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	@ (80009a0 <MX_DAC1_Init+0x84>)
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000934:	4819      	ldr	r0, [pc, #100]	@ (800099c <MX_DAC1_Init+0x80>)
 8000936:	f001 ffac 	bl	8002892 <HAL_DAC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000940:	f000 fa9e 	bl	8000e80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000944:	2302      	movs	r3, #2
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_DAC1_Init+0x80>)
 8000970:	f001 ffb2 	bl	80028d8 <HAL_DAC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800097a:	f000 fa81 	bl	8000e80 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2210      	movs	r2, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_DAC1_Init+0x80>)
 8000986:	f001 ffa7 	bl	80028d8 <HAL_DAC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000990:	f000 fa76 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3730      	adds	r7, #48	@ 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200002d8 	.word	0x200002d8
 80009a0:	50000800 	.word	0x50000800

080009a4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <HAL_DAC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d124      	bne.n	8000a10 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_DAC_MspInit+0x78>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <HAL_DAC_MspInit+0x78>)
 80009cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_DAC_MspInit+0x78>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_DAC_MspInit+0x78>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a1c <HAL_DAC_MspInit+0x78>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_DAC_MspInit+0x78>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 80009f6:	2330      	movs	r3, #48	@ 0x30
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0c:	f002 f91c 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	50000800 	.word	0x50000800
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b4e      	ldr	r3, [pc, #312]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b4b      	ldr	r3, [pc, #300]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4e:	4b48      	ldr	r3, [pc, #288]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	4a47      	ldr	r2, [pc, #284]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5a:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	4a41      	ldr	r2, [pc, #260]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a72:	4b3f      	ldr	r3, [pc, #252]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	4a3b      	ldr	r2, [pc, #236]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8a:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin
 8000a96:	2200      	movs	r2, #0
 8000a98:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 8000a9c:	4835      	ldr	r0, [pc, #212]	@ (8000b74 <MX_GPIO_Init+0x154>)
 8000a9e:	f002 fa55 	bl	8002f4c <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000aa8:	4833      	ldr	r0, [pc, #204]	@ (8000b78 <MX_GPIO_Init+0x158>)
 8000aaa:	f002 fa4f 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f002 fa48 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin;
 8000abc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4829      	ldr	r0, [pc, #164]	@ (8000b78 <MX_GPIO_Init+0x158>)
 8000ad2:	f002 f8b9 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f002 f8ac 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin
 8000af0:	f24a 43a2 	movw	r3, #42146	@ 0xa4a2
 8000af4:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	481a      	ldr	r0, [pc, #104]	@ (8000b74 <MX_GPIO_Init+0x154>)
 8000b0a:	f002 f89d 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_STATUS_Pin|DIGITAL_IO_4_Pin|SD_CARD_DETECT_Pin;
 8000b0e:	f640 2304 	movw	r3, #2564	@ 0xa04
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <MX_GPIO_Init+0x154>)
 8000b24:	f002 f890 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin;
 8000b28:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_GPIO_Init+0x158>)
 8000b42:	f002 f881 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8000b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b62:	f002 f871 	bl	8002c48 <HAL_GPIO_Init>

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800

08000b7c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf4 <MX_I2C2_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000b88:	f240 1203 	movw	r2, #259	@ 0x103
 8000b8c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000bba:	f002 f9df 	bl	8002f7c <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 f95c 	bl	8000e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000bcc:	f002 fa71 	bl	80030b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000bd6:	f000 f953 	bl	8000e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_I2C2_Init+0x74>)
 8000bde:	f002 fab3 	bl	8003148 <HAL_I2CEx_ConfigDigitalFilter>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 f94a 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200002ec 	.word	0x200002ec
 8000bf4:	40005800 	.word	0x40005800

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	@ 0x70
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	2244      	movs	r2, #68	@ 0x44
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f00b fc4d 	bl	800c4b8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd8 <HAL_I2C_MspInit+0xe0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d153      	bne.n	8000cd0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fddb 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c40:	f000 f91e 	bl	8000e80 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c74:	2310      	movs	r3, #16
 8000c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c84:	2304      	movs	r3, #4
 8000c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	@ (8000ce0 <HAL_I2C_MspInit+0xe8>)
 8000c90:	f001 ffda 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f001 ffc8 	bl	8002c48 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000cbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_I2C_MspInit+0xe4>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3770      	adds	r7, #112	@ 0x70
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000800 	.word	0x48000800

08000ce4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cea:	f000 fc1c 	bl	8001526 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cee:	f000 f833 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf2:	f7ff fe95 	bl	8000a20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cf6:	f7ff fc5b 	bl	80005b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000cfa:	f7ff fcd1 	bl	80006a0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000cfe:	f7ff fe0d 	bl	800091c <MX_DAC1_Init>
  MX_SPI1_Init();
 8000d02:	f000 f937 	bl	8000f74 <MX_SPI1_Init>
  // MX_SPI3_Init();
  MX_UCPD1_Init();
 8000d06:	f000 fb11 	bl	800132c <MX_UCPD1_Init>
  MX_I2C2_Init();
 8000d0a:	f7ff ff37 	bl	8000b7c <MX_I2C2_Init>
  MX_RTC_Init();
 8000d0e:	f000 f8bd 	bl	8000e8c <MX_RTC_Init>
  MX_USB_Device_Init();
 8000d12:	f00a fcbf 	bl	800b694 <MX_USB_Device_Init>
  MX_UART4_Init();
 8000d16:	f000 fb37 	bl	8001388 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  adc_t ADC_1 = {
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2228      	movs	r2, #40	@ 0x28
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00b fbc9 	bl	800c4b8 <memset>
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <main+0x6c>)
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	237f      	movs	r3, #127	@ 0x7f
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	2304      	movs	r3, #4
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <main+0x70>)
 8000d3c:	623b      	str	r3, [r7, #32]
  while (1)
  {
    /* USER CODE END WHILE */

  // test_spi_read_version();
    test_spi_loopback();
 8000d3e:	f000 f85b 	bl	8000df8 <test_spi_loopback>
  // default:
  //   break;
  // } 
  // // uncomment all of the above for uart

  HAL_Delay(400);
 8000d42:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000d46:	f000 fc5f 	bl	8001608 <HAL_Delay>
  {
 8000d4a:	bf00      	nop
 8000d4c:	e7f7      	b.n	8000d3e <main+0x5a>
 8000d4e:	bf00      	nop
 8000d50:	04300002 	.word	0x04300002
 8000d54:	200001fc 	.word	0x200001fc

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	@ 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	2238      	movs	r2, #56	@ 0x38
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00b fba6 	bl	800c4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d7e:	f003 ff65 	bl	8004c4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d82:	230a      	movs	r3, #10
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	2340      	movs	r3, #64	@ 0x40
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000da0:	230c      	movs	r3, #12
 8000da2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 ffed 	bl	8004d94 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000dc0:	f000 f85e 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000dd0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 faea 	bl	80053b8 <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dea:	f000 f849 	bl	8000e80 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3750      	adds	r7, #80	@ 0x50
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <test_spi_loopback>:
    // Transmit the message over UART
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
}

void test_spi_loopback(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
    uint8_t tx_data = 0xAA;  // test byte
 8000dfe:	23aa      	movs	r3, #170	@ 0xaa
 8000e00:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(SX126X_NSS_GPIO_Port, SX126X_NSS_Pin, GPIO_PIN_RESET);  // pull NSS low
 8000e06:	2200      	movs	r2, #0
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <test_spi_loopback+0x70>)
 8000e0c:	f002 f89e 	bl	8002f4c <HAL_GPIO_WritePin>

    // transmit and receive data
    if (HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 8000e10:	1dba      	adds	r2, r7, #6
 8000e12:	1df9      	adds	r1, r7, #7
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4813      	ldr	r0, [pc, #76]	@ (8000e6c <test_spi_loopback+0x74>)
 8000e1e:	f005 f913 	bl	8006048 <HAL_SPI_TransmitReceive>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d112      	bne.n	8000e4e <test_spi_loopback+0x56>
    {
        printf("Sent: 0x%02X, Received: 0x%02X\n", tx_data, rx_data);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <test_spi_loopback+0x78>)
 8000e32:	f00b f9f9 	bl	800c228 <iprintf>
        if (tx_data == rx_data)
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d103      	bne.n	8000e46 <test_spi_loopback+0x4e>
        {
            printf("SPI Loopback Success\n");
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <test_spi_loopback+0x7c>)
 8000e40:	f00b fa5a 	bl	800c2f8 <puts>
 8000e44:	e006      	b.n	8000e54 <test_spi_loopback+0x5c>
        }
        else
        {
            printf("SPI Loopback Error: Sent and Received do not match\n");
 8000e46:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <test_spi_loopback+0x80>)
 8000e48:	f00b fa56 	bl	800c2f8 <puts>
 8000e4c:	e002      	b.n	8000e54 <test_spi_loopback+0x5c>
        }
    }
    else
    {
        printf("SPI Loopback Failed\n");
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <test_spi_loopback+0x84>)
 8000e50:	f00b fa52 	bl	800c2f8 <puts>
    }

    HAL_GPIO_WritePin(SX126X_NSS_GPIO_Port, SX126X_NSS_Pin, GPIO_PIN_SET);  // pull NSS high
 8000e54:	2201      	movs	r2, #1
 8000e56:	2140      	movs	r1, #64	@ 0x40
 8000e58:	4803      	ldr	r0, [pc, #12]	@ (8000e68 <test_spi_loopback+0x70>)
 8000e5a:	f002 f877 	bl	8002f4c <HAL_GPIO_WritePin>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	20000368 	.word	0x20000368
 8000e70:	0800d024 	.word	0x0800d024
 8000e74:	0800d044 	.word	0x0800d044
 8000e78:	0800d05c 	.word	0x0800d05c
 8000e7c:	0800d090 	.word	0x0800d090

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <Error_Handler+0x8>

08000e8c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000e92:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <MX_RTC_Init+0x6c>)
 8000e94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000e9e:	227f      	movs	r2, #127	@ 0x7f
 8000ea0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000ea4:	22ff      	movs	r2, #255	@ 0xff
 8000ea6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000eca:	f004 fe81 	bl	8005bd0 <HAL_RTC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000ed4:	f7ff ffd4 	bl	8000e80 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8000ed8:	2206      	movs	r2, #6
 8000eda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_RTC_Init+0x68>)
 8000ee0:	f004 ff93 	bl	8005e0a <HAL_RTCEx_SetWakeUpTimer>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000eea:	f7ff ffc9 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000340 	.word	0x20000340
 8000ef8:	40002800 	.word	0x40002800

08000efc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2244      	movs	r2, #68	@ 0x44
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00b fad3 	bl	800c4b8 <memset>
  if(rtcHandle->Instance==RTC)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <HAL_RTC_MspInit+0x70>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d123      	bne.n	8000f64 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000f20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f26:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 fc5f 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f38:	f7ff ffa2 	bl	8000e80 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <HAL_RTC_MspInit+0x74>)
 8000f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <HAL_RTC_MspInit+0x74>)
 8000f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_RTC_MspInit+0x74>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <HAL_RTC_MspInit+0x74>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_RTC_MspInit+0x74>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	3750      	adds	r7, #80	@ 0x50
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40002800 	.word	0x40002800
 8000f70:	40021000 	.word	0x40021000

08000f74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <MX_SPI1_Init+0x78>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000f80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f86:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000f8e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fce:	2208      	movs	r2, #8
 8000fd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_SPI1_Init+0x74>)
 8000fd4:	f004 ff8d 	bl	8005ef2 <HAL_SPI_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f7ff ff4f 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000368 	.word	0x20000368
 8000fec:	40013000 	.word	0x40013000

08000ff0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a25      	ldr	r2, [pc, #148]	@ (80010a4 <HAL_SPI_MspInit+0xb4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d144      	bne.n	800109c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001016:	4a24      	ldr	r2, [pc, #144]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800101c:	6613      	str	r3, [r2, #96]	@ 0x60
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_SPI_MspInit+0xb8>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106a:	2305      	movs	r3, #5
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001078:	f001 fde6 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800107c:	2308      	movs	r3, #8
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800108c:	2305      	movs	r3, #5
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_SPI_MspInit+0xbc>)
 8001098:	f001 fdd6 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40013000 	.word	0x40013000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000400 	.word	0x48000400

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 fa3d 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <USB_LP_IRQHandler+0x10>)
 800115e:	f002 f92f 	bl	80033c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000113c 	.word	0x2000113c

0800116c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e00a      	b.n	8001194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800117e:	f3af 8000 	nop.w
 8001182:	4601      	mov	r1, r0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf0      	blt.n	800117e <_read+0x12>
  }

  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;


  if (CDC_Transmit_FS((uint8_t*)ptr, len) == USBD_OK) return len;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f00a fb29 	bl	800b810 <CDC_Transmit_FS>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <_write+0x22>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	e001      	b.n	80011cc <_write+0x26>
  return -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
//  return len;
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_close>:

int _close(int file)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011fc:	605a      	str	r2, [r3, #4]
  return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_isatty>:

int _isatty(int file)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001222:	b480      	push	{r7}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f00b f972 	bl	800c554 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20008000 	.word	0x20008000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200003cc 	.word	0x200003cc
 80012a4:	200015c8 	.word	0x200015c8

080012a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012d8:	4907      	ldr	r1, [pc, #28]	@ (80012f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4013      	ands	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000

080012fc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001308:	4907      	ldr	r1, [pc, #28]	@ (8001328 <LL_APB1_GRP2_EnableClock+0x2c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4013      	ands	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40021000 	.word	0x40021000

0800132c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001342:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001346:	f7ff ffd9 	bl	80012fc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff ffbe 	bl	80012cc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001350:	2310      	movs	r3, #16
 8001352:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <MX_UCPD1_Init+0x58>)
 8001362:	f006 f980 	bl	8007666 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001366:	2340      	movs	r3, #64	@ 0x40
 8001368:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4803      	ldr	r0, [pc, #12]	@ (8001384 <MX_UCPD1_Init+0x58>)
 8001378:	f006 f975 	bl	8007666 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	48000400 	.word	0x48000400

08001388 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800138c:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <MX_UART4_Init+0x90>)
 800138e:	4a23      	ldr	r2, [pc, #140]	@ (800141c <MX_UART4_Init+0x94>)
 8001390:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001392:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <MX_UART4_Init+0x90>)
 8001394:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001398:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <MX_UART4_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <MX_UART4_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <MX_UART4_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <MX_UART4_Init+0x90>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <MX_UART4_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_UART4_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <MX_UART4_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_UART4_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <MX_UART4_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013d0:	4811      	ldr	r0, [pc, #68]	@ (8001418 <MX_UART4_Init+0x90>)
 80013d2:	f005 f9bf 	bl	8006754 <HAL_UART_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013dc:	f7ff fd50 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	480d      	ldr	r0, [pc, #52]	@ (8001418 <MX_UART4_Init+0x90>)
 80013e4:	f005 ff2a 	bl	800723c <HAL_UARTEx_SetTxFifoThreshold>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013ee:	f7ff fd47 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4808      	ldr	r0, [pc, #32]	@ (8001418 <MX_UART4_Init+0x90>)
 80013f6:	f005 ff5f 	bl	80072b8 <HAL_UARTEx_SetRxFifoThreshold>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001400:	f7ff fd3e 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <MX_UART4_Init+0x90>)
 8001406:	f005 fee0 	bl	80071ca <HAL_UARTEx_DisableFifoMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001410:	f7ff fd36 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200003d0 	.word	0x200003d0
 800141c:	40004c00 	.word	0x40004c00

08001420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b09a      	sub	sp, #104	@ 0x68
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2244      	movs	r2, #68	@ 0x44
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f00b f839 	bl	800c4b8 <memset>
  if(uartHandle->Instance==UART4)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <HAL_UART_MspInit+0xa8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d136      	bne.n	80014be <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001450:	2308      	movs	r3, #8
 8001452:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4618      	mov	r0, r3
 800145e:	f004 f9c7 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001468:	f7ff fd0a 	bl	8000e80 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <HAL_UART_MspInit+0xac>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <HAL_UART_MspInit+0xac>)
 8001472:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001476:	6593      	str	r3, [r2, #88]	@ 0x58
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <HAL_UART_MspInit+0xac>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_UART_MspInit+0xac>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <HAL_UART_MspInit+0xac>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_UART_MspInit+0xac>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800149c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014a0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80014ae:	2305      	movs	r3, #5
 80014b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <HAL_UART_MspInit+0xb0>)
 80014ba:	f001 fbc5 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3768      	adds	r7, #104	@ 0x68
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004c00 	.word	0x40004c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000800 	.word	0x48000800

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d4:	480d      	ldr	r0, [pc, #52]	@ (800150c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff fee6 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f00b f82d 	bl	800c560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7ff fbed 	bl	8000ce4 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   r0, =_estack
 800150c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001518:	0800d170 	.word	0x0800d170
  ldr r2, =_sbss
 800151c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001520:	200015c4 	.word	0x200015c4

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>

08001526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f001 f96f 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f80e 	bl	8001558 <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e001      	b.n	800154c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001548:	f7ff fdb2 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154c:	79fb      	ldrb	r3, [r7, #7]

}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_InitTick+0x68>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d022      	beq.n	80015b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_InitTick+0x6c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <HAL_InitTick+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001578:	fbb1 f3f3 	udiv	r3, r1, r3
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f001 f97a 	bl	800287a <HAL_SYSTICK_Config>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10f      	bne.n	80015ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d809      	bhi.n	80015a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001592:	2200      	movs	r2, #0
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	f04f 30ff 	mov.w	r0, #4294967295
 800159a:	f001 f946 	bl	800282a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_InitTick+0x70>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e007      	b.n	80015b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e004      	b.n	80015b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e001      	b.n	80015b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_IncTick+0x1c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_IncTick+0x20>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	4a03      	ldr	r2, [pc, #12]	@ (80015e8 <HAL_IncTick+0x1c>)
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20000464 	.word	0x20000464
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000464 	.word	0x20000464

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d004      	beq.n	800162c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_Delay+0x40>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162c:	bf00      	nop
 800162e:	f7ff ffdf 	bl	80015f0 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	429a      	cmp	r2, r3
 800163c:	d8f7      	bhi.n	800162e <HAL_Delay+0x26>
  {
  }
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000008 	.word	0x20000008

0800164c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	609a      	str	r2, [r3, #8]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3360      	adds	r3, #96	@ 0x60
 80016c6:	461a      	mov	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <LL_ADC_SetOffset+0x44>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	03fff000 	.word	0x03fff000

080016fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3360      	adds	r3, #96	@ 0x60
 800170a:	461a      	mov	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3360      	adds	r3, #96	@ 0x60
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800175e:	b480      	push	{r7}
 8001760:	b087      	sub	sp, #28
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3360      	adds	r3, #96	@ 0x60
 800176e:	461a      	mov	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	431a      	orrs	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3360      	adds	r3, #96	@ 0x60
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	615a      	str	r2, [r3, #20]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3330      	adds	r3, #48	@ 0x30
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	4413      	add	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	211f      	movs	r1, #31
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0e9b      	lsrs	r3, r3, #26
 8001828:	f003 011f 	and.w	r1, r3, #31
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3314      	adds	r3, #20
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0e5b      	lsrs	r3, r3, #25
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	0d1b      	lsrs	r3, r3, #20
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2107      	movs	r1, #7
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	0d1b      	lsrs	r3, r3, #20
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0318 	and.w	r3, r3, #24
 80018c2:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c4:	40d9      	lsrs	r1, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	400b      	ands	r3, r1
 80018ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ce:	431a      	orrs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	0007ffff 	.word	0x0007ffff

080018e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6093      	str	r3, [r2, #8]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800191c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001920:	d101      	bne.n	8001926 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001948:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001970:	d101      	bne.n	8001976 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <LL_ADC_IsEnabled+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_ADC_IsEnabled+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d101      	bne.n	80019e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e167      	b.n	8001ce2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe fea3 	bl	800076c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff67 	bl	800190c <LL_ADC_IsDeepPowerDownEnabled>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff4d 	bl	80018e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff82 	bl	800195c <LL_ADC_IsInternalRegulatorEnabled>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d115      	bne.n	8001a8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff66 	bl	8001934 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a68:	4ba0      	ldr	r3, [pc, #640]	@ (8001cec <HAL_ADC_Init+0x2f4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	4aa0      	ldr	r2, [pc, #640]	@ (8001cf0 <HAL_ADC_Init+0x2f8>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	3301      	adds	r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff64 	bl	800195c <LL_ADC_IsInternalRegulatorEnabled>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff75 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 8001ac0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 8100 	bne.w	8001cd0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 80fc 	bne.w	8001cd0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ae0:	f043 0202 	orr.w	r2, r3, #2
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff49 	bl	8001984 <LL_ADC_IsEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001afc:	f7ff ff42 	bl	8001984 <LL_ADC_IsEnabled>
 8001b00:	4604      	mov	r4, r0
 8001b02:	487c      	ldr	r0, [pc, #496]	@ (8001cf4 <HAL_ADC_Init+0x2fc>)
 8001b04:	f7ff ff3e 	bl	8001984 <LL_ADC_IsEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4878      	ldr	r0, [pc, #480]	@ (8001cf8 <HAL_ADC_Init+0x300>)
 8001b18:	f7ff fd98 	bl	800164c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7f5b      	ldrb	r3, [r3, #29]
 8001b20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	045b      	lsls	r3, r3, #17
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b60      	ldr	r3, [pc, #384]	@ (8001cfc <HAL_ADC_Init+0x304>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff14 	bl	80019d0 <LL_ADC_INJ_IsConversionOngoing>
 8001ba8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d16d      	bne.n	8001c8c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d16a      	bne.n	8001c8c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bd2:	f023 0302 	bic.w	r3, r3, #2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d017      	beq.n	8001c18 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001bf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6911      	ldr	r1, [r2, #16]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c16:	e013      	b.n	8001c40 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d118      	bne.n	8001c7c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10c      	bne.n	8001cae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f023 010f 	bic.w	r1, r3, #15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	1e5a      	subs	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cac:	e007      	b.n	8001cbe <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 020f 	bic.w	r2, r2, #15
 8001cbc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cce:	e007      	b.n	8001ce0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ce0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	053e2d63 	.word	0x053e2d63
 8001cf4:	50000100 	.word	0x50000100
 8001cf8:	50000300 	.word	0x50000300
 8001cfc:	fff04007 	.word	0xfff04007

08001d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0b6      	sub	sp, #216	@ 0xd8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x22>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e3c8      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7b4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe3b 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 83ad 	bne.w	8002496 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fd51 	bl	80017f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe29 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 8001d58:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe35 	bl	80019d0 <LL_ADC_INJ_IsConversionOngoing>
 8001d66:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 81d9 	bne.w	8002126 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 81d4 	bne.w	8002126 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d86:	d10f      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7ff fd58 	bl	8001848 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fd12 	bl	80017ca <LL_ADC_SetSamplingTimeCommonConfig>
 8001da6:	e00e      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f7ff fd47 	bl	8001848 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd02 	bl	80017ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d022      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001df8:	f7ff fc5c 	bl	80016b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6919      	ldr	r1, [r3, #16]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f7ff fca8 	bl	800175e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x124>
 8001e1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x126>
 8001e24:	2300      	movs	r3, #0
 8001e26:	461a      	mov	r2, r3
 8001e28:	f7ff fcb4 	bl	8001794 <LL_ADC_SetOffsetSaturation>
 8001e2c:	e17b      	b.n	8002126 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fc61 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x15a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fc56 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	e01e      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x198>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fc4b 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e004      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1b0>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1e2>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ecc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d106      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc1a 	bl	8001728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fbfe 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x220>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fbf3 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	e01e      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x25e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fbe8 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x276>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e018      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x2a8>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e004      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbb7 	bl	8001728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fb9b 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x2e6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb90 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	e01e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x324>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2102      	movs	r1, #2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb85 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002008:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800200c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x33c>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	e016      	b.n	800206a <HAL_ADC_ConfigChannel+0x36a>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800204e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e004      	b.n	800206a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206a:	429a      	cmp	r2, r3
 800206c:	d106      	bne.n	800207c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	2102      	movs	r1, #2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb56 	bl	8001728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2103      	movs	r1, #3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fb3a 	bl	80016fc <LL_ADC_GetOffsetChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x3a8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2103      	movs	r1, #3
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fb2f 	bl	80016fc <LL_ADC_GetOffsetChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	e017      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x3d8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fb24 	bl	80016fc <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e003      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x3f0>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	e011      	b.n	8002114 <HAL_ADC_ConfigChannel+0x414>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80020fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002100:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800210c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2103      	movs	r1, #3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fb01 	bl	8001728 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fc2a 	bl	8001984 <LL_ADC_IsEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 8140 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	461a      	mov	r2, r3
 8002146:	f7ff fbab 	bl	80018a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4a8f      	ldr	r2, [pc, #572]	@ (800238c <HAL_ADC_ConfigChannel+0x68c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 8131 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10b      	bne.n	800217e <HAL_ADC_ConfigChannel+0x47e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	3301      	adds	r3, #1
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2b09      	cmp	r3, #9
 8002174:	bf94      	ite	ls
 8002176:	2301      	movls	r3, #1
 8002178:	2300      	movhi	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	e019      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x4b2>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800218c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800218e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e003      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800219a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d079      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x4d2>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	3301      	adds	r3, #1
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021d0:	e015      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4fe>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e003      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80021ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_ADC_ConfigChannel+0x51e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	3301      	adds	r3, #1
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	e017      	b.n	800224e <HAL_ADC_ConfigChannel+0x54e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800222c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800222e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800223a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	ea42 0103 	orr.w	r1, r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x574>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	3301      	adds	r3, #1
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	051b      	lsls	r3, r3, #20
 8002272:	e018      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x5a6>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e003      	b.n	8002298 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a6:	430b      	orrs	r3, r1
 80022a8:	e081      	b.n	80023ae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d107      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5c6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	3301      	adds	r3, #1
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c4:	e015      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5f2>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e003      	b.n	80022ea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x612>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	3301      	adds	r3, #1
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	e017      	b.n	8002342 <HAL_ADC_ConfigChannel+0x642>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	61fb      	str	r3, [r7, #28]
  return result;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	ea42 0103 	orr.w	r1, r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_ADC_ConfigChannel+0x66e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	3301      	adds	r3, #1
 800235a:	f003 021f 	and.w	r2, r3, #31
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	3b1e      	subs	r3, #30
 8002366:	051b      	lsls	r3, r3, #20
 8002368:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800236c:	e01e      	b.n	80023ac <HAL_ADC_ConfigChannel+0x6ac>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	613b      	str	r3, [r7, #16]
  return result;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e006      	b.n	8002398 <HAL_ADC_ConfigChannel+0x698>
 800238a:	bf00      	nop
 800238c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	051b      	lsls	r3, r3, #20
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7ff fa48 	bl	8001848 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_ADC_ConfigChannel+0x7bc>)
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d071      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c4:	483e      	ldr	r0, [pc, #248]	@ (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80023c6:	f7ff f967 	bl	8001698 <LL_ADC_GetCommonPathInternalCh>
 80023ca:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a3c      	ldr	r2, [pc, #240]	@ (80024c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x6e2>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3a      	ldr	r2, [pc, #232]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d127      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d121      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f6:	d157      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002400:	4619      	mov	r1, r3
 8002402:	482f      	ldr	r0, [pc, #188]	@ (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002404:	f7ff f935 	bl	8001672 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002408:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <HAL_ADC_ConfigChannel+0x7cc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	4a30      	ldr	r2, [pc, #192]	@ (80024d0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002422:	e002      	b.n	800242a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b01      	subs	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002430:	e03a      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a27      	ldr	r2, [pc, #156]	@ (80024d4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d113      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800243c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10d      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <HAL_ADC_ConfigChannel+0x7d8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02a      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800245a:	4619      	mov	r1, r3
 800245c:	4818      	ldr	r0, [pc, #96]	@ (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 800245e:	f7ff f908 	bl	8001672 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002462:	e021      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_ADC_ConfigChannel+0x7dc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d11c      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a16      	ldr	r2, [pc, #88]	@ (80024d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d011      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002488:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800248c:	4619      	mov	r1, r3
 800248e:	480c      	ldr	r0, [pc, #48]	@ (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002490:	f7ff f8ef 	bl	8001672 <LL_ADC_SetCommonPathInternalCh>
 8002494:	e008      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	37d8      	adds	r7, #216	@ 0xd8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	80080000 	.word	0x80080000
 80024c0:	50000300 	.word	0x50000300
 80024c4:	c3210000 	.word	0xc3210000
 80024c8:	90c00010 	.word	0x90c00010
 80024cc:	20000000 	.word	0x20000000
 80024d0:	053e2d63 	.word	0x053e2d63
 80024d4:	c7520000 	.word	0xc7520000
 80024d8:	50000100 	.word	0x50000100
 80024dc:	cb840000 	.word	0xcb840000

080024e0 <LL_ADC_IsEnabled>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_IsEnabled+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_IsEnabled+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_IsConversionOngoing>:
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d101      	bne.n	800251e <LL_ADC_REG_IsConversionOngoing+0x18>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b0a1      	sub	sp, #132	@ 0x84
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002546:	2302      	movs	r3, #2
 8002548:	e08b      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002552:	2300      	movs	r3, #0
 8002554:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002556:	2300      	movs	r3, #0
 8002558:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002562:	d102      	bne.n	800256a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002564:	4b41      	ldr	r3, [pc, #260]	@ (800266c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	e001      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e06a      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ffb9 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002594:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ffb3 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d14c      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d149      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025ac:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80025ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025ca:	035b      	lsls	r3, r3, #13
 80025cc:	430b      	orrs	r3, r1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025d8:	f7ff ff82 	bl	80024e0 <LL_ADC_IsEnabled>
 80025dc:	4604      	mov	r4, r0
 80025de:	4823      	ldr	r0, [pc, #140]	@ (800266c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025e0:	f7ff ff7e 	bl	80024e0 <LL_ADC_IsEnabled>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4323      	orrs	r3, r4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d133      	bne.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025f4:	f023 030f 	bic.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6892      	ldr	r2, [r2, #8]
 8002600:	430a      	orrs	r2, r1
 8002602:	431a      	orrs	r2, r3
 8002604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002606:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002608:	e024      	b.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800260a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002614:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002616:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800261a:	f7ff ff61 	bl	80024e0 <LL_ADC_IsEnabled>
 800261e:	4604      	mov	r4, r0
 8002620:	4812      	ldr	r0, [pc, #72]	@ (800266c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002622:	f7ff ff5d 	bl	80024e0 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	4323      	orrs	r3, r4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d112      	bne.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800262e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002636:	f023 030f 	bic.w	r3, r3, #15
 800263a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800263c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800263e:	e009      	b.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002652:	e000      	b.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002654:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800265e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002662:	4618      	mov	r0, r3
 8002664:	3784      	adds	r7, #132	@ 0x84
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	50000100 	.word	0x50000100
 8002670:	50000300 	.word	0x50000300

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	@ (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	@ (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	@ (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	@ 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	@ 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e0:	d301      	bcc.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <SysTick_Config+0x40>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	210f      	movs	r1, #15
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f7ff ff8e 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <SysTick_Config+0x40>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <SysTick_Config+0x40>)
 8002800:	2207      	movs	r2, #7
 8002802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff29 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002838:	f7ff ff40 	bl	80026bc <__NVIC_GetPriorityGrouping>
 800283c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff ff90 	bl	8002768 <NVIC_EncodePriority>
 8002848:	4602      	mov	r2, r0
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5f 	bl	8002714 <__NVIC_SetPriority>
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff33 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ffa4 	bl	80027d0 <SysTick_Config>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e014      	b.n	80028ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	791b      	ldrb	r3, [r3, #4]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe f875 	bl	80009a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	@ 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_DAC_ConfigChannel+0x1c>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e19e      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	795b      	ldrb	r3, [r3, #5]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_DAC_ConfigChannel+0x2c>
 8002900:	2302      	movs	r3, #2
 8002902:	e198      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x35e>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2202      	movs	r2, #2
 800290e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d17a      	bne.n	8002a0e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002918:	f7fe fe6a 	bl	80015f0 <HAL_GetTick>
 800291c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d13d      	bne.n	80029a0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002924:	e018      	b.n	8002958 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002926:	f7fe fe63 	bl	80015f0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d911      	bls.n	8002958 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e16e      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1df      	bne.n	8002926 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002970:	e020      	b.n	80029b4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002972:	f7fe fe3d 	bl	80015f0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d90f      	bls.n	80029a0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	da0a      	bge.n	80029a0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f043 0208 	orr.w	r2, r3, #8
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2203      	movs	r2, #3
 800299a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e14a      	b.n	8002c36 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	dbe3      	blt.n	8002972 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	ea02 0103 	and.w	r1, r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	409a      	lsls	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	21ff      	movs	r1, #255	@ 0xff
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	ea02 0103 	and.w	r1, r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d11d      	bne.n	8002a52 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	221f      	movs	r2, #31
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2e:	4013      	ands	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a46:	4313      	orrs	r3, r2
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a50:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2207      	movs	r2, #7
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
 8002a7a:	e00f      	b.n	8002a9c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d102      	bne.n	8002a8a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002a84:	2301      	movs	r3, #1
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	e008      	b.n	8002a9c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002a92:	2301      	movs	r3, #1
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	e001      	b.n	8002a9c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	6a3a      	ldr	r2, [r7, #32]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abe:	4013      	ands	r3, r2
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_DAC_ConfigChannel+0x1f8>
 8002aca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ace:	e000      	b.n	8002ad2 <HAL_DAC_ConfigChannel+0x1fa>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aea:	4013      	ands	r3, r2
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	795b      	ldrb	r3, [r3, #5]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_DAC_ConfigChannel+0x224>
 8002af6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002afa:	e000      	b.n	8002afe <HAL_DAC_ConfigChannel+0x226>
 8002afc:	2300      	movs	r3, #0
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d114      	bne.n	8002b3e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002b14:	f002 fdee 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8002b18:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4a48      	ldr	r2, [pc, #288]	@ (8002c40 <HAL_DAC_ConfigChannel+0x368>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d904      	bls.n	8002b2c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2a:	e00f      	b.n	8002b4c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4a45      	ldr	r2, [pc, #276]	@ (8002c44 <HAL_DAC_ConfigChannel+0x36c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d90a      	bls.n	8002b4a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	e006      	b.n	8002b4c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b44:	4313      	orrs	r3, r2
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b48:	e000      	b.n	8002b4c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002b4a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	22c0      	movs	r2, #192	@ 0xc0
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	400a      	ands	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	ea02 0103 	and.w	r1, r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3728      	adds	r7, #40	@ 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	09896800 	.word	0x09896800
 8002c44:	04c4b400 	.word	0x04c4b400

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c56:	e15a      	b.n	8002f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 814c 	beq.w	8002f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d005      	beq.n	8002c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d130      	bne.n	8002cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0201 	and.w	r2, r3, #1
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d017      	beq.n	8002d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d123      	bne.n	8002d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	6939      	ldr	r1, [r7, #16]
 8002d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	2203      	movs	r2, #3
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0203 	and.w	r2, r3, #3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80a6 	beq.w	8002f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8002f2c <HAL_GPIO_Init+0x2e4>)
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f2c <HAL_GPIO_Init+0x2e4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dc8:	4b58      	ldr	r3, [pc, #352]	@ (8002f2c <HAL_GPIO_Init+0x2e4>)
 8002dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd4:	4a56      	ldr	r2, [pc, #344]	@ (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dfe:	d01f      	beq.n	8002e40 <HAL_GPIO_Init+0x1f8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a4c      	ldr	r2, [pc, #304]	@ (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d019      	beq.n	8002e3c <HAL_GPIO_Init+0x1f4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8002f38 <HAL_GPIO_Init+0x2f0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_GPIO_Init+0x1f0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a4a      	ldr	r2, [pc, #296]	@ (8002f3c <HAL_GPIO_Init+0x2f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00d      	beq.n	8002e34 <HAL_GPIO_Init+0x1ec>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a49      	ldr	r2, [pc, #292]	@ (8002f40 <HAL_GPIO_Init+0x2f8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <HAL_GPIO_Init+0x1e8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a48      	ldr	r2, [pc, #288]	@ (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_GPIO_Init+0x1e4>
 8002e28:	2305      	movs	r3, #5
 8002e2a:	e00a      	b.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e2c:	2306      	movs	r3, #6
 8002e2e:	e008      	b.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e004      	b.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e002      	b.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e40:	2300      	movs	r3, #0
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	f002 0203 	and.w	r2, r2, #3
 8002e48:	0092      	lsls	r2, r2, #2
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e52:	4937      	ldr	r1, [pc, #220]	@ (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e60:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e84:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eae:	4a26      	ldr	r2, [pc, #152]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002eb4:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f02:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f ae9d 	bne.w	8002c58 <HAL_GPIO_Init+0x10>
  }
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	48000400 	.word	0x48000400
 8002f38:	48000800 	.word	0x48000800
 8002f3c:	48000c00 	.word	0x48000c00
 8002f40:	48001000 	.word	0x48001000
 8002f44:	48001400 	.word	0x48001400
 8002f48:	40010400 	.word	0x40010400

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08d      	b.n	80030aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fe28 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e006      	b.n	8003004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d108      	bne.n	800301e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e007      	b.n	800302e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800303c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69d9      	ldr	r1, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d138      	bne.n	800313a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e032      	b.n	800313c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2224      	movs	r2, #36	@ 0x24
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003104:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	d139      	bne.n	80031d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003168:	2302      	movs	r3, #2
 800316a:	e033      	b.n	80031d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	@ 0x24
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800319a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0c0      	b.n	8003374 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f008 fc48 	bl	800ba9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2203      	movs	r2, #3
 8003210:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f004 faa9 	bl	8007770 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e03e      	b.n	80032a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	3311      	adds	r3, #17
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	3310      	adds	r3, #16
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	3313      	adds	r3, #19
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	3320      	adds	r3, #32
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	3324      	adds	r3, #36	@ 0x24
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	3301      	adds	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3bb      	bcc.n	8003224 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e044      	b.n	800333c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3301      	adds	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	429a      	cmp	r2, r3
 8003344:	d3b5      	bcc.n	80032b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003352:	f004 fa28 	bl	80077a6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7a9b      	ldrb	r3, [r3, #10]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 fc42 	bl	8004bf6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_Start+0x16>
 800338e:	2302      	movs	r3, #2
 8003390:	e012      	b.n	80033b8 <HAL_PCD_Start+0x3c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 f9cf 	bl	8007742 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f006 fc91 	bl	8009cd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f006 fc96 	bl	8009cfe <USB_ReadInterrupts>
 80033d2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb06 	bl	80039f0 <PCD_EP_ISR_Handler>

    return;
 80033e4:	e110      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003402:	b292      	uxth	r2, r2
 8003404:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f008 fbd8 	bl	800bbbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800340e:	2100      	movs	r1, #0
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8fc 	bl	800360e <HAL_PCD_SetAddress>

    return;
 8003416:	e0f7      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003434:	b292      	uxth	r2, r2
 8003436:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800343a:	e0e5      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003458:	b292      	uxth	r2, r2
 800345a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800345e:	e0d3      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d034      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0204 	bic.w	r2, r2, #4
 800347c:	b292      	uxth	r2, r2
 800347e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0208 	bic.w	r2, r2, #8
 8003494:	b292      	uxth	r2, r2
 8003496:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f008 fd78 	bl	800bfa4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f008 fbbb 	bl	800bc30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034cc:	b292      	uxth	r2, r2
 80034ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034d2:	e099      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d027      	beq.n	800352e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0208 	orr.w	r2, r2, #8
 80034f0:	b292      	uxth	r2, r2
 80034f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003508:	b292      	uxth	r2, r2
 800350a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0204 	orr.w	r2, r2, #4
 8003520:	b292      	uxth	r2, r2
 8003522:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f008 fb68 	bl	800bbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800352c:	e06c      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d040      	beq.n	80035ba <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800354a:	b292      	uxth	r2, r2
 800354c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d12b      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0204 	orr.w	r2, r2, #4
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0208 	orr.w	r2, r2, #8
 8003584:	b292      	uxth	r2, r2
 8003586:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800359a:	b29b      	uxth	r3, r3
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035a8:	2101      	movs	r1, #1
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f008 fcfa 	bl	800bfa4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80035b0:	e02a      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f008 fb22 	bl	800bbfc <HAL_PCD_SuspendCallback>
    return;
 80035b8:	e026      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035d6:	b292      	uxth	r2, r2
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f008 fae0 	bl	800bba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80035e2:	e011      	b.n	8003608 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003600:	b292      	uxth	r2, r2
 8003602:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003606:	bf00      	nop
  }
}
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_PCD_SetAddress+0x1a>
 8003624:	2302      	movs	r3, #2
 8003626:	e012      	b.n	800364e <HAL_PCD_SetAddress+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f006 fb32 	bl	8009ca8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	4608      	mov	r0, r1
 8003660:	4611      	mov	r1, r2
 8003662:	461a      	mov	r2, r3
 8003664:	4603      	mov	r3, r0
 8003666:	70fb      	strb	r3, [r7, #3]
 8003668:	460b      	mov	r3, r1
 800366a:	803b      	strh	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003678:	2b00      	cmp	r3, #0
 800367a:	da0e      	bge.n	800369a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 0207 	and.w	r2, r3, #7
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	3310      	adds	r3, #16
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	705a      	strb	r2, [r3, #1]
 8003698:	e00e      	b.n	80036b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	f003 0207 	and.w	r2, r3, #7
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80036c4:	883b      	ldrh	r3, [r7, #0]
 80036c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	78ba      	ldrb	r2, [r7, #2]
 80036d2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036d4:	78bb      	ldrb	r3, [r7, #2]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d102      	bne.n	80036e0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_EP_Open+0x98>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e00e      	b.n	800370c <HAL_PCD_EP_Open+0xb6>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 f871 	bl	80077e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800370a:	7afb      	ldrb	r3, [r7, #11]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da0e      	bge.n	8003746 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 0207 	and.w	r2, r3, #7
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	3310      	adds	r3, #16
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	705a      	strb	r2, [r3, #1]
 8003744:	e00e      	b.n	8003764 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 0207 	and.w	r2, r3, #7
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_PCD_EP_Close+0x6a>
 800377a:	2302      	movs	r3, #2
 800377c:	e00e      	b.n	800379c <HAL_PCD_EP_Close+0x88>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	4618      	mov	r0, r3
 800378e:	f004 fbed 	bl	8007f6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	460b      	mov	r3, r1
 80037b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	f003 0207 	and.w	r2, r3, #7
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fda5 	bl	8008346 <USB_EPStartXfer>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 0207 	and.w	r2, r3, #7
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	440b      	add	r3, r1
 8003824:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003828:	681b      	ldr	r3, [r3, #0]
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	460b      	mov	r3, r1
 8003844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 0207 	and.w	r2, r3, #7
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3310      	adds	r3, #16
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2201      	movs	r2, #1
 8003880:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	b2da      	uxtb	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6979      	ldr	r1, [r7, #20]
 8003894:	4618      	mov	r0, r3
 8003896:	f004 fd56 	bl	8008346 <USB_EPStartXfer>

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	7912      	ldrb	r2, [r2, #4]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e03e      	b.n	8003940 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da0e      	bge.n	80038e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	f003 0207 	and.w	r2, r3, #7
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	3310      	adds	r3, #16
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	705a      	strb	r2, [r3, #1]
 80038e6:	e00c      	b.n	8003902 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_PCD_EP_SetStall+0x7e>
 800391e:	2302      	movs	r3, #2
 8003920:	e00e      	b.n	8003940 <HAL_PCD_EP_SetStall+0x9c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	f006 f8ba 	bl	8009aaa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	7912      	ldrb	r2, [r2, #4]
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e040      	b.n	80039e8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396a:	2b00      	cmp	r3, #0
 800396c:	da0e      	bge.n	800398c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 0207 	and.w	r2, r3, #7
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	3310      	adds	r3, #16
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	705a      	strb	r2, [r3, #1]
 800398a:	e00e      	b.n	80039aa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	f003 0207 	and.w	r2, r3, #7
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_PCD_EP_ClrStall+0x82>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e00e      	b.n	80039e8 <HAL_PCD_EP_ClrStall+0xa0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	4618      	mov	r0, r3
 80039da:	f006 f8b7 	bl	8009b4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b096      	sub	sp, #88	@ 0x58
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039f8:	e3ad      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a02:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003a14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 816f 	bne.w	8003cfc <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d14c      	bne.n	8003ac4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	81fb      	strh	r3, [r7, #14]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	89fb      	ldrh	r3, [r7, #14]
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3310      	adds	r3, #16
 8003a52:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	441a      	add	r2, r3
 8003a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f008 f86e 	bl	800bb6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7b1b      	ldrb	r3, [r3, #12]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 835c 	beq.w	8004156 <PCD_EP_ISR_Handler+0x766>
 8003a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 8357 	bne.w	8004156 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7b1b      	ldrb	r3, [r3, #12]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	731a      	strb	r2, [r3, #12]
 8003ac2:	e348      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aca:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ad6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d032      	beq.n	8003b48 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f006 f940 	bl	8009da2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b2e:	4013      	ands	r3, r2
 8003b30:	823b      	strh	r3, [r7, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	8a3a      	ldrh	r2, [r7, #16]
 8003b38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b3c:	b292      	uxth	r2, r2
 8003b3e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f007 ffe7 	bl	800bb14 <HAL_PCD_SetupStageCallback>
 8003b46:	e306      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f280 8302 	bge.w	8004156 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b5e:	4013      	ands	r3, r2
 8003b60:	83fb      	strh	r3, [r7, #30]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	8bfa      	ldrh	r2, [r7, #30]
 8003b68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d019      	beq.n	8003bd4 <PCD_EP_ISR_Handler+0x1e4>
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bae:	6959      	ldr	r1, [r3, #20]
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f006 f8f2 	bl	8009da2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	441a      	add	r2, r3
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003bcc:	2100      	movs	r1, #0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f007 ffb2 	bl	800bb38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003bde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003be2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 82b5 	bne.w	8004156 <PCD_EP_ISR_Handler+0x766>
 8003bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003bf0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bf8:	f000 82ad 	beq.w	8004156 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4413      	add	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	801a      	strh	r2, [r3, #0]
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <PCD_EP_ISR_Handler+0x25a>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	e039      	b.n	8003cbe <PCD_EP_ISR_Handler+0x2ce>
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c50:	d818      	bhi.n	8003c84 <PCD_EP_ISR_Handler+0x294>
 8003c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <PCD_EP_ISR_Handler+0x27c>
 8003c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c68:	3301      	adds	r3, #1
 8003c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	029b      	lsls	r3, r3, #10
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	801a      	strh	r2, [r3, #0]
 8003c82:	e01c      	b.n	8003cbe <PCD_EP_ISR_Handler+0x2ce>
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <PCD_EP_ISR_Handler+0x2ae>
 8003c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	029b      	lsls	r3, r3, #10
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4313      	orrs	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	827b      	strh	r3, [r7, #18]
 8003cd0:	8a7b      	ldrh	r3, [r7, #18]
 8003cd2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003cd6:	827b      	strh	r3, [r7, #18]
 8003cd8:	8a7b      	ldrh	r3, [r7, #18]
 8003cda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cde:	827b      	strh	r3, [r7, #18]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	8a7b      	ldrh	r3, [r7, #18]
 8003ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]
 8003cfa:	e22c      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f280 80f6 	bge.w	8003f06 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d30:	4013      	ands	r3, r2
 8003d32:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003d48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d4c:	b292      	uxth	r2, r2
 8003d4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d50:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d68:	7b1b      	ldrb	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d123      	bne.n	8003db6 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 808e 	beq.w	8003ebc <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	6959      	ldr	r1, [r3, #20]
 8003da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003daa:	88da      	ldrh	r2, [r3, #6]
 8003dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003db0:	f005 fff7 	bl	8009da2 <USB_ReadPMA>
 8003db4:	e082      	b.n	8003ebc <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db8:	78db      	ldrb	r3, [r3, #3]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d10a      	bne.n	8003dd4 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9d3 	bl	8004172 <HAL_PCD_EP_DB_Receive>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003dd2:	e073      	b.n	8003ebc <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dee:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d022      	beq.n	8003e78 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003e5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d02c      	beq.n	8003ebc <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	6959      	ldr	r1, [r3, #20]
 8003e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6c:	891a      	ldrh	r2, [r3, #8]
 8003e6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e72:	f005 ff96 	bl	8009da2 <USB_ReadPMA>
 8003e76:	e021      	b.n	8003ebc <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ea0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	6959      	ldr	r1, [r3, #20]
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb2:	895a      	ldrh	r2, [r3, #10]
 8003eb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003eb8:	f005 ff73 	bl	8009da2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ec4:	441a      	add	r2, r3
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ed2:	441a      	add	r2, r3
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <PCD_EP_ISR_Handler+0x4fc>
 8003ee0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d206      	bcs.n	8003efa <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f007 fe20 	bl	800bb38 <HAL_PCD_DataOutStageCallback>
 8003ef8:	e005      	b.n	8003f06 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f00:	4618      	mov	r0, r3
 8003f02:	f004 fa20 	bl	8008346 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8121 	beq.w	8004156 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f14:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	3310      	adds	r3, #16
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f66:	78db      	ldrb	r3, [r3, #3]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 80a2 	bne.w	80040b2 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f76:	7b1b      	ldrb	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8093 	beq.w	80040a4 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d046      	beq.n	8004018 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d126      	bne.n	8003fe0 <PCD_EP_ISR_Handler+0x5f0>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	4413      	add	r3, r2
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	00da      	lsls	r2, r3, #3
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	e061      	b.n	80040a4 <PCD_EP_ISR_Handler+0x6b4>
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d15d      	bne.n	80040a4 <PCD_EP_ISR_Handler+0x6b4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	4413      	add	r3, r2
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	00da      	lsls	r2, r3, #3
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	4413      	add	r3, r2
 800400a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2200      	movs	r2, #0
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e045      	b.n	80040a4 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800401e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d126      	bne.n	8004074 <PCD_EP_ISR_Handler+0x684>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403a:	4413      	add	r3, r2
 800403c:	637b      	str	r3, [r7, #52]	@ 0x34
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	00da      	lsls	r2, r3, #3
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	4413      	add	r3, r2
 8004048:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800404c:	633b      	str	r3, [r7, #48]	@ 0x30
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004058:	b29a      	uxth	r2, r3
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406c:	b29a      	uxth	r2, r3
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	e017      	b.n	80040a4 <PCD_EP_ISR_Handler+0x6b4>
 8004074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d113      	bne.n	80040a4 <PCD_EP_ISR_Handler+0x6b4>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004084:	b29b      	uxth	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408a:	4413      	add	r3, r2
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	00da      	lsls	r2, r3, #3
 8004094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004096:	4413      	add	r3, r2
 8004098:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800409c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	2200      	movs	r2, #0
 80040a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f007 fd5f 	bl	800bb6e <HAL_PCD_DataInStageCallback>
 80040b0:	e051      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80040b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d144      	bne.n	8004148 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d907      	bls.n	8004102 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040fa:	1ad2      	subs	r2, r2, r3
 80040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fe:	619a      	str	r2, [r3, #24]
 8004100:	e002      	b.n	8004108 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f007 fd29 	bl	800bb6e <HAL_PCD_DataInStageCallback>
 800411c:	e01b      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800411e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004126:	441a      	add	r2, r3
 8004128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004134:	441a      	add	r2, r3
 8004136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004138:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004140:	4618      	mov	r0, r3
 8004142:	f004 f900 	bl	8008346 <USB_EPStartXfer>
 8004146:	e006      	b.n	8004156 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004148:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800414c:	461a      	mov	r2, r3
 800414e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f917 	bl	8004384 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800415e:	b29b      	uxth	r3, r3
 8004160:	b21b      	sxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	f6ff ac49 	blt.w	80039fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3758      	adds	r7, #88	@ 0x58
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b088      	sub	sp, #32
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d07c      	beq.n	8004284 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	8b7b      	ldrh	r3, [r7, #26]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d306      	bcc.n	80041c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	8b7b      	ldrh	r3, [r7, #26]
 80041c0:	1ad2      	subs	r2, r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	619a      	str	r2, [r3, #24]
 80041c6:	e002      	b.n	80041ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d123      	bne.n	800421e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f0:	833b      	strh	r3, [r7, #24]
 80041f2:	8b3b      	ldrh	r3, [r7, #24]
 80041f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041f8:	833b      	strh	r3, [r7, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	8b3b      	ldrh	r3, [r7, #24]
 800420a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800420e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421a:	b29b      	uxth	r3, r3
 800421c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01f      	beq.n	8004268 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800423e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004242:	82fb      	strh	r3, [r7, #22]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	8afb      	ldrh	r3, [r7, #22]
 8004254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800425c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004260:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004264:	b29b      	uxth	r3, r3
 8004266:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004268:	8b7b      	ldrh	r3, [r7, #26]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8085 	beq.w	800437a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6959      	ldr	r1, [r3, #20]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	891a      	ldrh	r2, [r3, #8]
 800427c:	8b7b      	ldrh	r3, [r7, #26]
 800427e:	f005 fd90 	bl	8009da2 <USB_ReadPMA>
 8004282:	e07a      	b.n	800437a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800428c:	b29b      	uxth	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	4413      	add	r3, r2
 800429e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	8b7b      	ldrh	r3, [r7, #26]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d306      	bcc.n	80042c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	8b7b      	ldrh	r3, [r7, #26]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	619a      	str	r2, [r3, #24]
 80042c0:	e002      	b.n	80042c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d123      	bne.n	8004318 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ea:	83fb      	strh	r3, [r7, #30]
 80042ec:	8bfb      	ldrh	r3, [r7, #30]
 80042ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042f2:	83fb      	strh	r3, [r7, #30]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8bfb      	ldrh	r3, [r7, #30]
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d11f      	bne.n	8004362 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433c:	83bb      	strh	r3, [r7, #28]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	8bbb      	ldrh	r3, [r7, #28]
 800434e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004362:	8b7b      	ldrh	r3, [r7, #26]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6959      	ldr	r1, [r3, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	895a      	ldrh	r2, [r3, #10]
 8004374:	8b7b      	ldrh	r3, [r7, #26]
 8004376:	f005 fd14 	bl	8009da2 <USB_ReadPMA>
    }
  }

  return count;
 800437a:	8b7b      	ldrh	r3, [r7, #26]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b0a4      	sub	sp, #144	@ 0x90
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 81db 	beq.w	8004754 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d907      	bls.n	80043e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	619a      	str	r2, [r3, #24]
 80043e0:	e002      	b.n	80043e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 80b9 	bne.w	8004564 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d126      	bne.n	8004448 <HAL_PCD_EP_DB_Transmit+0xc4>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440e:	4413      	add	r3, r2
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	00da      	lsls	r2, r3, #3
 8004418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441a:	4413      	add	r3, r2
 800441c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442c:	b29a      	uxth	r2, r3
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004440:	b29a      	uxth	r2, r3
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e01a      	b.n	800447e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d116      	bne.n	800447e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004464:	4413      	add	r3, r2
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00da      	lsls	r2, r3, #3
 800446e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004470:	4413      	add	r3, r2
 8004472:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004476:	633b      	str	r3, [r7, #48]	@ 0x30
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	2200      	movs	r2, #0
 800447c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d126      	bne.n	80044da <HAL_PCD_EP_DB_Transmit+0x156>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	00da      	lsls	r2, r3, #3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044be:	b29a      	uxth	r2, r3
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	e017      	b.n	800450a <HAL_PCD_EP_DB_Transmit+0x186>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d113      	bne.n	800450a <HAL_PCD_EP_DB_Transmit+0x186>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	4413      	add	r3, r2
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00da      	lsls	r2, r3, #3
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	4413      	add	r3, r2
 80044fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2200      	movs	r2, #0
 8004508:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f007 fb2c 	bl	800bb6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 82fa 	beq.w	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453c:	82fb      	strh	r3, [r7, #22]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	441a      	add	r2, r3
 800454c:	8afb      	ldrh	r3, [r7, #22]
 800454e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800455a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455e:	b29b      	uxth	r3, r3
 8004560:	8013      	strh	r3, [r2, #0]
 8004562:	e2d8      	b.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d021      	beq.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004588:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f040 82ac 	bne.w	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80045c6:	441a      	add	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80045d4:	441a      	add	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6a1a      	ldr	r2, [r3, #32]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d30b      	bcc.n	80045fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	621a      	str	r2, [r3, #32]
 80045fc:	e017      	b.n	800462e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004606:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800460a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004616:	e00a      	b.n	800462e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2200      	movs	r2, #0
 800462c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d165      	bne.n	8004702 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004644:	b29b      	uxth	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800464a:	4413      	add	r3, r2
 800464c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	00da      	lsls	r2, r3, #3
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	4413      	add	r3, r2
 8004658:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800465c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800465e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004668:	b29a      	uxth	r2, r3
 800466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_PCD_EP_DB_Transmit+0x308>
 8004676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004684:	b29a      	uxth	r2, r3
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e057      	b.n	800473c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800468c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004690:	2b3e      	cmp	r3, #62	@ 0x3e
 8004692:	d818      	bhi.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x342>
 8004694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_PCD_EP_DB_Transmit+0x32a>
 80046a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046aa:	3301      	adds	r3, #1
 80046ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	029b      	lsls	r3, r3, #10
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4313      	orrs	r3, r2
 80046be:	b29a      	uxth	r2, r3
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	e03a      	b.n	800473c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80046c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x35c>
 80046da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046dc:	3b01      	subs	r3, #1
 80046de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4313      	orrs	r3, r2
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	e01c      	b.n	800473c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d118      	bne.n	800473c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471e:	4413      	add	r3, r2
 8004720:	647b      	str	r3, [r7, #68]	@ 0x44
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	00da      	lsls	r2, r3, #3
 8004728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472a:	4413      	add	r3, r2
 800472c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004730:	643b      	str	r3, [r7, #64]	@ 0x40
 8004732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004736:	b29a      	uxth	r2, r3
 8004738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800473a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6959      	ldr	r1, [r3, #20]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	891a      	ldrh	r2, [r3, #8]
 8004748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800474c:	b29b      	uxth	r3, r3
 800474e:	f005 fae6 	bl	8009d1e <USB_WritePMA>
 8004752:	e1e0      	b.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800475c:	b29b      	uxth	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	4413      	add	r3, r2
 800476e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004778:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004784:	429a      	cmp	r2, r3
 8004786:	d307      	bcc.n	8004798 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004790:	1ad2      	subs	r2, r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	619a      	str	r2, [r3, #24]
 8004796:	e002      	b.n	800479e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 80c0 	bne.w	8004928 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d126      	bne.n	80047fe <HAL_PCD_EP_DB_Transmit+0x47a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047be:	b29b      	uxth	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047c4:	4413      	add	r3, r2
 80047c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	00da      	lsls	r2, r3, #3
 80047ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047d0:	4413      	add	r3, r2
 80047d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047e6:	801a      	strh	r2, [r3, #0]
 80047e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	e01a      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d116      	bne.n	8004834 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	667b      	str	r3, [r7, #100]	@ 0x64
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800481a:	4413      	add	r3, r2
 800481c:	667b      	str	r3, [r7, #100]	@ 0x64
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	00da      	lsls	r2, r3, #3
 8004824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004826:	4413      	add	r3, r2
 8004828:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800482c:	663b      	str	r3, [r7, #96]	@ 0x60
 800482e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004830:	2200      	movs	r2, #0
 8004832:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	677b      	str	r3, [r7, #116]	@ 0x74
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	785b      	ldrb	r3, [r3, #1]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d12b      	bne.n	800489a <HAL_PCD_EP_DB_Transmit+0x516>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004850:	b29b      	uxth	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004856:	4413      	add	r3, r2
 8004858:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	00da      	lsls	r2, r3, #3
 8004860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004862:	4413      	add	r3, r2
 8004864:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800486c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004878:	b29a      	uxth	r2, r3
 800487a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004890:	b29a      	uxth	r2, r3
 8004892:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	e017      	b.n	80048ca <HAL_PCD_EP_DB_Transmit+0x546>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d113      	bne.n	80048ca <HAL_PCD_EP_DB_Transmit+0x546>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048b0:	4413      	add	r3, r2
 80048b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00da      	lsls	r2, r3, #3
 80048ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048bc:	4413      	add	r3, r2
 80048be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80048c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048c6:	2200      	movs	r2, #0
 80048c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4619      	mov	r1, r3
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f007 f94c 	bl	800bb6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 811a 	bne.w	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800491e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]
 8004926:	e0f6      	b.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800496a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800496e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800497c:	2b01      	cmp	r3, #1
 800497e:	f040 80ca 	bne.w	8004b16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800498a:	441a      	add	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004998:	441a      	add	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d30b      	bcc.n	80049c2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	621a      	str	r2, [r3, #32]
 80049c0:	e017      	b.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80049ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80049ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80049da:	e00a      	b.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2200      	movs	r2, #0
 80049e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d165      	bne.n	8004acc <HAL_PCD_EP_DB_Transmit+0x748>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a14:	4413      	add	r3, r2
 8004a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	00da      	lsls	r2, r3, #3
 8004a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8004a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	e054      	b.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a5c:	d818      	bhi.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8004a72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a74:	3301      	adds	r3, #1
 8004a76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e037      	b.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x726>
 8004aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e019      	b.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d115      	bne.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae2:	4413      	add	r3, r2
 8004ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004af4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6959      	ldr	r1, [r3, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	895a      	ldrh	r2, [r3, #10]
 8004b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f005 f904 	bl	8009d1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b30:	82bb      	strh	r3, [r7, #20]
 8004b32:	8abb      	ldrh	r3, [r7, #20]
 8004b34:	f083 0310 	eor.w	r3, r3, #16
 8004b38:	82bb      	strh	r3, [r7, #20]
 8004b3a:	8abb      	ldrh	r3, [r7, #20]
 8004b3c:	f083 0320 	eor.w	r3, r3, #32
 8004b40:	82bb      	strh	r3, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	8abb      	ldrh	r3, [r7, #20]
 8004b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3790      	adds	r7, #144	@ 0x90
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	897b      	ldrh	r3, [r7, #10]
 8004b90:	f003 0207 	and.w	r2, r3, #7
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e009      	b.n	8004bba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ba6:	897a      	ldrh	r2, [r7, #10]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004bba:	893b      	ldrh	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	80da      	strh	r2, [r3, #6]
 8004bce:	e00b      	b.n	8004be8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d141      	bne.n	8004cde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c66:	d131      	bne.n	8004ccc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c68:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c6e:	4a46      	ldr	r2, [pc, #280]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c78:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c80:	4a41      	ldr	r2, [pc, #260]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c88:	4b40      	ldr	r3, [pc, #256]	@ (8004d8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2232      	movs	r2, #50	@ 0x32
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	4a3f      	ldr	r2, [pc, #252]	@ (8004d90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	0c9b      	lsrs	r3, r3, #18
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c9e:	e002      	b.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca6:	4b38      	ldr	r3, [pc, #224]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb2:	d102      	bne.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f2      	bne.n	8004ca0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cba:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d158      	bne.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e057      	b.n	8004d7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cdc:	e04d      	b.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce4:	d141      	bne.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce6:	4b28      	ldr	r3, [pc, #160]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf2:	d131      	bne.n	8004d58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf4:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cfa:	4a23      	ldr	r2, [pc, #140]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d04:	4b20      	ldr	r3, [pc, #128]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2232      	movs	r2, #50	@ 0x32
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	0c9b      	lsrs	r3, r3, #18
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2a:	e002      	b.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d32:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3e:	d102      	bne.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d46:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d52:	d112      	bne.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e011      	b.n	8004d7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d68:	e007      	b.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d6a:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d72:	4a05      	ldr	r2, [pc, #20]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	431bde83 	.word	0x431bde83

08004d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e2fe      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d075      	beq.n	8004e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db2:	4b97      	ldr	r3, [pc, #604]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dbc:	4b94      	ldr	r3, [pc, #592]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x3e>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d002      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x44>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d10b      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05b      	beq.n	8004e9c <HAL_RCC_OscConfig+0x108>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d157      	bne.n	8004e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e2d9      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df8:	d106      	bne.n	8004e08 <HAL_RCC_OscConfig+0x74>
 8004dfa:	4b85      	ldr	r3, [pc, #532]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a84      	ldr	r2, [pc, #528]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e01d      	b.n	8004e44 <HAL_RCC_OscConfig+0xb0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x98>
 8004e12:	4b7f      	ldr	r3, [pc, #508]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a7e      	ldr	r2, [pc, #504]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7b      	ldr	r2, [pc, #492]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0xb0>
 8004e2c:	4b78      	ldr	r3, [pc, #480]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a77      	ldr	r2, [pc, #476]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b75      	ldr	r3, [pc, #468]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a74      	ldr	r2, [pc, #464]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fc fbd0 	bl	80015f0 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7fc fbcc 	bl	80015f0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	@ 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e29e      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e66:	4b6a      	ldr	r3, [pc, #424]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0xc0>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fc fbbc 	bl	80015f0 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fc fbb8 	bl	80015f0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e28a      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e8e:	4b60      	ldr	r3, [pc, #384]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0xe8>
 8004e9a:	e000      	b.n	8004e9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d075      	beq.n	8004f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eaa:	4b59      	ldr	r3, [pc, #356]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb4:	4b56      	ldr	r3, [pc, #344]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b0c      	cmp	r3, #12
 8004ec2:	d102      	bne.n	8004eca <HAL_RCC_OscConfig+0x136>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d002      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x13c>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d11f      	bne.n	8004f10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x154>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e25d      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b49      	ldr	r3, [pc, #292]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	4946      	ldr	r1, [pc, #280]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004efc:	4b45      	ldr	r3, [pc, #276]	@ (8005014 <HAL_RCC_OscConfig+0x280>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fc fb29 	bl	8001558 <HAL_InitTick>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d043      	beq.n	8004f94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e249      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d023      	beq.n	8004f60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f18:	4b3d      	ldr	r3, [pc, #244]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fc fb64 	bl	80015f0 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2c:	f7fc fb60 	bl	80015f0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e232      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f3e:	4b34      	ldr	r3, [pc, #208]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b31      	ldr	r3, [pc, #196]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	061b      	lsls	r3, r3, #24
 8004f58:	492d      	ldr	r1, [pc, #180]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
 8004f5e:	e01a      	b.n	8004f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f60:	4b2b      	ldr	r3, [pc, #172]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fb40 	bl	80015f0 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fc fb3c 	bl	80015f0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e20e      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f86:	4b22      	ldr	r3, [pc, #136]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x1e0>
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d041      	beq.n	8005026 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01c      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004faa:	4b19      	ldr	r3, [pc, #100]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fb0:	4a17      	ldr	r2, [pc, #92]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fc fb19 	bl	80015f0 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc2:	f7fc fb15 	bl	80015f0 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e1e7      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ef      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x22e>
 8004fe2:	e020      	b.n	8005026 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fea:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <HAL_RCC_OscConfig+0x27c>)
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fc fafc 	bl	80015f0 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ffa:	e00d      	b.n	8005018 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffc:	f7fc faf8 	bl	80015f0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d906      	bls.n	8005018 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e1ca      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000
 8005014:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005018:	4b8c      	ldr	r3, [pc, #560]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ea      	bne.n	8004ffc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80a6 	beq.w	8005180 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005034:	2300      	movs	r3, #0
 8005036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005038:	4b84      	ldr	r3, [pc, #528]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_OscConfig+0x2b4>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <HAL_RCC_OscConfig+0x2b6>
 8005048:	2300      	movs	r3, #0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	4b7f      	ldr	r3, [pc, #508]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005052:	4a7e      	ldr	r2, [pc, #504]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005058:	6593      	str	r3, [r2, #88]	@ 0x58
 800505a:	4b7c      	ldr	r3, [pc, #496]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506a:	4b79      	ldr	r3, [pc, #484]	@ (8005250 <HAL_RCC_OscConfig+0x4bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d118      	bne.n	80050a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005076:	4b76      	ldr	r3, [pc, #472]	@ (8005250 <HAL_RCC_OscConfig+0x4bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a75      	ldr	r2, [pc, #468]	@ (8005250 <HAL_RCC_OscConfig+0x4bc>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7fc fab5 	bl	80015f0 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508a:	f7fc fab1 	bl	80015f0 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e183      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509c:	4b6c      	ldr	r3, [pc, #432]	@ (8005250 <HAL_RCC_OscConfig+0x4bc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d108      	bne.n	80050c2 <HAL_RCC_OscConfig+0x32e>
 80050b0:	4b66      	ldr	r3, [pc, #408]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b6:	4a65      	ldr	r2, [pc, #404]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050c0:	e024      	b.n	800510c <HAL_RCC_OscConfig+0x378>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d110      	bne.n	80050ec <HAL_RCC_OscConfig+0x358>
 80050ca:	4b60      	ldr	r3, [pc, #384]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d0:	4a5e      	ldr	r2, [pc, #376]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050d2:	f043 0304 	orr.w	r3, r3, #4
 80050d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050da:	4b5c      	ldr	r3, [pc, #368]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e0:	4a5a      	ldr	r2, [pc, #360]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050ea:	e00f      	b.n	800510c <HAL_RCC_OscConfig+0x378>
 80050ec:	4b57      	ldr	r3, [pc, #348]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	4a56      	ldr	r2, [pc, #344]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050fc:	4b53      	ldr	r3, [pc, #332]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005102:	4a52      	ldr	r2, [pc, #328]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fc fa6c 	bl	80015f0 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	e00a      	b.n	8005132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fc fa68 	bl	80015f0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e138      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005132:	4b46      	ldr	r3, [pc, #280]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ed      	beq.n	800511c <HAL_RCC_OscConfig+0x388>
 8005140:	e015      	b.n	800516e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fc fa55 	bl	80015f0 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc fa51 	bl	80015f0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e121      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005160:	4b3a      	ldr	r3, [pc, #232]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1ed      	bne.n	800514a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005174:	4b35      	ldr	r3, [pc, #212]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005178:	4a34      	ldr	r2, [pc, #208]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d03c      	beq.n	8005206 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01c      	beq.n	80051ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005194:	4b2d      	ldr	r3, [pc, #180]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800519a:	4a2c      	ldr	r2, [pc, #176]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fc fa24 	bl	80015f0 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ac:	f7fc fa20 	bl	80015f0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0f2      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051be:	4b23      	ldr	r3, [pc, #140]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80051c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0ef      	beq.n	80051ac <HAL_RCC_OscConfig+0x418>
 80051cc:	e01b      	b.n	8005206 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051ce:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80051d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051d4:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fc fa07 	bl	80015f0 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051e6:	f7fc fa03 	bl	80015f0 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0d5      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051f8:	4b14      	ldr	r3, [pc, #80]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 80051fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ef      	bne.n	80051e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80c9 	beq.w	80053a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005210:	4b0e      	ldr	r3, [pc, #56]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b0c      	cmp	r3, #12
 800521a:	f000 8083 	beq.w	8005324 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d15e      	bne.n	80052e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b09      	ldr	r3, [pc, #36]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a08      	ldr	r2, [pc, #32]	@ (800524c <HAL_RCC_OscConfig+0x4b8>)
 800522c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc f9dd 	bl	80015f0 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005238:	e00c      	b.n	8005254 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fc f9d9 	bl	80015f0 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d905      	bls.n	8005254 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e0ab      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
 800524c:	40021000 	.word	0x40021000
 8005250:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005254:	4b55      	ldr	r3, [pc, #340]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ec      	bne.n	800523a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005260:	4b52      	ldr	r3, [pc, #328]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	4b52      	ldr	r3, [pc, #328]	@ (80053b0 <HAL_RCC_OscConfig+0x61c>)
 8005266:	4013      	ands	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6a11      	ldr	r1, [r2, #32]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005270:	3a01      	subs	r2, #1
 8005272:	0112      	lsls	r2, r2, #4
 8005274:	4311      	orrs	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800527a:	0212      	lsls	r2, r2, #8
 800527c:	4311      	orrs	r1, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005282:	0852      	lsrs	r2, r2, #1
 8005284:	3a01      	subs	r2, #1
 8005286:	0552      	lsls	r2, r2, #21
 8005288:	4311      	orrs	r1, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	3a01      	subs	r2, #1
 8005292:	0652      	lsls	r2, r2, #25
 8005294:	4311      	orrs	r1, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800529a:	06d2      	lsls	r2, r2, #27
 800529c:	430a      	orrs	r2, r1
 800529e:	4943      	ldr	r1, [pc, #268]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a4:	4b41      	ldr	r3, [pc, #260]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a40      	ldr	r2, [pc, #256]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b0:	4b3e      	ldr	r3, [pc, #248]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a3d      	ldr	r2, [pc, #244]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fc f998 	bl	80015f0 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fc f994 	bl	80015f0 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e066      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d6:	4b35      	ldr	r3, [pc, #212]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x530>
 80052e2:	e05e      	b.n	80053a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fc f97e 	bl	80015f0 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f8:	f7fc f97a 	bl	80015f0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e04c      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800530a:	4b28      	ldr	r3, [pc, #160]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005316:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	4924      	ldr	r1, [pc, #144]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 800531c:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_RCC_OscConfig+0x620>)
 800531e:	4013      	ands	r3, r2
 8005320:	60cb      	str	r3, [r1, #12]
 8005322:	e03e      	b.n	80053a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e039      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005330:	4b1e      	ldr	r3, [pc, #120]	@ (80053ac <HAL_RCC_OscConfig+0x618>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0203 	and.w	r2, r3, #3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	429a      	cmp	r2, r3
 8005342:	d12c      	bne.n	800539e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	3b01      	subs	r3, #1
 8005350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d123      	bne.n	800539e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005362:	429a      	cmp	r2, r3
 8005364:	d11b      	bne.n	800539e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d113      	bne.n	800539e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d109      	bne.n	800539e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	3b01      	subs	r3, #1
 8005398:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d001      	beq.n	80053a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	019f800c 	.word	0x019f800c
 80053b4:	feeefffc 	.word	0xfeeefffc

080053b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e11e      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d0:	4b91      	ldr	r3, [pc, #580]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d910      	bls.n	8005400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b8e      	ldr	r3, [pc, #568]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 020f 	bic.w	r2, r3, #15
 80053e6:	498c      	ldr	r1, [pc, #560]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e106      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d073      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d129      	bne.n	8005468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005414:	4b81      	ldr	r3, [pc, #516]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0f4      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005424:	f000 f99e 	bl	8005764 <RCC_GetSysClockFreqFromPLLSource>
 8005428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4a7c      	ldr	r2, [pc, #496]	@ (8005620 <HAL_RCC_ClockConfig+0x268>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d93f      	bls.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005432:	4b7a      	ldr	r3, [pc, #488]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005446:	2b00      	cmp	r3, #0
 8005448:	d033      	beq.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d12f      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005452:	4b72      	ldr	r3, [pc, #456]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800545a:	4a70      	ldr	r2, [pc, #448]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 800545c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e024      	b.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d107      	bne.n	8005480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005470:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0c6      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005480:	4b66      	ldr	r3, [pc, #408]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0be      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005490:	f000 f8ce 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8005494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4a61      	ldr	r2, [pc, #388]	@ (8005620 <HAL_RCC_ClockConfig+0x268>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d909      	bls.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800549e:	4b5f      	ldr	r3, [pc, #380]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054a6:	4a5d      	ldr	r2, [pc, #372]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80054a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b2:	4b5a      	ldr	r3, [pc, #360]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4957      	ldr	r1, [pc, #348]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fc f894 	bl	80015f0 <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fc f890 	bl	80015f0 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e095      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b4e      	ldr	r3, [pc, #312]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 020c 	and.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1eb      	bne.n	80054cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800550c:	4b43      	ldr	r3, [pc, #268]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4a42      	ldr	r2, [pc, #264]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005524:	4b3d      	ldr	r3, [pc, #244]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800552c:	4a3b      	ldr	r2, [pc, #236]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 800552e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4b39      	ldr	r3, [pc, #228]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4936      	ldr	r1, [pc, #216]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
 8005546:	e008      	b.n	800555a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b80      	cmp	r3, #128	@ 0x80
 800554c:	d105      	bne.n	800555a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800554e:	4b33      	ldr	r3, [pc, #204]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4a32      	ldr	r2, [pc, #200]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 8005554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800555a:	4b2f      	ldr	r3, [pc, #188]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d21d      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005568:	4b2b      	ldr	r3, [pc, #172]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 020f 	bic.w	r2, r3, #15
 8005570:	4929      	ldr	r1, [pc, #164]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005578:	f7fc f83a 	bl	80015f0 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	e00a      	b.n	8005596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005580:	f7fc f836 	bl	80015f0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e03b      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b20      	ldr	r3, [pc, #128]	@ (8005618 <HAL_RCC_ClockConfig+0x260>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1ed      	bne.n	8005580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b0:	4b1a      	ldr	r3, [pc, #104]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4917      	ldr	r1, [pc, #92]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ce:	4b13      	ldr	r3, [pc, #76]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	490f      	ldr	r1, [pc, #60]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055e2:	f000 f825 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <HAL_RCC_ClockConfig+0x264>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	490c      	ldr	r1, [pc, #48]	@ (8005624 <HAL_RCC_ClockConfig+0x26c>)
 80055f4:	5ccb      	ldrb	r3, [r1, r3]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005628 <HAL_RCC_ClockConfig+0x270>)
 8005600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005602:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <HAL_RCC_ClockConfig+0x274>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fb ffa6 	bl	8001558 <HAL_InitTick>
 800560c:	4603      	mov	r3, r0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40022000 	.word	0x40022000
 800561c:	40021000 	.word	0x40021000
 8005620:	04c4b400 	.word	0x04c4b400
 8005624:	0800d0ec 	.word	0x0800d0ec
 8005628:	20000000 	.word	0x20000000
 800562c:	20000004 	.word	0x20000004

08005630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005636:	4b2c      	ldr	r3, [pc, #176]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b04      	cmp	r3, #4
 8005640:	d102      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005642:	4b2a      	ldr	r3, [pc, #168]	@ (80056ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e047      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005648:	4b27      	ldr	r3, [pc, #156]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d102      	bne.n	800565a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005654:	4b26      	ldr	r3, [pc, #152]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	e03e      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800565a:	4b23      	ldr	r3, [pc, #140]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d136      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005666:	4b20      	ldr	r3, [pc, #128]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005670:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3301      	adds	r3, #1
 800567c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d10c      	bne.n	800569e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005684:	4a1a      	ldr	r2, [pc, #104]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	4a16      	ldr	r2, [pc, #88]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800568e:	68d2      	ldr	r2, [r2, #12]
 8005690:	0a12      	lsrs	r2, r2, #8
 8005692:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800569e:	4a13      	ldr	r2, [pc, #76]	@ (80056ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	4a10      	ldr	r2, [pc, #64]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a8:	68d2      	ldr	r2, [r2, #12]
 80056aa:	0a12      	lsrs	r2, r2, #8
 80056ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
      break;
 80056b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b8:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	0e5b      	lsrs	r3, r3, #25
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	e001      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056d8:	693b      	ldr	r3, [r7, #16]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <HAL_RCC_GetHCLKFreq+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005710:	f7ff fff0 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4904      	ldr	r1, [pc, #16]	@ (8005734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40021000 	.word	0x40021000
 8005734:	0800d0fc 	.word	0x0800d0fc

08005738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800573c:	f7ff ffda 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b06      	ldr	r3, [pc, #24]	@ (800575c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0adb      	lsrs	r3, r3, #11
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4904      	ldr	r1, [pc, #16]	@ (8005760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000
 8005760:	0800d0fc 	.word	0x0800d0fc

08005764 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800576a:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005774:	4b1b      	ldr	r3, [pc, #108]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b03      	cmp	r3, #3
 8005786:	d10c      	bne.n	80057a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005788:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	4a14      	ldr	r2, [pc, #80]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005792:	68d2      	ldr	r2, [r2, #12]
 8005794:	0a12      	lsrs	r2, r2, #8
 8005796:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	617b      	str	r3, [r7, #20]
    break;
 80057a0:	e00c      	b.n	80057bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057a2:	4a12      	ldr	r2, [pc, #72]	@ (80057ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057aa:	4a0e      	ldr	r2, [pc, #56]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ac:	68d2      	ldr	r2, [r2, #12]
 80057ae:	0a12      	lsrs	r2, r2, #8
 80057b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
    break;
 80057ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	0e5b      	lsrs	r3, r3, #25
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	3301      	adds	r3, #1
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057d6:	687b      	ldr	r3, [r7, #4]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40021000 	.word	0x40021000
 80057e8:	007a1200 	.word	0x007a1200
 80057ec:	00f42400 	.word	0x00f42400

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f8:	2300      	movs	r3, #0
 80057fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057fc:	2300      	movs	r3, #0
 80057fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8098 	beq.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005812:	4b43      	ldr	r3, [pc, #268]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	4b40      	ldr	r3, [pc, #256]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	4a3f      	ldr	r2, [pc, #252]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005828:	6593      	str	r3, [r2, #88]	@ 0x58
 800582a:	4b3d      	ldr	r3, [pc, #244]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005836:	2301      	movs	r3, #1
 8005838:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800583a:	4b3a      	ldr	r3, [pc, #232]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a39      	ldr	r2, [pc, #228]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005844:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005846:	f7fb fed3 	bl	80015f0 <HAL_GetTick>
 800584a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800584c:	e009      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584e:	f7fb fecf 	bl	80015f0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d902      	bls.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	74fb      	strb	r3, [r7, #19]
        break;
 8005860:	e005      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005862:	4b30      	ldr	r3, [pc, #192]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0ef      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d159      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005874:	4b2a      	ldr	r3, [pc, #168]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01e      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	d019      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005890:	4b23      	ldr	r3, [pc, #140]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800589c:	4b20      	ldr	r3, [pc, #128]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058bc:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d016      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fb fe8f 	bl	80015f0 <HAL_GetTick>
 80058d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d4:	e00b      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f7fb fe8b 	bl	80015f0 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d902      	bls.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	74fb      	strb	r3, [r7, #19]
            break;
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ec      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005902:	4b07      	ldr	r3, [pc, #28]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	4903      	ldr	r1, [pc, #12]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005918:	e008      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	74bb      	strb	r3, [r7, #18]
 800591e:	e005      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005920:	40021000 	.word	0x40021000
 8005924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800592c:	7c7b      	ldrb	r3, [r7, #17]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d105      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005932:	4ba6      	ldr	r3, [pc, #664]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005936:	4aa5      	ldr	r2, [pc, #660]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800593c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594a:	4ba0      	ldr	r3, [pc, #640]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f023 0203 	bic.w	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	499c      	ldr	r1, [pc, #624]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800596c:	4b97      	ldr	r3, [pc, #604]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005972:	f023 020c 	bic.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4994      	ldr	r1, [pc, #592]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800598e:	4b8f      	ldr	r3, [pc, #572]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005994:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	498b      	ldr	r1, [pc, #556]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059b0:	4b86      	ldr	r3, [pc, #536]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	4983      	ldr	r1, [pc, #524]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059d2:	4b7e      	ldr	r3, [pc, #504]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	497a      	ldr	r1, [pc, #488]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059f4:	4b75      	ldr	r3, [pc, #468]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	4972      	ldr	r1, [pc, #456]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a16:	4b6d      	ldr	r3, [pc, #436]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4969      	ldr	r1, [pc, #420]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a38:	4b64      	ldr	r3, [pc, #400]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	4961      	ldr	r1, [pc, #388]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	4958      	ldr	r1, [pc, #352]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d015      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a7c:	4b53      	ldr	r3, [pc, #332]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	4950      	ldr	r1, [pc, #320]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aa6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d015      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ab4:	4b45      	ldr	r3, [pc, #276]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	4942      	ldr	r1, [pc, #264]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ade:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005aec:	4b37      	ldr	r3, [pc, #220]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	4934      	ldr	r1, [pc, #208]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a2e      	ldr	r2, [pc, #184]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d015      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b24:	4b29      	ldr	r3, [pc, #164]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b32:	4926      	ldr	r1, [pc, #152]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b42:	d105      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b44:	4b21      	ldr	r3, [pc, #132]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a20      	ldr	r2, [pc, #128]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	4918      	ldr	r1, [pc, #96]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7c:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a12      	ldr	r2, [pc, #72]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d015      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b94:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	490a      	ldr	r1, [pc, #40]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000

08005bd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d070      	beq.n	8005cc4 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fb f980 	bl	8000efc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d04f      	beq.n	8005cb2 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	22ca      	movs	r2, #202	@ 0xca
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2253      	movs	r2, #83	@ 0x53
 8005c20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f878 	bl	8005d18 <RTC_EnterInitMode>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d126      	bne.n	8005c80 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c44:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6999      	ldr	r1, [r3, #24]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68d9      	ldr	r1, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	041a      	lsls	r2, r3, #16
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f884 	bl	8005d84 <RTC_ExitInitMode>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d110      	bne.n	8005ca8 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	22ff      	movs	r2, #255	@ 0xff
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cb0:	e001      	b.n	8005cb6 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8005d14 <HAL_RTC_WaitForSynchro+0x44>)
 8005cde:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ce0:	f7fb fc86 	bl	80015f0 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005ce6:	e009      	b.n	8005cfc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ce8:	f7fb fc82 	bl	80015f0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cf6:	d901      	bls.n	8005cfc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e007      	b.n	8005d0c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0ee      	beq.n	8005ce8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	0001005f 	.word	0x0001005f

08005d18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d123      	bne.n	8005d7a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d42:	f7fb fc55 	bl	80015f0 <HAL_GetTick>
 8005d46:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d48:	e00d      	b.n	8005d66 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d4a:	f7fb fc51 	bl	80015f0 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d58:	d905      	bls.n	8005d66 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <RTC_EnterInitMode+0x62>
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d1e7      	bne.n	8005d4a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10c      	bne.n	8005dc8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ff8e 	bl	8005cd0 <HAL_RTC_WaitForSynchro>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d022      	beq.n	8005e00 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	73fb      	strb	r3, [r7, #15]
 8005dc6:	e01b      	b.n	8005e00 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0220 	bic.w	r2, r2, #32
 8005dd6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ff79 	bl	8005cd0 <HAL_RTC_WaitForSynchro>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2203      	movs	r2, #3
 8005de8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0220 	orr.w	r2, r2, #32
 8005dfe:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e062      	b.n	8005eea <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	22ca      	movs	r2, #202	@ 0xca
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2253      	movs	r2, #83	@ 0x53
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e52:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d120      	bne.n	8005ea4 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 8005e62:	f7fb fbc5 	bl	80015f0 <HAL_GetTick>
 8005e66:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005e68:	e015      	b.n	8005e96 <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6a:	f7fb fbc1 	bl	80015f0 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e78:	d90d      	bls.n	8005e96 <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	22ff      	movs	r2, #255	@ 0xff
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2203      	movs	r2, #3
 8005e86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e029      	b.n	8005eea <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0e2      	beq.n	8005e6a <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f023 0107 	bic.w	r1, r3, #7
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ece:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	22ff      	movs	r2, #255	@ 0xff
 8005ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e09d      	b.n	8006040 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d108      	bne.n	8005f1e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f14:	d009      	beq.n	8005f2a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	61da      	str	r2, [r3, #28]
 8005f1c:	e005      	b.n	8005f2a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fb f853 	bl	8000ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f6a:	d902      	bls.n	8005f72 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e002      	b.n	8005f78 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f80:	d007      	beq.n	8005f92 <HAL_SPI_Init+0xa0>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd4:	ea42 0103 	orr.w	r1, r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	f003 0204 	and.w	r2, r3, #4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800600e:	ea42 0103 	orr.w	r1, r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800602e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006056:	2301      	movs	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_SPI_TransmitReceive+0x26>
 800606a:	2302      	movs	r3, #2
 800606c:	e20a      	b.n	8006484 <HAL_SPI_TransmitReceive+0x43c>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006076:	f7fb fabb 	bl	80015f0 <HAL_GetTick>
 800607a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006082:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006092:	7efb      	ldrb	r3, [r7, #27]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d00e      	beq.n	80060b6 <HAL_SPI_TransmitReceive+0x6e>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800609e:	d106      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x66>
 80060a8:	7efb      	ldrb	r3, [r7, #27]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d003      	beq.n	80060b6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
 80060b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80060b4:	e1e0      	b.n	8006478 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x80>
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80060ce:	e1d3      	b.n	8006478 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d003      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2205      	movs	r2, #5
 80060e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	887a      	ldrh	r2, [r7, #2]
 800610a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	887a      	ldrh	r2, [r7, #2]
 8006110:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006126:	d802      	bhi.n	800612e <HAL_SPI_TransmitReceive+0xe6>
 8006128:	8a3b      	ldrh	r3, [r7, #16]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d908      	bls.n	8006140 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	e007      	b.n	8006150 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800614e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d007      	beq.n	800616e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006176:	f240 8081 	bls.w	800627c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x140>
 8006182:	8a7b      	ldrh	r3, [r7, #18]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d16d      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006198:	1c9a      	adds	r2, r3, #2
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ac:	e05a      	b.n	8006264 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d11b      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1ac>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x1ac>
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d113      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	881a      	ldrh	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d11c      	bne.n	800623c <HAL_SPI_TransmitReceive+0x1f4>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d016      	beq.n	800623c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	b292      	uxth	r2, r2
 800621a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006238:	2301      	movs	r3, #1
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800623c:	f7fb f9d8 	bl	80015f0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006248:	429a      	cmp	r2, r3
 800624a:	d80b      	bhi.n	8006264 <HAL_SPI_TransmitReceive+0x21c>
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d007      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006262:	e109      	b.n	8006478 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d19f      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x166>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d199      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x166>
 800627a:	e0e3      	b.n	8006444 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_SPI_TransmitReceive+0x244>
 8006284:	8a7b      	ldrh	r3, [r7, #18]
 8006286:	2b01      	cmp	r3, #1
 8006288:	f040 80cf 	bne.w	800642a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d912      	bls.n	80062bc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	881a      	ldrh	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	1c9a      	adds	r2, r3, #2
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b02      	subs	r3, #2
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062ba:	e0b6      	b.n	800642a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e2:	e0a2      	b.n	800642a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d134      	bne.n	800635c <HAL_SPI_TransmitReceive+0x314>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d02f      	beq.n	800635c <HAL_SPI_TransmitReceive+0x314>
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d12c      	bne.n	800635c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d912      	bls.n	8006332 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b02      	subs	r3, #2
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006330:	e012      	b.n	8006358 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b01      	cmp	r3, #1
 8006368:	d148      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x3b4>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d042      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d923      	bls.n	80063ca <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	b292      	uxth	r2, r2
 800638e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b02      	subs	r3, #2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d81f      	bhi.n	80063f8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063c6:	605a      	str	r2, [r3, #4]
 80063c8:	e016      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f103 020c 	add.w	r2, r3, #12
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063f8:	2301      	movs	r3, #1
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063fc:	f7fb f8f8 	bl	80015f0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006408:	429a      	cmp	r2, r3
 800640a:	d803      	bhi.n	8006414 <HAL_SPI_TransmitReceive+0x3cc>
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d102      	bne.n	800641a <HAL_SPI_TransmitReceive+0x3d2>
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	2b00      	cmp	r3, #0
 8006418:	d107      	bne.n	800642a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006428:	e026      	b.n	8006478 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	f47f af57 	bne.w	80062e4 <HAL_SPI_TransmitReceive+0x29c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	f47f af50 	bne.w	80062e4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f93d 	bl	80066c8 <SPI_EndRxTxTransaction>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646e:	e003      	b.n	8006478 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006484:	4618      	mov	r0, r3
 8006486:	3728      	adds	r7, #40	@ 0x28
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800649c:	f7fb f8a8 	bl	80015f0 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4413      	add	r3, r2
 80064aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064ac:	f7fb f8a0 	bl	80015f0 <HAL_GetTick>
 80064b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064b2:	4b39      	ldr	r3, [pc, #228]	@ (8006598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	015b      	lsls	r3, r3, #5
 80064b8:	0d1b      	lsrs	r3, r3, #20
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c2:	e054      	b.n	800656e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d050      	beq.n	800656e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064cc:	f7fb f890 	bl	80015f0 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d902      	bls.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d13d      	bne.n	800655e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064fa:	d111      	bne.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006504:	d004      	beq.n	8006510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800650e:	d107      	bne.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800651e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006528:	d10f      	bne.n	800654a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e017      	b.n	800658e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	3b01      	subs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	429a      	cmp	r2, r3
 800658a:	d19b      	bne.n	80064c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000000 	.word	0x20000000

0800659c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	@ 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065ae:	f7fb f81f 	bl	80015f0 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	4413      	add	r3, r2
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80065be:	f7fb f817 	bl	80015f0 <HAL_GetTick>
 80065c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065cc:	4b3d      	ldr	r3, [pc, #244]	@ (80066c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	00da      	lsls	r2, r3, #3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	0d1b      	lsrs	r3, r3, #20
 80065dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065e4:	e060      	b.n	80066a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065ec:	d107      	bne.n	80065fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d050      	beq.n	80066a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006606:	f7fa fff3 	bl	80015f0 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006612:	429a      	cmp	r2, r3
 8006614:	d902      	bls.n	800661c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d13d      	bne.n	8006698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800662a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006634:	d111      	bne.n	800665a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800663e:	d004      	beq.n	800664a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006648:	d107      	bne.n	800665a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006658:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006662:	d10f      	bne.n	8006684 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006682:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e010      	b.n	80066ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d196      	bne.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	@ 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000000 	.word	0x20000000

080066c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff ff5b 	bl	800659c <SPI_WaitFifoStateUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f0:	f043 0220 	orr.w	r2, r3, #32
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e027      	b.n	800674c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2200      	movs	r2, #0
 8006704:	2180      	movs	r1, #128	@ 0x80
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fec0 	bl	800648c <SPI_WaitFlagStateUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e014      	b.n	800674c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff ff34 	bl	800659c <SPI_WaitFifoStateUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673e:	f043 0220 	orr.w	r2, r3, #32
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e000      	b.n	800674c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e042      	b.n	80067ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676c:	2b00      	cmp	r3, #0
 800676e:	d106      	bne.n	800677e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fa fe51 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2224      	movs	r2, #36	@ 0x24
 8006782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 faf4 	bl	8006d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f825 	bl	80067f4 <UART_SetConfig>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e01b      	b.n	80067ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb73 	bl	8006ed0 <UART_CheckIdleState>
 80067ea:	4603      	mov	r3, r0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f8:	b08c      	sub	sp, #48	@ 0x30
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	431a      	orrs	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	431a      	orrs	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	4313      	orrs	r3, r2
 800681a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4bab      	ldr	r3, [pc, #684]	@ (8006ad0 <UART_SetConfig+0x2dc>)
 8006824:	4013      	ands	r3, r2
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800682c:	430b      	orrs	r3, r1
 800682e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4aa0      	ldr	r2, [pc, #640]	@ (8006ad4 <UART_SetConfig+0x2e0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800685c:	4313      	orrs	r3, r2
 800685e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800686a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006874:	430b      	orrs	r3, r1
 8006876:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	f023 010f 	bic.w	r1, r3, #15
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a91      	ldr	r2, [pc, #580]	@ (8006ad8 <UART_SetConfig+0x2e4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d125      	bne.n	80068e4 <UART_SetConfig+0xf0>
 8006898:	4b90      	ldr	r3, [pc, #576]	@ (8006adc <UART_SetConfig+0x2e8>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d81a      	bhi.n	80068dc <UART_SetConfig+0xe8>
 80068a6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <UART_SetConfig+0xb8>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e0d6      	b.n	8006a72 <UART_SetConfig+0x27e>
 80068c4:	2302      	movs	r3, #2
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e0d2      	b.n	8006a72 <UART_SetConfig+0x27e>
 80068cc:	2304      	movs	r3, #4
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e0ce      	b.n	8006a72 <UART_SetConfig+0x27e>
 80068d4:	2308      	movs	r3, #8
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e0ca      	b.n	8006a72 <UART_SetConfig+0x27e>
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e0c6      	b.n	8006a72 <UART_SetConfig+0x27e>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a7d      	ldr	r2, [pc, #500]	@ (8006ae0 <UART_SetConfig+0x2ec>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d138      	bne.n	8006960 <UART_SetConfig+0x16c>
 80068ee:	4b7b      	ldr	r3, [pc, #492]	@ (8006adc <UART_SetConfig+0x2e8>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f4:	f003 030c 	and.w	r3, r3, #12
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	d82d      	bhi.n	8006958 <UART_SetConfig+0x164>
 80068fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <UART_SetConfig+0x110>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006939 	.word	0x08006939
 8006908:	08006959 	.word	0x08006959
 800690c:	08006959 	.word	0x08006959
 8006910:	08006959 	.word	0x08006959
 8006914:	08006949 	.word	0x08006949
 8006918:	08006959 	.word	0x08006959
 800691c:	08006959 	.word	0x08006959
 8006920:	08006959 	.word	0x08006959
 8006924:	08006941 	.word	0x08006941
 8006928:	08006959 	.word	0x08006959
 800692c:	08006959 	.word	0x08006959
 8006930:	08006959 	.word	0x08006959
 8006934:	08006951 	.word	0x08006951
 8006938:	2300      	movs	r3, #0
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693e:	e098      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006946:	e094      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e090      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e08c      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695e:	e088      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a5f      	ldr	r2, [pc, #380]	@ (8006ae4 <UART_SetConfig+0x2f0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d125      	bne.n	80069b6 <UART_SetConfig+0x1c2>
 800696a:	4b5c      	ldr	r3, [pc, #368]	@ (8006adc <UART_SetConfig+0x2e8>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006970:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006974:	2b30      	cmp	r3, #48	@ 0x30
 8006976:	d016      	beq.n	80069a6 <UART_SetConfig+0x1b2>
 8006978:	2b30      	cmp	r3, #48	@ 0x30
 800697a:	d818      	bhi.n	80069ae <UART_SetConfig+0x1ba>
 800697c:	2b20      	cmp	r3, #32
 800697e:	d00a      	beq.n	8006996 <UART_SetConfig+0x1a2>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d814      	bhi.n	80069ae <UART_SetConfig+0x1ba>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <UART_SetConfig+0x19a>
 8006988:	2b10      	cmp	r3, #16
 800698a:	d008      	beq.n	800699e <UART_SetConfig+0x1aa>
 800698c:	e00f      	b.n	80069ae <UART_SetConfig+0x1ba>
 800698e:	2300      	movs	r3, #0
 8006990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006994:	e06d      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006996:	2302      	movs	r3, #2
 8006998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699c:	e069      	b.n	8006a72 <UART_SetConfig+0x27e>
 800699e:	2304      	movs	r3, #4
 80069a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a4:	e065      	b.n	8006a72 <UART_SetConfig+0x27e>
 80069a6:	2308      	movs	r3, #8
 80069a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ac:	e061      	b.n	8006a72 <UART_SetConfig+0x27e>
 80069ae:	2310      	movs	r3, #16
 80069b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b4:	e05d      	b.n	8006a72 <UART_SetConfig+0x27e>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a4b      	ldr	r2, [pc, #300]	@ (8006ae8 <UART_SetConfig+0x2f4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d125      	bne.n	8006a0c <UART_SetConfig+0x218>
 80069c0:	4b46      	ldr	r3, [pc, #280]	@ (8006adc <UART_SetConfig+0x2e8>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80069cc:	d016      	beq.n	80069fc <UART_SetConfig+0x208>
 80069ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d0:	d818      	bhi.n	8006a04 <UART_SetConfig+0x210>
 80069d2:	2b80      	cmp	r3, #128	@ 0x80
 80069d4:	d00a      	beq.n	80069ec <UART_SetConfig+0x1f8>
 80069d6:	2b80      	cmp	r3, #128	@ 0x80
 80069d8:	d814      	bhi.n	8006a04 <UART_SetConfig+0x210>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <UART_SetConfig+0x1f0>
 80069de:	2b40      	cmp	r3, #64	@ 0x40
 80069e0:	d008      	beq.n	80069f4 <UART_SetConfig+0x200>
 80069e2:	e00f      	b.n	8006a04 <UART_SetConfig+0x210>
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ea:	e042      	b.n	8006a72 <UART_SetConfig+0x27e>
 80069ec:	2302      	movs	r3, #2
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	e03e      	b.n	8006a72 <UART_SetConfig+0x27e>
 80069f4:	2304      	movs	r3, #4
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e03a      	b.n	8006a72 <UART_SetConfig+0x27e>
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e036      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0a:	e032      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a30      	ldr	r2, [pc, #192]	@ (8006ad4 <UART_SetConfig+0x2e0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d12a      	bne.n	8006a6c <UART_SetConfig+0x278>
 8006a16:	4b31      	ldr	r3, [pc, #196]	@ (8006adc <UART_SetConfig+0x2e8>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a24:	d01a      	beq.n	8006a5c <UART_SetConfig+0x268>
 8006a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a2a:	d81b      	bhi.n	8006a64 <UART_SetConfig+0x270>
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a30:	d00c      	beq.n	8006a4c <UART_SetConfig+0x258>
 8006a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a36:	d815      	bhi.n	8006a64 <UART_SetConfig+0x270>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <UART_SetConfig+0x250>
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a40:	d008      	beq.n	8006a54 <UART_SetConfig+0x260>
 8006a42:	e00f      	b.n	8006a64 <UART_SetConfig+0x270>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e012      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e00e      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e00a      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e006      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e002      	b.n	8006a72 <UART_SetConfig+0x27e>
 8006a6c:	2310      	movs	r3, #16
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a17      	ldr	r2, [pc, #92]	@ (8006ad4 <UART_SetConfig+0x2e0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	f040 80a8 	bne.w	8006bce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d834      	bhi.n	8006af0 <UART_SetConfig+0x2fc>
 8006a86:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <UART_SetConfig+0x298>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006abf 	.word	0x08006abf
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006af1 	.word	0x08006af1
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006ac7 	.word	0x08006ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fe fe2c 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8006ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ab6:	e021      	b.n	8006afc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <UART_SetConfig+0x2f8>)
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006abc:	e01e      	b.n	8006afc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fe fdb7 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8006ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac4:	e01a      	b.n	8006afc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006acc:	e016      	b.n	8006afc <UART_SetConfig+0x308>
 8006ace:	bf00      	nop
 8006ad0:	cfff69f3 	.word	0xcfff69f3
 8006ad4:	40008000 	.word	0x40008000
 8006ad8:	40013800 	.word	0x40013800
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	40004400 	.word	0x40004400
 8006ae4:	40004800 	.word	0x40004800
 8006ae8:	40004c00 	.word	0x40004c00
 8006aec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006afa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 812a 	beq.w	8006d58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	4a9e      	ldr	r2, [pc, #632]	@ (8006d84 <UART_SetConfig+0x590>)
 8006b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d305      	bcc.n	8006b34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d903      	bls.n	8006b3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b3a:	e10d      	b.n	8006d58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	2200      	movs	r2, #0
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	60fa      	str	r2, [r7, #12]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	4a8e      	ldr	r2, [pc, #568]	@ (8006d84 <UART_SetConfig+0x590>)
 8006b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2200      	movs	r2, #0
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5e:	f7f9 fbaf 	bl	80002c0 <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	020b      	lsls	r3, r1, #8
 8006b74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b78:	0202      	lsls	r2, r0, #8
 8006b7a:	6979      	ldr	r1, [r7, #20]
 8006b7c:	6849      	ldr	r1, [r1, #4]
 8006b7e:	0849      	lsrs	r1, r1, #1
 8006b80:	2000      	movs	r0, #0
 8006b82:	460c      	mov	r4, r1
 8006b84:	4605      	mov	r5, r0
 8006b86:	eb12 0804 	adds.w	r8, r2, r4
 8006b8a:	eb43 0905 	adc.w	r9, r3, r5
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	469a      	mov	sl, r3
 8006b96:	4693      	mov	fp, r2
 8006b98:	4652      	mov	r2, sl
 8006b9a:	465b      	mov	r3, fp
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 fb8e 	bl	80002c0 <__aeabi_uldivmod>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4613      	mov	r3, r2
 8006baa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bb2:	d308      	bcc.n	8006bc6 <UART_SetConfig+0x3d2>
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bba:	d204      	bcs.n	8006bc6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a3a      	ldr	r2, [r7, #32]
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	e0c8      	b.n	8006d58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bcc:	e0c4      	b.n	8006d58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd6:	d167      	bne.n	8006ca8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d828      	bhi.n	8006c32 <UART_SetConfig+0x43e>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <UART_SetConfig+0x3f4>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c33 	.word	0x08006c33
 8006bf8:	08006c23 	.word	0x08006c23
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c33 	.word	0x08006c33
 8006c08:	08006c2b 	.word	0x08006c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fe fd7e 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c12:	e014      	b.n	8006c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fe fd90 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 8006c18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c1a:	e010      	b.n	8006c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8006d88 <UART_SetConfig+0x594>)
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c20:	e00d      	b.n	8006c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c22:	f7fe fd05 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8006c26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c28:	e009      	b.n	8006c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c30:	e005      	b.n	8006c3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8089 	beq.w	8006d58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8006d84 <UART_SetConfig+0x590>)
 8006c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c58:	005a      	lsls	r2, r3, #1
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	441a      	add	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	d916      	bls.n	8006ca0 <UART_SetConfig+0x4ac>
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c78:	d212      	bcs.n	8006ca0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f023 030f 	bic.w	r3, r3, #15
 8006c82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	8bfb      	ldrh	r3, [r7, #30]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	8bfa      	ldrh	r2, [r7, #30]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e05b      	b.n	8006d58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ca6:	e057      	b.n	8006d58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d828      	bhi.n	8006d02 <UART_SetConfig+0x50e>
 8006cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <UART_SetConfig+0x4c4>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fe fd16 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8006ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ce2:	e014      	b.n	8006d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fe fd28 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b26      	ldr	r3, [pc, #152]	@ (8006d88 <UART_SetConfig+0x594>)
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe fc9d 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8006cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d021      	beq.n	8006d58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	4a1a      	ldr	r2, [pc, #104]	@ (8006d84 <UART_SetConfig+0x590>)
 8006d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	441a      	add	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d909      	bls.n	8006d52 <UART_SetConfig+0x55e>
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d44:	d205      	bcs.n	8006d52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e002      	b.n	8006d58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3730      	adds	r7, #48	@ 0x30
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d82:	bf00      	nop
 8006d84:	0800d104 	.word	0x0800d104
 8006d88:	00f42400 	.word	0x00f42400

08006d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e8a:	d10a      	bne.n	8006ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b098      	sub	sp, #96	@ 0x60
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ee0:	f7fa fb86 	bl	80015f0 <HAL_GetTick>
 8006ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d12f      	bne.n	8006f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f88e 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d022      	beq.n	8006f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e6      	bne.n	8006f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e063      	b.n	800701c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d149      	bne.n	8006ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f857 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d03c      	beq.n	8006ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	623b      	str	r3, [r7, #32]
   return(result);
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fce:	61fa      	str	r2, [r7, #28]
 8006fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	617b      	str	r3, [r7, #20]
   return(result);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e012      	b.n	800701c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3758      	adds	r7, #88	@ 0x58
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007034:	e04f      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d04b      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fa fad7 	bl	80015f0 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <UART_WaitOnFlagUntilTimeout+0x30>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e04e      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d037      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	d034      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b40      	cmp	r3, #64	@ 0x40
 8007070:	d031      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b08      	cmp	r3, #8
 800707e:	d110      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2208      	movs	r2, #8
 8007086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f838 	bl	80070fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2208      	movs	r2, #8
 8007092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e029      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070b0:	d111      	bne.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f81e 	bl	80070fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e00f      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d0a0      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070fe:	b480      	push	{r7}
 8007100:	b095      	sub	sp, #84	@ 0x54
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007124:	643b      	str	r3, [r7, #64]	@ 0x40
 8007126:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800712a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	61fb      	str	r3, [r7, #28]
   return(result);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e3      	bne.n	8007138 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d118      	bne.n	80071aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	60bb      	str	r3, [r7, #8]
   return(result);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f023 0310 	bic.w	r3, r3, #16
 800718c:	647b      	str	r3, [r7, #68]	@ 0x44
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6979      	ldr	r1, [r7, #20]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	613b      	str	r3, [r7, #16]
   return(result);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e6      	bne.n	8007178 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071be:	bf00      	nop
 80071c0:	3754      	adds	r7, #84	@ 0x54
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80071dc:	2302      	movs	r3, #2
 80071de:	e027      	b.n	8007230 <HAL_UARTEx_DisableFifoMode+0x66>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	@ 0x24
 80071ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800720e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007250:	2302      	movs	r3, #2
 8007252:	e02d      	b.n	80072b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2224      	movs	r2, #36	@ 0x24
 8007260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f84f 	bl	8007334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e02d      	b.n	800732c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2224      	movs	r2, #36	@ 0x24
 80072dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f811 	bl	8007334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007354:	e031      	b.n	80073ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007356:	2308      	movs	r3, #8
 8007358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800735a:	2308      	movs	r3, #8
 800735c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	0e5b      	lsrs	r3, r3, #25
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	0f5b      	lsrs	r3, r3, #29
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	7b3a      	ldrb	r2, [r7, #12]
 8007382:	4911      	ldr	r1, [pc, #68]	@ (80073c8 <UARTEx_SetNbDataToProcess+0x94>)
 8007384:	5c8a      	ldrb	r2, [r1, r2]
 8007386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800738a:	7b3a      	ldrb	r2, [r7, #12]
 800738c:	490f      	ldr	r1, [pc, #60]	@ (80073cc <UARTEx_SetNbDataToProcess+0x98>)
 800738e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007390:	fb93 f3f2 	sdiv	r3, r3, r2
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	7b7a      	ldrb	r2, [r7, #13]
 80073a0:	4909      	ldr	r1, [pc, #36]	@ (80073c8 <UARTEx_SetNbDataToProcess+0x94>)
 80073a2:	5c8a      	ldrb	r2, [r1, r2]
 80073a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a8:	7b7a      	ldrb	r2, [r7, #13]
 80073aa:	4908      	ldr	r1, [pc, #32]	@ (80073cc <UARTEx_SetNbDataToProcess+0x98>)
 80073ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	0800d11c 	.word	0x0800d11c
 80073cc:	0800d124 	.word	0x0800d124

080073d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b08b      	sub	sp, #44	@ 0x2c
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	fa93 f3a3 	rbit	r3, r3
 80073ea:	613b      	str	r3, [r7, #16]
  return result;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80073f6:	2320      	movs	r3, #32
 80073f8:	e003      	b.n	8007402 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	fab3 f383 	clz	r3, r3
 8007400:	b2db      	uxtb	r3, r3
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	2103      	movs	r1, #3
 8007406:	fa01 f303 	lsl.w	r3, r1, r3
 800740a:	43db      	mvns	r3, r3
 800740c:	401a      	ands	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	fa93 f3a3 	rbit	r3, r3
 8007418:	61fb      	str	r3, [r7, #28]
  return result;
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007424:	2320      	movs	r3, #32
 8007426:	e003      	b.n	8007430 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	fab3 f383 	clz	r3, r3
 800742e:	b2db      	uxtb	r3, r3
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	431a      	orrs	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]
}
 800743e:	bf00      	nop
 8007440:	372c      	adds	r7, #44	@ 0x2c
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	43db      	mvns	r3, r3
 800745e:	401a      	ands	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	431a      	orrs	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800747a:	b480      	push	{r7}
 800747c:	b08b      	sub	sp, #44	@ 0x2c
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	fa93 f3a3 	rbit	r3, r3
 8007494:	613b      	str	r3, [r7, #16]
  return result;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80074a0:	2320      	movs	r3, #32
 80074a2:	e003      	b.n	80074ac <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	fab3 f383 	clz	r3, r3
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	2103      	movs	r1, #3
 80074b0:	fa01 f303 	lsl.w	r3, r1, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	401a      	ands	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	fa93 f3a3 	rbit	r3, r3
 80074c2:	61fb      	str	r3, [r7, #28]
  return result;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80074ce:	2320      	movs	r3, #32
 80074d0:	e003      	b.n	80074da <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	fab3 f383 	clz	r3, r3
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	431a      	orrs	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80074e8:	bf00      	nop
 80074ea:	372c      	adds	r7, #44	@ 0x2c
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b08b      	sub	sp, #44	@ 0x2c
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	fa93 f3a3 	rbit	r3, r3
 800750e:	613b      	str	r3, [r7, #16]
  return result;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800751a:	2320      	movs	r3, #32
 800751c:	e003      	b.n	8007526 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	fab3 f383 	clz	r3, r3
 8007524:	b2db      	uxtb	r3, r3
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	2103      	movs	r1, #3
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	401a      	ands	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	fa93 f3a3 	rbit	r3, r3
 800753c:	61fb      	str	r3, [r7, #28]
  return result;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007548:	2320      	movs	r3, #32
 800754a:	e003      	b.n	8007554 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	fab3 f383 	clz	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	60da      	str	r2, [r3, #12]
}
 8007562:	bf00      	nop
 8007564:	372c      	adds	r7, #44	@ 0x2c
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800756e:	b480      	push	{r7}
 8007570:	b08b      	sub	sp, #44	@ 0x2c
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1a      	ldr	r2, [r3, #32]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	fa93 f3a3 	rbit	r3, r3
 8007588:	613b      	str	r3, [r7, #16]
  return result;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007594:	2320      	movs	r3, #32
 8007596:	e003      	b.n	80075a0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	fab3 f383 	clz	r3, r3
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	210f      	movs	r1, #15
 80075a4:	fa01 f303 	lsl.w	r3, r1, r3
 80075a8:	43db      	mvns	r3, r3
 80075aa:	401a      	ands	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	fa93 f3a3 	rbit	r3, r3
 80075b6:	61fb      	str	r3, [r7, #28]
  return result;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80075c2:	2320      	movs	r3, #32
 80075c4:	e003      	b.n	80075ce <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	fab3 f383 	clz	r3, r3
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	431a      	orrs	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80075dc:	bf00      	nop
 80075de:	372c      	adds	r7, #44	@ 0x2c
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b08b      	sub	sp, #44	@ 0x2c
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	fa93 f3a3 	rbit	r3, r3
 8007604:	613b      	str	r3, [r7, #16]
  return result;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007610:	2320      	movs	r3, #32
 8007612:	e003      	b.n	800761c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	fab3 f383 	clz	r3, r3
 800761a:	b2db      	uxtb	r3, r3
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	210f      	movs	r1, #15
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	401a      	ands	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	fa93 f3a3 	rbit	r3, r3
 8007634:	61fb      	str	r3, [r7, #28]
  return result;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007640:	2320      	movs	r3, #32
 8007642:	e003      	b.n	800764c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	fab3 f383 	clz	r3, r3
 800764a:	b2db      	uxtb	r3, r3
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	fa01 f303 	lsl.w	r3, r1, r3
 8007654:	431a      	orrs	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800765a:	bf00      	nop
 800765c:	372c      	adds	r7, #44	@ 0x2c
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b088      	sub	sp, #32
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	fa93 f3a3 	rbit	r3, r3
 800767c:	60fb      	str	r3, [r7, #12]
  return result;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <LL_GPIO_Init+0x26>
    return 32U;
 8007688:	2320      	movs	r3, #32
 800768a:	e003      	b.n	8007694 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	fab3 f383 	clz	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007696:	e048      	b.n	800772a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	2101      	movs	r1, #1
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	fa01 f303 	lsl.w	r3, r1, r3
 80076a4:	4013      	ands	r3, r2
 80076a6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03a      	beq.n	8007724 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d003      	beq.n	80076be <LL_GPIO_Init+0x58>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d10e      	bne.n	80076dc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	461a      	mov	r2, r3
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fed7 	bl	800747a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff feb7 	bl	800744a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	461a      	mov	r2, r3
 80076e2:	69b9      	ldr	r1, [r7, #24]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff ff05 	bl	80074f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d111      	bne.n	8007716 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2bff      	cmp	r3, #255	@ 0xff
 80076f6:	d807      	bhi.n	8007708 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	461a      	mov	r2, r3
 80076fe:	69b9      	ldr	r1, [r7, #24]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff ff34 	bl	800756e <LL_GPIO_SetAFPin_0_7>
 8007706:	e006      	b.n	8007716 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	461a      	mov	r2, r3
 800770e:	69b9      	ldr	r1, [r7, #24]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff ff69 	bl	80075e8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	461a      	mov	r2, r3
 800771c:	69b9      	ldr	r1, [r7, #24]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fe56 	bl	80073d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3301      	adds	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1af      	bne.n	8007698 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007752:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007756:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007778:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800777c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	b29b      	uxth	r3, r3
 800778a:	43db      	mvns	r3, r3
 800778c:	b29b      	uxth	r3, r3
 800778e:	4013      	ands	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	1d3b      	adds	r3, r7, #4
 80077b0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b09d      	sub	sp, #116	@ 0x74
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	78db      	ldrb	r3, [r3, #3]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d81f      	bhi.n	8007856 <USB_ActivateEndpoint+0x72>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <USB_ActivateEndpoint+0x38>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007849 	.word	0x08007849
 8007824:	0800785f 	.word	0x0800785f
 8007828:	0800783b 	.word	0x0800783b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800782c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007834:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007838:	e012      	b.n	8007860 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800783a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800783e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007842:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007846:	e00b      	b.n	8007860 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007848:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800784c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007850:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007854:	e004      	b.n	8007860 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800785c:	e000      	b.n	8007860 <USB_ActivateEndpoint+0x7c>
      break;
 800785e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	441a      	add	r2, r3
 800786a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800786e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800787a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787e:	b29b      	uxth	r3, r3
 8007880:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	b21b      	sxth	r3, r3
 8007892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800789a:	b21a      	sxth	r2, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b21b      	sxth	r3, r3
 80078a2:	4313      	orrs	r3, r2
 80078a4:	b21b      	sxth	r3, r3
 80078a6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80078b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	7b1b      	ldrb	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f040 8178 	bne.w	8007bc6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 8084 	beq.w	80079e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	4413      	add	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	00da      	lsls	r2, r3, #3
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	88db      	ldrh	r3, [r3, #6]
 8007908:	085b      	lsrs	r3, r3, #1
 800790a:	b29b      	uxth	r3, r3
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	827b      	strh	r3, [r7, #18]
 8007922:	8a7b      	ldrh	r3, [r7, #18]
 8007924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01b      	beq.n	8007964 <USB_ActivateEndpoint+0x180>
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800793e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007942:	823b      	strh	r3, [r7, #16]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	441a      	add	r2, r3
 800794e:	8a3b      	ldrh	r3, [r7, #16]
 8007950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800795c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007960:	b29b      	uxth	r3, r3
 8007962:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	78db      	ldrb	r3, [r3, #3]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d020      	beq.n	80079ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800797e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007982:	81bb      	strh	r3, [r7, #12]
 8007984:	89bb      	ldrh	r3, [r7, #12]
 8007986:	f083 0320 	eor.w	r3, r3, #32
 800798a:	81bb      	strh	r3, [r7, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	441a      	add	r2, r3
 8007996:	89bb      	ldrh	r3, [r7, #12]
 8007998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800799c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	8013      	strh	r3, [r2, #0]
 80079ac:	e2d5      	b.n	8007f5a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079c4:	81fb      	strh	r3, [r7, #14]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	441a      	add	r2, r3
 80079d0:	89fb      	ldrh	r3, [r7, #14]
 80079d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]
 80079e6:	e2b8      	b.n	8007f5a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	4413      	add	r3, r2
 80079fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	00da      	lsls	r2, r3, #3
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	88db      	ldrh	r3, [r3, #6]
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	4413      	add	r3, r2
 8007a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	00da      	lsls	r2, r3, #3
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	4413      	add	r3, r2
 8007a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <USB_ActivateEndpoint+0x28a>
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e039      	b.n	8007ae2 <USB_ActivateEndpoint+0x2fe>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a74:	d818      	bhi.n	8007aa8 <USB_ActivateEndpoint+0x2c4>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <USB_ActivateEndpoint+0x2ac>
 8007a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e01c      	b.n	8007ae2 <USB_ActivateEndpoint+0x2fe>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <USB_ActivateEndpoint+0x2de>
 8007abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	029b      	lsls	r3, r3, #10
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007af0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01b      	beq.n	8007b32 <USB_ActivateEndpoint+0x34e>
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b10:	843b      	strh	r3, [r7, #32]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	441a      	add	r2, r3
 8007b1c:	8c3b      	ldrh	r3, [r7, #32]
 8007b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d124      	bne.n	8007b84 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b50:	83bb      	strh	r3, [r7, #28]
 8007b52:	8bbb      	ldrh	r3, [r7, #28]
 8007b54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b58:	83bb      	strh	r3, [r7, #28]
 8007b5a:	8bbb      	ldrh	r3, [r7, #28]
 8007b5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b60:	83bb      	strh	r3, [r7, #28]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	441a      	add	r2, r3
 8007b6c:	8bbb      	ldrh	r3, [r7, #28]
 8007b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8013      	strh	r3, [r2, #0]
 8007b82:	e1ea      	b.n	8007f5a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9a:	83fb      	strh	r3, [r7, #30]
 8007b9c:	8bfb      	ldrh	r3, [r7, #30]
 8007b9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ba2:	83fb      	strh	r3, [r7, #30]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	8bfb      	ldrh	r3, [r7, #30]
 8007bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	8013      	strh	r3, [r2, #0]
 8007bc4:	e1c9      	b.n	8007f5a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	78db      	ldrb	r3, [r3, #3]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d11e      	bne.n	8007c0c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8013      	strh	r3, [r2, #0]
 8007c0a:	e01d      	b.n	8007c48 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c22:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c58:	4413      	add	r3, r2
 8007c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	00da      	lsls	r2, r3, #3
 8007c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	891b      	ldrh	r3, [r3, #8]
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c8c:	4413      	add	r3, r2
 8007c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	00da      	lsls	r2, r3, #3
 8007c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c98:	4413      	add	r3, r2
 8007c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	895b      	ldrh	r3, [r3, #10]
 8007ca4:	085b      	lsrs	r3, r3, #1
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8093 	bne.w	8007de0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007cca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01b      	beq.n	8007d0e <USB_ActivateEndpoint+0x52a>
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	441a      	add	r2, r3
 8007cf8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007d1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01b      	beq.n	8007d5e <USB_ActivateEndpoint+0x57a>
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d74:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007d76:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007d78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d7c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007d7e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007d80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d84:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	441a      	add	r2, r3
 8007d90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	441a      	add	r2, r3
 8007dc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
 8007dde:	e0bc      	b.n	8007f5a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007df0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01d      	beq.n	8007e38 <USB_ActivateEndpoint+0x654>
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e12:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	441a      	add	r2, r3
 8007e20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007e48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01d      	beq.n	8007e90 <USB_ActivateEndpoint+0x6ac>
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	78db      	ldrb	r3, [r3, #3]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d024      	beq.n	8007ee2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007eb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007eb6:	f083 0320 	eor.w	r3, r3, #32
 8007eba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
 8007ee0:	e01d      	b.n	8007f1e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ef8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007f5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3774      	adds	r7, #116	@ 0x74
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop

08007f6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b08d      	sub	sp, #52	@ 0x34
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	7b1b      	ldrb	r3, [r3, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 808e 	bne.w	800809c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d044      	beq.n	8008012 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	81bb      	strh	r3, [r7, #12]
 8007f96:	89bb      	ldrh	r3, [r7, #12]
 8007f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <USB_DeactivateEndpoint+0x6c>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	817b      	strh	r3, [r7, #10]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	897b      	ldrh	r3, [r7, #10]
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fee:	813b      	strh	r3, [r7, #8]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	893b      	ldrh	r3, [r7, #8]
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
 8008010:	e192      	b.n	8008338 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	827b      	strh	r3, [r7, #18]
 8008020:	8a7b      	ldrh	r3, [r7, #18]
 8008022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01b      	beq.n	8008062 <USB_DeactivateEndpoint+0xf6>
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008040:	823b      	strh	r3, [r7, #16]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	441a      	add	r2, r3
 800804c:	8a3b      	ldrh	r3, [r7, #16]
 800804e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008056:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800805a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805e:	b29b      	uxth	r3, r3
 8008060:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008078:	81fb      	strh	r3, [r7, #14]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800808e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008096:	b29b      	uxth	r3, r3
 8008098:	8013      	strh	r3, [r2, #0]
 800809a:	e14d      	b.n	8008338 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 80a5 	bne.w	80081f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	843b      	strh	r3, [r7, #32]
 80080b4:	8c3b      	ldrh	r3, [r7, #32]
 80080b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01b      	beq.n	80080f6 <USB_DeactivateEndpoint+0x18a>
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d4:	83fb      	strh	r3, [r7, #30]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	441a      	add	r2, r3
 80080e0:	8bfb      	ldrh	r3, [r7, #30]
 80080e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	83bb      	strh	r3, [r7, #28]
 8008104:	8bbb      	ldrh	r3, [r7, #28]
 8008106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d01b      	beq.n	8008146 <USB_DeactivateEndpoint+0x1da>
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008124:	837b      	strh	r3, [r7, #26]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	441a      	add	r2, r3
 8008130:	8b7b      	ldrh	r3, [r7, #26]
 8008132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800813a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008142:	b29b      	uxth	r3, r3
 8008144:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815c:	833b      	strh	r3, [r7, #24]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	8b3b      	ldrh	r3, [r7, #24]
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008176:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008194:	82fb      	strh	r3, [r7, #22]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	441a      	add	r2, r3
 80081a0:	8afb      	ldrh	r3, [r7, #22]
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081cc:	82bb      	strh	r3, [r7, #20]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	441a      	add	r2, r3
 80081d8:	8abb      	ldrh	r3, [r7, #20]
 80081da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	8013      	strh	r3, [r2, #0]
 80081ee:	e0a3      	b.n	8008338 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80081fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01b      	beq.n	8008240 <USB_DeactivateEndpoint+0x2d4>
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800821a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800821e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	441a      	add	r2, r3
 800822a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800822c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823c:	b29b      	uxth	r3, r3
 800823e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800824e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <USB_DeactivateEndpoint+0x324>
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800826e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	441a      	add	r2, r3
 800827a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800827c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008288:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800828c:	b29b      	uxth	r3, r3
 800828e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	441a      	add	r2, r3
 80082ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008316:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008334:	b29b      	uxth	r3, r3
 8008336:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3734      	adds	r7, #52	@ 0x34
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b0c2      	sub	sp, #264	@ 0x108
 800834a:	af00      	add	r7, sp, #0
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008354:	6018      	str	r0, [r3, #0]
 8008356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b01      	cmp	r3, #1
 800836e:	f040 86b7 	bne.w	80090e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	429a      	cmp	r2, r3
 800838c:	d908      	bls.n	80083a0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800838e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800839e:	e007      	b.n	80083b0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80083a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80083b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	7b1b      	ldrb	r3, [r3, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d13a      	bne.n	8008436 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6959      	ldr	r1, [r3, #20]
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	88da      	ldrh	r2, [r3, #6]
 80083d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80083e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80083e6:	6800      	ldr	r0, [r0, #0]
 80083e8:	f001 fc99 	bl	8009d1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008406:	b29b      	uxth	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	4413      	add	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
 8008410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	00da      	lsls	r2, r3, #3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	4413      	add	r3, r2
 8008422:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	801a      	strh	r2, [r3, #0]
 8008432:	f000 be1f 	b.w	8009074 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	78db      	ldrb	r3, [r3, #3]
 8008442:	2b02      	cmp	r3, #2
 8008444:	f040 8462 	bne.w	8008d0c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6a1a      	ldr	r2, [r3, #32]
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	f240 83df 	bls.w	8008c24 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	441a      	add	r2, r3
 80084aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80084ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80084ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084be:	b29b      	uxth	r3, r3
 80084c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6a1a      	ldr	r2, [r3, #32]
 80084ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 81c7 	beq.w	8008896 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	633b      	str	r3, [r7, #48]	@ 0x30
 8008514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d177      	bne.n	8008614 <USB_EPStartXfer+0x2ce>
 8008524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800853e:	b29b      	uxth	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	4413      	add	r3, r2
 8008546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	00da      	lsls	r2, r3, #3
 8008556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008558:	4413      	add	r3, r2
 800855a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800856a:	b29a      	uxth	r2, r3
 800856c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <USB_EPStartXfer+0x248>
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008586:	b29a      	uxth	r2, r3
 8008588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	e067      	b.n	800865e <USB_EPStartXfer+0x318>
 800858e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008592:	2b3e      	cmp	r3, #62	@ 0x3e
 8008594:	d81c      	bhi.n	80085d0 <USB_EPStartXfer+0x28a>
 8008596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <USB_EPStartXfer+0x270>
 80085ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085b0:	3301      	adds	r3, #1
 80085b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	029b      	lsls	r3, r3, #10
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	801a      	strh	r2, [r3, #0]
 80085ce:	e046      	b.n	800865e <USB_EPStartXfer+0x318>
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085de:	f003 031f 	and.w	r3, r3, #31
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <USB_EPStartXfer+0x2aa>
 80085e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085ea:	3b01      	subs	r3, #1
 80085ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	029b      	lsls	r3, r3, #10
 80085fe:	b29b      	uxth	r3, r3
 8008600:	4313      	orrs	r3, r2
 8008602:	b29b      	uxth	r3, r3
 8008604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860c:	b29a      	uxth	r2, r3
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	e024      	b.n	800865e <USB_EPStartXfer+0x318>
 8008614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d11c      	bne.n	800865e <USB_EPStartXfer+0x318>
 8008624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008632:	b29b      	uxth	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	4413      	add	r3, r2
 800863a:	633b      	str	r3, [r7, #48]	@ 0x30
 800863c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	00da      	lsls	r2, r3, #3
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	4413      	add	r3, r2
 800864e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008658:	b29a      	uxth	r2, r3
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800865e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	895b      	ldrh	r3, [r3, #10]
 800866a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800866e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6959      	ldr	r1, [r3, #20]
 800867a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867e:	b29b      	uxth	r3, r3
 8008680:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008684:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008688:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800868c:	6800      	ldr	r0, [r0, #0]
 800868e:	f001 fb46 	bl	8009d1e <USB_WritePMA>
            ep->xfer_buff += len;
 8008692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a2:	441a      	add	r2, r3
 80086a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6a1a      	ldr	r2, [r3, #32]
 80086bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d90f      	bls.n	80086ec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80086cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6a1a      	ldr	r2, [r3, #32]
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	1ad2      	subs	r2, r2, r3
 80086de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	621a      	str	r2, [r3, #32]
 80086ea:	e00e      	b.n	800870a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80086ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80086fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2200      	movs	r2, #0
 8008708:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800870a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d177      	bne.n	800880a <USB_EPStartXfer+0x4c4>
 800871a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	61bb      	str	r3, [r7, #24]
 8008726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008734:	b29b      	uxth	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	4413      	add	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	00da      	lsls	r2, r3, #3
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	4413      	add	r3, r2
 8008750:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008760:	b29a      	uxth	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10a      	bne.n	8008784 <USB_EPStartXfer+0x43e>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877c:	b29a      	uxth	r2, r3
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	801a      	strh	r2, [r3, #0]
 8008782:	e06d      	b.n	8008860 <USB_EPStartXfer+0x51a>
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008788:	2b3e      	cmp	r3, #62	@ 0x3e
 800878a:	d81c      	bhi.n	80087c6 <USB_EPStartXfer+0x480>
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008790:	085b      	lsrs	r3, r3, #1
 8008792:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <USB_EPStartXfer+0x466>
 80087a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087a6:	3301      	adds	r3, #1
 80087a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	029b      	lsls	r3, r3, #10
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	4313      	orrs	r3, r2
 80087be:	b29a      	uxth	r2, r3
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	801a      	strh	r2, [r3, #0]
 80087c4:	e04c      	b.n	8008860 <USB_EPStartXfer+0x51a>
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <USB_EPStartXfer+0x4a0>
 80087dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087e0:	3b01      	subs	r3, #1
 80087e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	029b      	lsls	r3, r3, #10
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008802:	b29a      	uxth	r2, r3
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	e02a      	b.n	8008860 <USB_EPStartXfer+0x51a>
 800880a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d122      	bne.n	8008860 <USB_EPStartXfer+0x51a>
 800881a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	623b      	str	r3, [r7, #32]
 8008826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008834:	b29b      	uxth	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	4413      	add	r3, r2
 800883c:	623b      	str	r3, [r7, #32]
 800883e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	00da      	lsls	r2, r3, #3
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	4413      	add	r3, r2
 8008850:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800885a:	b29a      	uxth	r2, r3
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	891b      	ldrh	r3, [r3, #8]
 800886c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6959      	ldr	r1, [r3, #20]
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008880:	b29b      	uxth	r3, r3
 8008882:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008886:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800888a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800888e:	6800      	ldr	r0, [r0, #0]
 8008890:	f001 fa45 	bl	8009d1e <USB_WritePMA>
 8008894:	e3ee      	b.n	8009074 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d177      	bne.n	8008996 <USB_EPStartXfer+0x650>
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c6:	4413      	add	r3, r2
 80088c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	00da      	lsls	r2, r3, #3
 80088d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088da:	4413      	add	r3, r2
 80088dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80088e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <USB_EPStartXfer+0x5ca>
 80088fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008908:	b29a      	uxth	r2, r3
 800890a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	e06d      	b.n	80089ec <USB_EPStartXfer+0x6a6>
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	2b3e      	cmp	r3, #62	@ 0x3e
 8008916:	d81c      	bhi.n	8008952 <USB_EPStartXfer+0x60c>
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891c:	085b      	lsrs	r3, r3, #1
 800891e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <USB_EPStartXfer+0x5f2>
 800892e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008932:	3301      	adds	r3, #1
 8008934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	b29a      	uxth	r2, r3
 800893e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008942:	b29b      	uxth	r3, r3
 8008944:	029b      	lsls	r3, r3, #10
 8008946:	b29b      	uxth	r3, r3
 8008948:	4313      	orrs	r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800894e:	801a      	strh	r2, [r3, #0]
 8008950:	e04c      	b.n	80089ec <USB_EPStartXfer+0x6a6>
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008956:	095b      	lsrs	r3, r3, #5
 8008958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800895c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	2b00      	cmp	r3, #0
 8008966:	d104      	bne.n	8008972 <USB_EPStartXfer+0x62c>
 8008968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800896c:	3b01      	subs	r3, #1
 800896e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29a      	uxth	r2, r3
 8008978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800897c:	b29b      	uxth	r3, r3
 800897e:	029b      	lsls	r3, r3, #10
 8008980:	b29b      	uxth	r3, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	b29b      	uxth	r3, r3
 8008986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800898e:	b29a      	uxth	r2, r3
 8008990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	e02a      	b.n	80089ec <USB_EPStartXfer+0x6a6>
 8008996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d122      	bne.n	80089ec <USB_EPStartXfer+0x6a6>
 80089a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80089b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	461a      	mov	r2, r3
 80089c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c6:	4413      	add	r3, r2
 80089c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80089ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	00da      	lsls	r2, r3, #3
 80089d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089da:	4413      	add	r3, r2
 80089dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80089ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	891b      	ldrh	r3, [r3, #8]
 80089f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6959      	ldr	r1, [r3, #20]
 8008a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	f001 f97f 	bl	8009d1e <USB_WritePMA>
            ep->xfer_buff += len;
 8008a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a30:	441a      	add	r2, r3
 8008a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6a1a      	ldr	r2, [r3, #32]
 8008a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d90f      	bls.n	8008a7a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6a1a      	ldr	r2, [r3, #32]
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	621a      	str	r2, [r3, #32]
 8008a78:	e00e      	b.n	8008a98 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d177      	bne.n	8008ba4 <USB_EPStartXfer+0x85e>
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	4413      	add	r3, r2
 8008ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	00da      	lsls	r2, r3, #3
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	4413      	add	r3, r2
 8008aea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <USB_EPStartXfer+0x7d8>
 8008b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1a:	801a      	strh	r2, [r3, #0]
 8008b1c:	e067      	b.n	8008bee <USB_EPStartXfer+0x8a8>
 8008b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b22:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b24:	d81c      	bhi.n	8008b60 <USB_EPStartXfer+0x81a>
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <USB_EPStartXfer+0x800>
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b40:	3301      	adds	r3, #1
 8008b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	029b      	lsls	r3, r3, #10
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	e046      	b.n	8008bee <USB_EPStartXfer+0x8a8>
 8008b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6e:	f003 031f 	and.w	r3, r3, #31
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <USB_EPStartXfer+0x83a>
 8008b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	029b      	lsls	r3, r3, #10
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	4313      	orrs	r3, r2
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	801a      	strh	r2, [r3, #0]
 8008ba2:	e024      	b.n	8008bee <USB_EPStartXfer+0x8a8>
 8008ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	785b      	ldrb	r3, [r3, #1]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d11c      	bne.n	8008bee <USB_EPStartXfer+0x8a8>
 8008bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bc8:	4413      	add	r3, r2
 8008bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	00da      	lsls	r2, r3, #3
 8008bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	895b      	ldrh	r3, [r3, #10]
 8008bfa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6959      	ldr	r1, [r3, #20]
 8008c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c18:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c1c:	6800      	ldr	r0, [r0, #0]
 8008c1e:	f001 f87e 	bl	8009d1e <USB_WritePMA>
 8008c22:	e227      	b.n	8009074 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	441a      	add	r2, r3
 8008c78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	461a      	mov	r2, r3
 8008cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cb0:	4413      	add	r3, r2
 8008cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	00da      	lsls	r2, r3, #3
 8008cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	891b      	ldrh	r3, [r3, #8]
 8008ce2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6959      	ldr	r1, [r3, #20]
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008cfc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d04:	6800      	ldr	r0, [r0, #0]
 8008d06:	f001 f80a 	bl	8009d1e <USB_WritePMA>
 8008d0a:	e1b3      	b.n	8009074 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6a1a      	ldr	r2, [r3, #32]
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1c:	1ad2      	subs	r2, r2, r3
 8008d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80c6 	beq.w	8008ede <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d177      	bne.n	8008e5e <USB_EPStartXfer+0xb18>
 8008d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d8e:	4413      	add	r3, r2
 8008d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	00da      	lsls	r2, r3, #3
 8008da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008da2:	4413      	add	r3, r2
 8008da4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008db8:	801a      	strh	r2, [r3, #0]
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <USB_EPStartXfer+0xa92>
 8008dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dd4:	801a      	strh	r2, [r3, #0]
 8008dd6:	e067      	b.n	8008ea8 <USB_EPStartXfer+0xb62>
 8008dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ddc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dde:	d81c      	bhi.n	8008e1a <USB_EPStartXfer+0xad4>
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <USB_EPStartXfer+0xaba>
 8008df6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4313      	orrs	r3, r2
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e16:	801a      	strh	r2, [r3, #0]
 8008e18:	e046      	b.n	8008ea8 <USB_EPStartXfer+0xb62>
 8008e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e28:	f003 031f 	and.w	r3, r3, #31
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <USB_EPStartXfer+0xaf4>
 8008e30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e34:	3b01      	subs	r3, #1
 8008e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	029b      	lsls	r3, r3, #10
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	e024      	b.n	8008ea8 <USB_EPStartXfer+0xb62>
 8008e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d11c      	bne.n	8008ea8 <USB_EPStartXfer+0xb62>
 8008e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e82:	4413      	add	r3, r2
 8008e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	00da      	lsls	r2, r3, #3
 8008e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e96:	4413      	add	r3, r2
 8008e98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	895b      	ldrh	r3, [r3, #10]
 8008eb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6959      	ldr	r1, [r3, #20]
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ece:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ed2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ed6:	6800      	ldr	r0, [r0, #0]
 8008ed8:	f000 ff21 	bl	8009d1e <USB_WritePMA>
 8008edc:	e0ca      	b.n	8009074 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	785b      	ldrb	r3, [r3, #1]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d177      	bne.n	8008fde <USB_EPStartXfer+0xc98>
 8008eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f0e:	4413      	add	r3, r2
 8008f10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	00da      	lsls	r2, r3, #3
 8008f20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f22:	4413      	add	r3, r2
 8008f24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f38:	801a      	strh	r2, [r3, #0]
 8008f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <USB_EPStartXfer+0xc12>
 8008f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e073      	b.n	8009040 <USB_EPStartXfer+0xcfa>
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f5e:	d81c      	bhi.n	8008f9a <USB_EPStartXfer+0xc54>
 8008f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <USB_EPStartXfer+0xc3a>
 8008f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	029b      	lsls	r3, r3, #10
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	e052      	b.n	8009040 <USB_EPStartXfer+0xcfa>
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <USB_EPStartXfer+0xc74>
 8008fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	029b      	lsls	r3, r3, #10
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	e030      	b.n	8009040 <USB_EPStartXfer+0xcfa>
 8008fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	785b      	ldrb	r3, [r3, #1]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d128      	bne.n	8009040 <USB_EPStartXfer+0xcfa>
 8008fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800900a:	b29b      	uxth	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009012:	4413      	add	r3, r2
 8009014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	00da      	lsls	r2, r3, #3
 8009026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800902a:	4413      	add	r3, r2
 800902c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009038:	b29a      	uxth	r2, r3
 800903a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800903e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	891b      	ldrh	r3, [r3, #8]
 800904c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6959      	ldr	r1, [r3, #20]
 800905c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009060:	b29b      	uxth	r3, r3
 8009062:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009066:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800906a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	f000 fe55 	bl	8009d1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009078:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800909a:	817b      	strh	r3, [r7, #10]
 800909c:	897b      	ldrh	r3, [r7, #10]
 800909e:	f083 0310 	eor.w	r3, r3, #16
 80090a2:	817b      	strh	r3, [r7, #10]
 80090a4:	897b      	ldrh	r3, [r7, #10]
 80090a6:	f083 0320 	eor.w	r3, r3, #32
 80090aa:	817b      	strh	r3, [r7, #10]
 80090ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	441a      	add	r2, r3
 80090c6:	897b      	ldrh	r3, [r7, #10]
 80090c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d8:	b29b      	uxth	r3, r3
 80090da:	8013      	strh	r3, [r2, #0]
 80090dc:	f000 bcdf 	b.w	8009a9e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80090e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	7b1b      	ldrb	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 80bc 	bne.w	800926a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	429a      	cmp	r2, r3
 800910c:	d917      	bls.n	800913e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800910e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800911e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	619a      	str	r2, [r3, #24]
 800913c:	e00e      	b.n	800915c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800913e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800914e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2200      	movs	r2, #0
 800915a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800915c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800916a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009178:	b29b      	uxth	r3, r3
 800917a:	461a      	mov	r2, r3
 800917c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009180:	4413      	add	r3, r2
 8009182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	00da      	lsls	r2, r3, #3
 8009194:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009198:	4413      	add	r3, r2
 800919a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800919e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10d      	bne.n	80091da <USB_EPStartXfer+0xe94>
 80091be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	f000 bc28 	b.w	8009a2a <USB_EPStartXfer+0x16e4>
 80091da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091de:	2b3e      	cmp	r3, #62	@ 0x3e
 80091e0:	d81f      	bhi.n	8009222 <USB_EPStartXfer+0xedc>
 80091e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e6:	085b      	lsrs	r3, r3, #1
 80091e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <USB_EPStartXfer+0xebc>
 80091f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80091fc:	3301      	adds	r3, #1
 80091fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b29a      	uxth	r2, r3
 800920a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800920e:	b29b      	uxth	r3, r3
 8009210:	029b      	lsls	r3, r3, #10
 8009212:	b29b      	uxth	r3, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	b29a      	uxth	r2, r3
 8009218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	f000 bc04 	b.w	8009a2a <USB_EPStartXfer+0x16e4>
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	2b00      	cmp	r3, #0
 8009236:	d104      	bne.n	8009242 <USB_EPStartXfer+0xefc>
 8009238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800923c:	3b01      	subs	r3, #1
 800923e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29a      	uxth	r2, r3
 800924a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800924e:	b29b      	uxth	r3, r3
 8009250:	029b      	lsls	r3, r3, #10
 8009252:	b29b      	uxth	r3, r3
 8009254:	4313      	orrs	r3, r2
 8009256:	b29b      	uxth	r3, r3
 8009258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800925c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009260:	b29a      	uxth	r2, r3
 8009262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009266:	801a      	strh	r2, [r3, #0]
 8009268:	e3df      	b.n	8009a2a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800926a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800926e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	78db      	ldrb	r3, [r3, #3]
 8009276:	2b02      	cmp	r3, #2
 8009278:	f040 8218 	bne.w	80096ac <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800927c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	785b      	ldrb	r3, [r3, #1]
 8009288:	2b00      	cmp	r3, #0
 800928a:	f040 809d 	bne.w	80093c8 <USB_EPStartXfer+0x1082>
 800928e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800929c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092b2:	4413      	add	r3, r2
 80092b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	00da      	lsls	r2, r3, #3
 80092c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ca:	4413      	add	r3, r2
 80092cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10c      	bne.n	8009312 <USB_EPStartXfer+0xfcc>
 80092f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009308:	b29a      	uxth	r2, r3
 800930a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800930e:	801a      	strh	r2, [r3, #0]
 8009310:	e08f      	b.n	8009432 <USB_EPStartXfer+0x10ec>
 8009312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009320:	d826      	bhi.n	8009370 <USB_EPStartXfer+0x102a>
 8009322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	085b      	lsrs	r3, r3, #1
 8009330:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <USB_EPStartXfer+0x100c>
 8009348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934c:	3301      	adds	r3, #1
 800934e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29a      	uxth	r2, r3
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935e:	b29b      	uxth	r3, r3
 8009360:	029b      	lsls	r3, r3, #10
 8009362:	b29b      	uxth	r3, r3
 8009364:	4313      	orrs	r3, r2
 8009366:	b29a      	uxth	r2, r3
 8009368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800936c:	801a      	strh	r2, [r3, #0]
 800936e:	e060      	b.n	8009432 <USB_EPStartXfer+0x10ec>
 8009370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	2b00      	cmp	r3, #0
 8009394:	d104      	bne.n	80093a0 <USB_EPStartXfer+0x105a>
 8009396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939a:	3b01      	subs	r3, #1
 800939c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	029b      	lsls	r3, r3, #10
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	4313      	orrs	r3, r2
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093be:	b29a      	uxth	r2, r3
 80093c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	e034      	b.n	8009432 <USB_EPStartXfer+0x10ec>
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d12c      	bne.n	8009432 <USB_EPStartXfer+0x10ec>
 80093d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093fc:	4413      	add	r3, r2
 80093fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	00da      	lsls	r2, r3, #3
 8009410:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009414:	4413      	add	r3, r2
 8009416:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800941a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800941e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	b29a      	uxth	r2, r3
 800942c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009430:	801a      	strh	r2, [r3, #0]
 8009432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 809d 	bne.w	800958c <USB_EPStartXfer+0x1246>
 8009452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800946e:	b29b      	uxth	r3, r3
 8009470:	461a      	mov	r2, r3
 8009472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009476:	4413      	add	r3, r2
 8009478:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800947c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	00da      	lsls	r2, r3, #3
 800948a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800948e:	4413      	add	r3, r2
 8009490:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10c      	bne.n	80094d6 <USB_EPStartXfer+0x1190>
 80094bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094d2:	801a      	strh	r2, [r3, #0]
 80094d4:	e088      	b.n	80095e8 <USB_EPStartXfer+0x12a2>
 80094d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80094e4:	d826      	bhi.n	8009534 <USB_EPStartXfer+0x11ee>
 80094e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <USB_EPStartXfer+0x11d0>
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009510:	3301      	adds	r3, #1
 8009512:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29a      	uxth	r2, r3
 800951e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009522:	b29b      	uxth	r3, r3
 8009524:	029b      	lsls	r3, r3, #10
 8009526:	b29b      	uxth	r3, r3
 8009528:	4313      	orrs	r3, r2
 800952a:	b29a      	uxth	r2, r3
 800952c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	e059      	b.n	80095e8 <USB_EPStartXfer+0x12a2>
 8009534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	095b      	lsrs	r3, r3, #5
 8009542:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	2b00      	cmp	r3, #0
 8009558:	d104      	bne.n	8009564 <USB_EPStartXfer+0x121e>
 800955a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800955e:	3b01      	subs	r3, #1
 8009560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	b29a      	uxth	r2, r3
 800956c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009570:	b29b      	uxth	r3, r3
 8009572:	029b      	lsls	r3, r3, #10
 8009574:	b29b      	uxth	r3, r3
 8009576:	4313      	orrs	r3, r2
 8009578:	b29b      	uxth	r3, r3
 800957a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009582:	b29a      	uxth	r2, r3
 8009584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	e02d      	b.n	80095e8 <USB_EPStartXfer+0x12a2>
 800958c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d125      	bne.n	80095e8 <USB_EPStartXfer+0x12a2>
 800959c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095b2:	4413      	add	r3, r2
 80095b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	00da      	lsls	r2, r3, #3
 80095c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095ca:	4413      	add	r3, r2
 80095cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 8218 	beq.w	8009a2a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80095fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800961a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800961e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <USB_EPStartXfer+0x12ec>
 8009626:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800962a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10d      	bne.n	800964e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009632:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800963a:	2b00      	cmp	r3, #0
 800963c:	f040 81f5 	bne.w	8009a2a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009640:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 81ee 	bne.w	8009a2a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800964e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	b29b      	uxth	r3, r3
 800966c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009674:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	441a      	add	r2, r3
 8009692:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800969a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800969e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	8013      	strh	r3, [r2, #0]
 80096aa:	e1be      	b.n	8009a2a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80096ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	78db      	ldrb	r3, [r3, #3]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	f040 81b4 	bne.w	8009a26 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d917      	bls.n	800970a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80096da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80096ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	699a      	ldr	r2, [r3, #24]
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fa:	1ad2      	subs	r2, r2, r3
 80096fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	619a      	str	r2, [r3, #24]
 8009708:	e00e      	b.n	8009728 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800970a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800971a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2200      	movs	r2, #0
 8009726:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	785b      	ldrb	r3, [r3, #1]
 8009734:	2b00      	cmp	r3, #0
 8009736:	f040 8085 	bne.w	8009844 <USB_EPStartXfer+0x14fe>
 800973a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800973e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009756:	b29b      	uxth	r3, r3
 8009758:	461a      	mov	r2, r3
 800975a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800975e:	4413      	add	r3, r2
 8009760:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009776:	4413      	add	r3, r2
 8009778:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800977c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800978c:	b29a      	uxth	r2, r3
 800978e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009792:	801a      	strh	r2, [r3, #0]
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10c      	bne.n	80097b6 <USB_EPStartXfer+0x1470>
 800979c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	e077      	b.n	80098a6 <USB_EPStartXfer+0x1560>
 80097b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80097bc:	d81e      	bhi.n	80097fc <USB_EPStartXfer+0x14b6>
 80097be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <USB_EPStartXfer+0x1498>
 80097d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d8:	3301      	adds	r3, #1
 80097da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	029b      	lsls	r3, r3, #10
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	4313      	orrs	r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097f8:	801a      	strh	r2, [r3, #0]
 80097fa:	e054      	b.n	80098a6 <USB_EPStartXfer+0x1560>
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	2b00      	cmp	r3, #0
 8009810:	d104      	bne.n	800981c <USB_EPStartXfer+0x14d6>
 8009812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009816:	3b01      	subs	r3, #1
 8009818:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800981c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29a      	uxth	r2, r3
 8009824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009828:	b29b      	uxth	r3, r3
 800982a:	029b      	lsls	r3, r3, #10
 800982c:	b29b      	uxth	r3, r3
 800982e:	4313      	orrs	r3, r2
 8009830:	b29b      	uxth	r3, r3
 8009832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983a:	b29a      	uxth	r2, r3
 800983c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009840:	801a      	strh	r2, [r3, #0]
 8009842:	e030      	b.n	80098a6 <USB_EPStartXfer+0x1560>
 8009844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d128      	bne.n	80098a6 <USB_EPStartXfer+0x1560>
 8009854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009870:	b29b      	uxth	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009878:	4413      	add	r3, r2
 800987a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800987e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	00da      	lsls	r2, r3, #3
 800988c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009890:	4413      	add	r3, r2
 8009892:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009896:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800989a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989e:	b29a      	uxth	r2, r3
 80098a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80098b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 8085 	bne.w	80099d0 <USB_EPStartXfer+0x168a>
 80098c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	461a      	mov	r2, r3
 80098e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098ea:	4413      	add	r3, r2
 80098ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	00da      	lsls	r2, r3, #3
 80098fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009902:	4413      	add	r3, r2
 8009904:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800990c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009918:	b29a      	uxth	r2, r3
 800991a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800991e:	801a      	strh	r2, [r3, #0]
 8009920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10c      	bne.n	8009942 <USB_EPStartXfer+0x15fc>
 8009928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009938:	b29a      	uxth	r2, r3
 800993a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	e073      	b.n	8009a2a <USB_EPStartXfer+0x16e4>
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009946:	2b3e      	cmp	r3, #62	@ 0x3e
 8009948:	d81e      	bhi.n	8009988 <USB_EPStartXfer+0x1642>
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994e:	085b      	lsrs	r3, r3, #1
 8009950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <USB_EPStartXfer+0x1624>
 8009960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009964:	3301      	adds	r3, #1
 8009966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800996a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29a      	uxth	r2, r3
 8009972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009976:	b29b      	uxth	r3, r3
 8009978:	029b      	lsls	r3, r3, #10
 800997a:	b29b      	uxth	r3, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	b29a      	uxth	r2, r3
 8009980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009984:	801a      	strh	r2, [r3, #0]
 8009986:	e050      	b.n	8009a2a <USB_EPStartXfer+0x16e4>
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998c:	095b      	lsrs	r3, r3, #5
 800998e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009996:	f003 031f 	and.w	r3, r3, #31
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <USB_EPStartXfer+0x1662>
 800999e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099a2:	3b01      	subs	r3, #1
 80099a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	029b      	lsls	r3, r3, #10
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	b29b      	uxth	r3, r3
 80099be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e02c      	b.n	8009a2a <USB_EPStartXfer+0x16e4>
 80099d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d124      	bne.n	8009a2a <USB_EPStartXfer+0x16e4>
 80099e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80099f6:	4413      	add	r3, r2
 80099f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	00da      	lsls	r2, r3, #3
 8009a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a0e:	4413      	add	r3, r2
 8009a10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	e001      	b.n	8009a2a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e03a      	b.n	8009aa0 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	441a      	add	r2, r3
 8009a86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	785b      	ldrb	r3, [r3, #1]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d020      	beq.n	8009afe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ad2:	81bb      	strh	r3, [r7, #12]
 8009ad4:	89bb      	ldrh	r3, [r7, #12]
 8009ad6:	f083 0310 	eor.w	r3, r3, #16
 8009ada:	81bb      	strh	r3, [r7, #12]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	441a      	add	r2, r3
 8009ae6:	89bb      	ldrh	r3, [r7, #12]
 8009ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	8013      	strh	r3, [r2, #0]
 8009afc:	e01f      	b.n	8009b3e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b14:	81fb      	strh	r3, [r7, #14]
 8009b16:	89fb      	ldrh	r3, [r7, #14]
 8009b18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b1c:	81fb      	strh	r3, [r7, #14]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	441a      	add	r2, r3
 8009b28:	89fb      	ldrh	r3, [r7, #14]
 8009b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	7b1b      	ldrb	r3, [r3, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f040 809d 	bne.w	8009c9a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d04c      	beq.n	8009c02 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	823b      	strh	r3, [r7, #16]
 8009b76:	8a3b      	ldrh	r3, [r7, #16]
 8009b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01b      	beq.n	8009bb8 <USB_EPClearStall+0x6c>
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b96:	81fb      	strh	r3, [r7, #14]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	441a      	add	r2, r3
 8009ba2:	89fb      	ldrh	r3, [r7, #14]
 8009ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	78db      	ldrb	r3, [r3, #3]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d06c      	beq.n	8009c9a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bd6:	81bb      	strh	r3, [r7, #12]
 8009bd8:	89bb      	ldrh	r3, [r7, #12]
 8009bda:	f083 0320 	eor.w	r3, r3, #32
 8009bde:	81bb      	strh	r3, [r7, #12]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	441a      	add	r2, r3
 8009bea:	89bb      	ldrh	r3, [r7, #12]
 8009bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	8013      	strh	r3, [r2, #0]
 8009c00:	e04b      	b.n	8009c9a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	82fb      	strh	r3, [r7, #22]
 8009c10:	8afb      	ldrh	r3, [r7, #22]
 8009c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d01b      	beq.n	8009c52 <USB_EPClearStall+0x106>
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c30:	82bb      	strh	r3, [r7, #20]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	441a      	add	r2, r3
 8009c3c:	8abb      	ldrh	r3, [r7, #20]
 8009c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c68:	827b      	strh	r3, [r7, #18]
 8009c6a:	8a7b      	ldrh	r3, [r7, #18]
 8009c6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009c70:	827b      	strh	r3, [r7, #18]
 8009c72:	8a7b      	ldrh	r3, [r7, #18]
 8009c74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009c78:	827b      	strh	r3, [r7, #18]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	441a      	add	r2, r3
 8009c84:	8a7b      	ldrh	r3, [r7, #18]
 8009c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2280      	movs	r2, #128	@ 0x80
 8009cbe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b085      	sub	sp, #20
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d10:	68fb      	ldr	r3, [r7, #12]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b08b      	sub	sp, #44	@ 0x2c
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	4611      	mov	r1, r2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	80fb      	strh	r3, [r7, #6]
 8009d30:	4613      	mov	r3, r2
 8009d32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009d34:	88bb      	ldrh	r3, [r7, #4]
 8009d36:	3301      	adds	r3, #1
 8009d38:	085b      	lsrs	r3, r3, #1
 8009d3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d54:	e01b      	b.n	8009d8e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	b21a      	sxth	r2, r3
 8009d66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b21b      	sxth	r3, r3
 8009d6e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	8a7a      	ldrh	r2, [r7, #18]
 8009d74:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	3302      	adds	r3, #2
 8009d7a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	3301      	adds	r3, #1
 8009d86:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e0      	bne.n	8009d56 <USB_WritePMA+0x38>
  }
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	372c      	adds	r7, #44	@ 0x2c
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b08b      	sub	sp, #44	@ 0x2c
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	4611      	mov	r1, r2
 8009dae:	461a      	mov	r2, r3
 8009db0:	460b      	mov	r3, r1
 8009db2:	80fb      	strh	r3, [r7, #6]
 8009db4:	4613      	mov	r3, r2
 8009db6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009db8:	88bb      	ldrh	r3, [r7, #4]
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dc8:	88fa      	ldrh	r2, [r7, #6]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009dd2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dd8:	e018      	b.n	8009e0c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	3302      	adds	r3, #2
 8009de6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	3301      	adds	r3, #1
 8009df4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	0a1b      	lsrs	r3, r3, #8
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	3301      	adds	r3, #1
 8009e04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e3      	bne.n	8009dda <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009e12:	88bb      	ldrh	r3, [r7, #4]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	701a      	strb	r2, [r3, #0]
  }
}
 8009e2e:	bf00      	nop
 8009e30:	372c      	adds	r7, #44	@ 0x2c
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e46:	205c      	movs	r0, #92	@ 0x5c
 8009e48:	f002 f8e2 	bl	800c010 <USBD_static_malloc>
 8009e4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d105      	bne.n	8009e60 <USBD_CDC_Init+0x26>
  {
    pdev->pClassData = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e05f      	b.n	8009f20 <USBD_CDC_Init+0xe6>
  }

  pdev->pClassData = (void *)hcdc;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	7c1b      	ldrb	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d117      	bne.n	8009ea0 <USBD_CDC_Init+0x66>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e70:	2340      	movs	r3, #64	@ 0x40
 8009e72:	2202      	movs	r2, #2
 8009e74:	2181      	movs	r1, #129	@ 0x81
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 ff71 	bl	800bd5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e82:	2340      	movs	r3, #64	@ 0x40
 8009e84:	2202      	movs	r2, #2
 8009e86:	2101      	movs	r1, #1
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 ff68 	bl	800bd5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2210      	movs	r2, #16
 8009e9a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009e9e:	e016      	b.n	8009ece <USBD_CDC_Init+0x94>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ea0:	2340      	movs	r3, #64	@ 0x40
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	2181      	movs	r1, #129	@ 0x81
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 ff59 	bl	800bd5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009eb2:	2340      	movs	r3, #64	@ 0x40
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 ff50 	bl	800bd5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2210      	movs	r2, #16
 8009eca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ece:	2308      	movs	r3, #8
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	2182      	movs	r1, #130	@ 0x82
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 ff42 	bl	800bd5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	655a      	str	r2, [r3, #84]	@ 0x54
  hcdc->RxState = 0U;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	659a      	str	r2, [r3, #88]	@ 0x58

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7c1b      	ldrb	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d107      	bne.n	8009f10 <USBD_CDC_Init+0xd6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f04:	2340      	movs	r3, #64	@ 0x40
 8009f06:	2101      	movs	r1, #1
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f002 f817 	bl	800bf3c <USBD_LL_PrepareReceive>
 8009f0e:	e006      	b.n	8009f1e <USBD_CDC_Init+0xe4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f14:	2340      	movs	r3, #64	@ 0x40
 8009f16:	2101      	movs	r1, #1
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f002 f80f 	bl	800bf3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009f34:	2181      	movs	r1, #129	@ 0x81
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 ff37 	bl	800bdaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009f42:	2101      	movs	r1, #1
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 ff30 	bl	800bdaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009f52:	2182      	movs	r1, #130	@ 0x82
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 ff28 	bl	800bdaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00e      	beq.n	8009f92 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f84:	4618      	mov	r0, r3
 8009f86:	f002 f851 	bl	800c02c <USBD_static_free>
    pdev->pClassData = NULL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e0af      	b.n	800a124 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d03f      	beq.n	800a050 <USBD_CDC_Setup+0xb4>
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	f040 809f 	bne.w	800a114 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88db      	ldrh	r3, [r3, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d02e      	beq.n	800a03c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	b25b      	sxtb	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da16      	bge.n	800a016 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009ff4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	88d2      	ldrh	r2, [r2, #6]
 8009ffa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	88db      	ldrh	r3, [r3, #6]
 800a000:	2b07      	cmp	r3, #7
 800a002:	bf28      	it	cs
 800a004:	2307      	movcs	r3, #7
 800a006:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	89fa      	ldrh	r2, [r7, #14]
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 fabf 	bl	800b592 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a014:	e085      	b.n	800a122 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	785a      	ldrb	r2, [r3, #1]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	88db      	ldrh	r3, [r3, #6]
 800a024:	b2da      	uxtb	r2, r3
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a02c:	6939      	ldr	r1, [r7, #16]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	88db      	ldrh	r3, [r3, #6]
 800a032:	461a      	mov	r2, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fad8 	bl	800b5ea <USBD_CtlPrepareRx>
      break;
 800a03a:	e072      	b.n	800a122 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	7850      	ldrb	r0, [r2, #1]
 800a048:	2200      	movs	r2, #0
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	4798      	blx	r3
      break;
 800a04e:	e068      	b.n	800a122 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	2b0b      	cmp	r3, #11
 800a056:	d852      	bhi.n	800a0fe <USBD_CDC_Setup+0x162>
 800a058:	a201      	add	r2, pc, #4	@ (adr r2, 800a060 <USBD_CDC_Setup+0xc4>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a091 	.word	0x0800a091
 800a064:	0800a10d 	.word	0x0800a10d
 800a068:	0800a0ff 	.word	0x0800a0ff
 800a06c:	0800a0ff 	.word	0x0800a0ff
 800a070:	0800a0ff 	.word	0x0800a0ff
 800a074:	0800a0ff 	.word	0x0800a0ff
 800a078:	0800a0ff 	.word	0x0800a0ff
 800a07c:	0800a0ff 	.word	0x0800a0ff
 800a080:	0800a0ff 	.word	0x0800a0ff
 800a084:	0800a0ff 	.word	0x0800a0ff
 800a088:	0800a0bb 	.word	0x0800a0bb
 800a08c:	0800a0e5 	.word	0x0800a0e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d107      	bne.n	800a0ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a09c:	f107 030a 	add.w	r3, r7, #10
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fa74 	bl	800b592 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0aa:	e032      	b.n	800a112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f001 f9fe 	bl	800b4b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	75fb      	strb	r3, [r7, #23]
          break;
 800a0b8:	e02b      	b.n	800a112 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d107      	bne.n	800a0d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0c6:	f107 030d 	add.w	r3, r7, #13
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fa5f 	bl	800b592 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0d4:	e01d      	b.n	800a112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 f9e9 	bl	800b4b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a0e2:	e016      	b.n	800a112 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d00f      	beq.n	800a110 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 f9dc 	bl	800b4b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0fc:	e008      	b.n	800a110 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 f9d5 	bl	800b4b0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a106:	2303      	movs	r3, #3
 800a108:	75fb      	strb	r3, [r7, #23]
          break;
 800a10a:	e002      	b.n	800a112 <USBD_CDC_Setup+0x176>
          break;
 800a10c:	bf00      	nop
 800a10e:	e008      	b.n	800a122 <USBD_CDC_Setup+0x186>
          break;
 800a110:	bf00      	nop
      }
      break;
 800a112:	e006      	b.n	800a122 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f001 f9ca 	bl	800b4b0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a11c:	2303      	movs	r3, #3
 800a11e:	75fb      	strb	r3, [r7, #23]
      break;
 800a120:	bf00      	nop
  }

  return (uint8_t)ret;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a13e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e04d      	b.n	800a1ea <USBD_CDC_DataIn+0xbe>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a154:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	3318      	adds	r3, #24
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d029      	beq.n	800a1c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a16c:	78fa      	ldrb	r2, [r7, #3]
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	3318      	adds	r3, #24
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	78f9      	ldrb	r1, [r7, #3]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	460b      	mov	r3, r1
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4403      	add	r3, r0
 800a18c:	3320      	adds	r3, #32
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	fbb2 f1f3 	udiv	r1, r2, r3
 800a194:	fb01 f303 	mul.w	r3, r1, r3
 800a198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d110      	bne.n	800a1c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	3318      	adds	r3, #24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1b2:	78f9      	ldrb	r1, [r7, #3]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 fe9e 	bl	800befa <USBD_LL_Transmit>
 800a1be:	e013      	b.n	800a1e8 <USBD_CDC_DataIn+0xbc>
  }
  else
  {
    hcdc->TxState = 0U;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <USBD_CDC_DataIn+0xbc>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	6c90      	ldr	r0, [r2, #72]	@ 0x48
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	f102 0150 	add.w	r1, r2, #80	@ 0x50
 800a1e4:	78fa      	ldrb	r2, [r7, #3]
 800a1e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a204:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a210:	2303      	movs	r3, #3
 800a212:	e012      	b.n	800a23a <USBD_CDC_DataOut+0x48>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 feb0 	bl	800bf7e <USBD_LL_GetRxDataSize>
 800a21e:	4602      	mov	r2, r0
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	324c      	adds	r2, #76	@ 0x4c
 800a234:	4611      	mov	r1, r2
 800a236:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a250:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a258:	2303      	movs	r3, #3
 800a25a:	e01a      	b.n	800a292 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d014      	beq.n	800a290 <USBD_CDC_EP0_RxReady+0x4e>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a26c:	2bff      	cmp	r3, #255	@ 0xff
 800a26e:	d00f      	beq.n	800a290 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	f892 0040 	ldrb.w	r0, [r2, #64]	@ 0x40
                                                      (uint8_t *)hcdc->data,
 800a27e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a286:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	22ff      	movs	r2, #255	@ 0xff
 800a28c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return (uint8_t)USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2243      	movs	r2, #67	@ 0x43
 800a2a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a2aa:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	20000094 	.word	0x20000094

0800a2bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2243      	movs	r2, #67	@ 0x43
 800a2c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a2ca:	4b03      	ldr	r3, [pc, #12]	@ (800a2d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	20000050 	.word	0x20000050

0800a2dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2243      	movs	r2, #67	@ 0x43
 800a2e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	@ (800a2f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	200000d8 	.word	0x200000d8

0800a2fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	220a      	movs	r2, #10
 800a308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a30a:	4b03      	ldr	r3, [pc, #12]	@ (800a318 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	2000000c 	.word	0x2000000c

0800a31c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e004      	b.n	800a33a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a346:	b480      	push	{r7}
 800a348:	b087      	sub	sp, #28
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a358:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a360:	2303      	movs	r3, #3
 800a362:	e006      	b.n	800a372 <USBD_CDC_SetTxBuffer+0x2c>
  }

  hcdc->TxBuffer = pbuff;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	649a      	str	r2, [r3, #72]	@ 0x48
  hcdc->TxLength = length;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	651a      	str	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a37e:	b480      	push	{r7}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a38e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a396:	2303      	movs	r3, #3
 800a398:	e003      	b.n	800a3a2 <USBD_CDC_SetRxBuffer+0x24>
  }

  hcdc->RxBuffer = pbuff;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	645a      	str	r2, [r3, #68]	@ 0x44

  return (uint8_t)USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3bc:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e015      	b.n	800a3fc <USBD_CDC_TransmitPacket+0x4e>
  }

  if (hcdc->TxState == 0U)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d110      	bne.n	800a3fa <USBD_CDC_TransmitPacket+0x4c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ee:	2181      	movs	r1, #129	@ 0x81
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fd82 	bl	800befa <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a412:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a41e:	2303      	movs	r3, #3
 800a420:	e013      	b.n	800a44a <USBD_CDC_ReceivePacket+0x46>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7c1b      	ldrb	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d107      	bne.n	800a43a <USBD_CDC_ReceivePacket+0x36>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a42e:	2340      	movs	r3, #64	@ 0x40
 800a430:	2101      	movs	r1, #1
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f001 fd82 	bl	800bf3c <USBD_LL_PrepareReceive>
 800a438:	e006      	b.n	800a448 <USBD_CDC_ReceivePacket+0x44>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a43e:	2340      	movs	r3, #64	@ 0x40
 800a440:	2101      	movs	r1, #1
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 fd7a 	bl	800bf3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b086      	sub	sp, #24
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	4613      	mov	r3, r2
 800a45e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a466:	2303      	movs	r3, #3
 800a468:	e01f      	b.n	800a4aa <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	79fa      	ldrb	r2, [r7, #7]
 800a49c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f001 fbe2 	bl	800bc68 <USBD_LL_Init>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e016      	b.n	800a4f8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e6:	f107 020e 	add.w	r2, r7, #14
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	4798      	blx	r3
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 fc0d 	bl	800bd28 <USBD_LL_Start>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a53a:	2303      	movs	r3, #3
 800a53c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d007      	beq.n	800a58c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	78fa      	ldrb	r2, [r7, #3]
 800a586:	4611      	mov	r1, r2
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	4798      	blx	r3
  }

  return USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 ff47 	bl	800b43c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5bc:	461a      	mov	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d01a      	beq.n	800a608 <USBD_LL_SetupStage+0x72>
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d822      	bhi.n	800a61c <USBD_LL_SetupStage+0x86>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <USBD_LL_SetupStage+0x4a>
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d00a      	beq.n	800a5f4 <USBD_LL_SetupStage+0x5e>
 800a5de:	e01d      	b.n	800a61c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f9ef 	bl	800a9cc <USBD_StdDevReq>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f2:	e020      	b.n	800a636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fa53 	bl	800aaa8 <USBD_StdItfReq>
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
      break;
 800a606:	e016      	b.n	800a636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa92 	bl	800ab3a <USBD_StdEPReq>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
      break;
 800a61a:	e00c      	b.n	800a636 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a622:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f001 fbdc 	bl	800bde8 <USBD_LL_StallEP>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
      break;
 800a634:	bf00      	nop
  }

  return ret;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	460b      	mov	r3, r1
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d138      	bne.n	800a6c6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a65a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a662:	2b03      	cmp	r3, #3
 800a664:	d14a      	bne.n	800a6fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d913      	bls.n	800a69a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	1ad2      	subs	r2, r2, r3
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	4293      	cmp	r3, r2
 800a68a:	bf28      	it	cs
 800a68c:	4613      	movcs	r3, r2
 800a68e:	461a      	mov	r2, r3
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 ffc6 	bl	800b624 <USBD_CtlContinueRx>
 800a698:	e030      	b.n	800a6fc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d10b      	bne.n	800a6be <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d005      	beq.n	800a6be <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 ffc1 	bl	800b646 <USBD_CtlSendStatus>
 800a6c4:	e01a      	b.n	800a6fc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d114      	bne.n	800a6fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	7afa      	ldrb	r2, [r7, #11]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	4798      	blx	r3
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	e000      	b.n	800a6fe <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b086      	sub	sp, #24
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	460b      	mov	r3, r1
 800a710:	607a      	str	r2, [r7, #4]
 800a712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d16b      	bne.n	800a7f2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3314      	adds	r3, #20
 800a71e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a726:	2b02      	cmp	r3, #2
 800a728:	d156      	bne.n	800a7d8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	429a      	cmp	r2, r3
 800a734:	d914      	bls.n	800a760 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	461a      	mov	r2, r3
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 ff3b 	bl	800b5c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a752:	2300      	movs	r3, #0
 800a754:	2200      	movs	r2, #0
 800a756:	2100      	movs	r1, #0
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f001 fbef 	bl	800bf3c <USBD_LL_PrepareReceive>
 800a75e:	e03b      	b.n	800a7d8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d11c      	bne.n	800a7a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a774:	429a      	cmp	r2, r3
 800a776:	d316      	bcc.n	800a7a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a782:	429a      	cmp	r2, r3
 800a784:	d20f      	bcs.n	800a7a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a786:	2200      	movs	r2, #0
 800a788:	2100      	movs	r1, #0
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 ff1c 	bl	800b5c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a798:	2300      	movs	r3, #0
 800a79a:	2200      	movs	r2, #0
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f001 fbcc 	bl	800bf3c <USBD_LL_PrepareReceive>
 800a7a4:	e018      	b.n	800a7d8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d10b      	bne.n	800a7ca <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d005      	beq.n	800a7ca <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ca:	2180      	movs	r1, #128	@ 0x80
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f001 fb0b 	bl	800bde8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 ff4a 	bl	800b66c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d122      	bne.n	800a828 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7ff fe98 	bl	800a518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a7f0:	e01a      	b.n	800a828 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d114      	bne.n	800a828 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00e      	beq.n	800a828 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	7afa      	ldrb	r2, [r7, #11]
 800a814:	4611      	mov	r1, r2
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	e000      	b.n	800a82a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a862:	2303      	movs	r3, #3
 800a864:	e02f      	b.n	800a8c6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00f      	beq.n	800a890 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d009      	beq.n	800a890 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6852      	ldr	r2, [r2, #4]
 800a888:	b2d2      	uxtb	r2, r2
 800a88a:	4611      	mov	r1, r2
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a890:	2340      	movs	r3, #64	@ 0x40
 800a892:	2200      	movs	r2, #0
 800a894:	2100      	movs	r1, #0
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f001 fa61 	bl	800bd5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2240      	movs	r2, #64	@ 0x40
 800a8a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8ac:	2340      	movs	r3, #64	@ 0x40
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2180      	movs	r1, #128	@ 0x80
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 fa53 	bl	800bd5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2240      	movs	r2, #64	@ 0x40
 800a8c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	78fa      	ldrb	r2, [r7, #3]
 800a8de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2204      	movs	r2, #4
 800a908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d106      	bne.n	800a93c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a934:	b2da      	uxtb	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e012      	b.n	800a986 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d10b      	bne.n	800a984 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a98e:	b480      	push	{r7}
 800a990:	b087      	sub	sp, #28
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9ac:	8a3b      	ldrh	r3, [r7, #16]
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	b21a      	sxth	r2, r3
 800a9b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	b21b      	sxth	r3, r3
 800a9ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9bc:	89fb      	ldrh	r3, [r7, #14]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9e2:	2b40      	cmp	r3, #64	@ 0x40
 800a9e4:	d005      	beq.n	800a9f2 <USBD_StdDevReq+0x26>
 800a9e6:	2b40      	cmp	r3, #64	@ 0x40
 800a9e8:	d853      	bhi.n	800aa92 <USBD_StdDevReq+0xc6>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00b      	beq.n	800aa06 <USBD_StdDevReq+0x3a>
 800a9ee:	2b20      	cmp	r3, #32
 800a9f0:	d14f      	bne.n	800aa92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	4798      	blx	r3
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
      break;
 800aa04:	e04a      	b.n	800aa9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	2b09      	cmp	r3, #9
 800aa0c:	d83b      	bhi.n	800aa86 <USBD_StdDevReq+0xba>
 800aa0e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa14 <USBD_StdDevReq+0x48>)
 800aa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800aa7d 	.word	0x0800aa7d
 800aa1c:	0800aa87 	.word	0x0800aa87
 800aa20:	0800aa73 	.word	0x0800aa73
 800aa24:	0800aa87 	.word	0x0800aa87
 800aa28:	0800aa47 	.word	0x0800aa47
 800aa2c:	0800aa3d 	.word	0x0800aa3d
 800aa30:	0800aa87 	.word	0x0800aa87
 800aa34:	0800aa5f 	.word	0x0800aa5f
 800aa38:	0800aa51 	.word	0x0800aa51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f9de 	bl	800ae00 <USBD_GetDescriptor>
          break;
 800aa44:	e024      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fb6d 	bl	800b128 <USBD_SetAddress>
          break;
 800aa4e:	e01f      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fbac 	bl	800b1b0 <USBD_SetConfig>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]
          break;
 800aa5c:	e018      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fc4b 	bl	800b2fc <USBD_GetConfig>
          break;
 800aa66:	e013      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fc7c 	bl	800b368 <USBD_GetStatus>
          break;
 800aa70:	e00e      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fcab 	bl	800b3d0 <USBD_SetFeature>
          break;
 800aa7a:	e009      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fcba 	bl	800b3f8 <USBD_ClrFeature>
          break;
 800aa84:	e004      	b.n	800aa90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fd11 	bl	800b4b0 <USBD_CtlError>
          break;
 800aa8e:	bf00      	nop
      }
      break;
 800aa90:	e004      	b.n	800aa9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fd0b 	bl	800b4b0 <USBD_CtlError>
      break;
 800aa9a:	bf00      	nop
  }

  return ret;
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop

0800aaa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aabe:	2b40      	cmp	r3, #64	@ 0x40
 800aac0:	d005      	beq.n	800aace <USBD_StdItfReq+0x26>
 800aac2:	2b40      	cmp	r3, #64	@ 0x40
 800aac4:	d82f      	bhi.n	800ab26 <USBD_StdItfReq+0x7e>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <USBD_StdItfReq+0x26>
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d12b      	bne.n	800ab26 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d81d      	bhi.n	800ab18 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	889b      	ldrh	r3, [r3, #4]
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d813      	bhi.n	800ab0e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	88db      	ldrh	r3, [r3, #6]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d110      	bne.n	800ab22 <USBD_StdItfReq+0x7a>
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10d      	bne.n	800ab22 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fd9d 	bl	800b646 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab0c:	e009      	b.n	800ab22 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fccd 	bl	800b4b0 <USBD_CtlError>
          break;
 800ab16:	e004      	b.n	800ab22 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fcc8 	bl	800b4b0 <USBD_CtlError>
          break;
 800ab20:	e000      	b.n	800ab24 <USBD_StdItfReq+0x7c>
          break;
 800ab22:	bf00      	nop
      }
      break;
 800ab24:	e004      	b.n	800ab30 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fcc1 	bl	800b4b0 <USBD_CtlError>
      break;
 800ab2e:	bf00      	nop
  }

  return ret;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	889b      	ldrh	r3, [r3, #4]
 800ab4c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab56:	2b40      	cmp	r3, #64	@ 0x40
 800ab58:	d007      	beq.n	800ab6a <USBD_StdEPReq+0x30>
 800ab5a:	2b40      	cmp	r3, #64	@ 0x40
 800ab5c:	f200 8145 	bhi.w	800adea <USBD_StdEPReq+0x2b0>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00c      	beq.n	800ab7e <USBD_StdEPReq+0x44>
 800ab64:	2b20      	cmp	r3, #32
 800ab66:	f040 8140 	bne.w	800adea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	4798      	blx	r3
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab7c:	e13a      	b.n	800adf4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d007      	beq.n	800ab96 <USBD_StdEPReq+0x5c>
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	f300 8129 	bgt.w	800adde <USBD_StdEPReq+0x2a4>
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d07f      	beq.n	800ac90 <USBD_StdEPReq+0x156>
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d03c      	beq.n	800ac0e <USBD_StdEPReq+0xd4>
 800ab94:	e123      	b.n	800adde <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d002      	beq.n	800aba8 <USBD_StdEPReq+0x6e>
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d016      	beq.n	800abd4 <USBD_StdEPReq+0x9a>
 800aba6:	e02c      	b.n	800ac02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00d      	beq.n	800abca <USBD_StdEPReq+0x90>
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b80      	cmp	r3, #128	@ 0x80
 800abb2:	d00a      	beq.n	800abca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 f915 	bl	800bde8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abbe:	2180      	movs	r1, #128	@ 0x80
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f001 f911 	bl	800bde8 <USBD_LL_StallEP>
 800abc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abc8:	e020      	b.n	800ac0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fc6f 	bl	800b4b0 <USBD_CtlError>
              break;
 800abd2:	e01b      	b.n	800ac0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10e      	bne.n	800abfa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00b      	beq.n	800abfa <USBD_StdEPReq+0xc0>
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	2b80      	cmp	r3, #128	@ 0x80
 800abe6:	d008      	beq.n	800abfa <USBD_StdEPReq+0xc0>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	88db      	ldrh	r3, [r3, #6]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f001 f8f7 	bl	800bde8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fd23 	bl	800b646 <USBD_CtlSendStatus>

              break;
 800ac00:	e004      	b.n	800ac0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fc53 	bl	800b4b0 <USBD_CtlError>
              break;
 800ac0a:	bf00      	nop
          }
          break;
 800ac0c:	e0ec      	b.n	800ade8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d002      	beq.n	800ac20 <USBD_StdEPReq+0xe6>
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d016      	beq.n	800ac4c <USBD_StdEPReq+0x112>
 800ac1e:	e030      	b.n	800ac82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00d      	beq.n	800ac42 <USBD_StdEPReq+0x108>
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	2b80      	cmp	r3, #128	@ 0x80
 800ac2a:	d00a      	beq.n	800ac42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 f8d9 	bl	800bde8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac36:	2180      	movs	r1, #128	@ 0x80
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 f8d5 	bl	800bde8 <USBD_LL_StallEP>
 800ac3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac40:	e025      	b.n	800ac8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fc33 	bl	800b4b0 <USBD_CtlError>
              break;
 800ac4a:	e020      	b.n	800ac8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	885b      	ldrh	r3, [r3, #2]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d11b      	bne.n	800ac8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d004      	beq.n	800ac68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 f8df 	bl	800be26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fcec 	bl	800b646 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	4798      	blx	r3
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ac80:	e004      	b.n	800ac8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fc13 	bl	800b4b0 <USBD_CtlError>
              break;
 800ac8a:	e000      	b.n	800ac8e <USBD_StdEPReq+0x154>
              break;
 800ac8c:	bf00      	nop
          }
          break;
 800ac8e:	e0ab      	b.n	800ade8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d002      	beq.n	800aca2 <USBD_StdEPReq+0x168>
 800ac9c:	2b03      	cmp	r3, #3
 800ac9e:	d032      	beq.n	800ad06 <USBD_StdEPReq+0x1cc>
 800aca0:	e097      	b.n	800add2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d007      	beq.n	800acb8 <USBD_StdEPReq+0x17e>
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b80      	cmp	r3, #128	@ 0x80
 800acac:	d004      	beq.n	800acb8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fbfd 	bl	800b4b0 <USBD_CtlError>
                break;
 800acb6:	e091      	b.n	800addc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	da0b      	bge.n	800acd8 <USBD_StdEPReq+0x19e>
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	3310      	adds	r3, #16
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	4413      	add	r3, r2
 800acd4:	3304      	adds	r3, #4
 800acd6:	e00b      	b.n	800acf0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	3304      	adds	r3, #4
 800acf0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2202      	movs	r2, #2
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fc47 	bl	800b592 <USBD_CtlSendData>
              break;
 800ad04:	e06a      	b.n	800addc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	da11      	bge.n	800ad32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	f003 020f 	and.w	r2, r3, #15
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	3324      	adds	r3, #36	@ 0x24
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d117      	bne.n	800ad58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fbc0 	bl	800b4b0 <USBD_CtlError>
                  break;
 800ad30:	e054      	b.n	800addc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	f003 020f 	and.w	r2, r3, #15
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d104      	bne.n	800ad58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fbad 	bl	800b4b0 <USBD_CtlError>
                  break;
 800ad56:	e041      	b.n	800addc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	da0b      	bge.n	800ad78 <USBD_StdEPReq+0x23e>
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	3310      	adds	r3, #16
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	3304      	adds	r3, #4
 800ad76:	e00b      	b.n	800ad90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	3304      	adds	r3, #4
 800ad90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <USBD_StdEPReq+0x264>
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b80      	cmp	r3, #128	@ 0x80
 800ad9c:	d103      	bne.n	800ada6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e00e      	b.n	800adc4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f001 f85a 	bl	800be64 <USBD_LL_IsStallEP>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2201      	movs	r2, #1
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	e002      	b.n	800adc4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2202      	movs	r2, #2
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fbe1 	bl	800b592 <USBD_CtlSendData>
              break;
 800add0:	e004      	b.n	800addc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fb6b 	bl	800b4b0 <USBD_CtlError>
              break;
 800adda:	bf00      	nop
          }
          break;
 800addc:	e004      	b.n	800ade8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fb65 	bl	800b4b0 <USBD_CtlError>
          break;
 800ade6:	bf00      	nop
      }
      break;
 800ade8:	e004      	b.n	800adf4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fb5f 	bl	800b4b0 <USBD_CtlError>
      break;
 800adf2:	bf00      	nop
  }

  return ret;
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	885b      	ldrh	r3, [r3, #2]
 800ae1a:	0a1b      	lsrs	r3, r3, #8
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	2b0e      	cmp	r3, #14
 800ae22:	f200 8152 	bhi.w	800b0ca <USBD_GetDescriptor+0x2ca>
 800ae26:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <USBD_GetDescriptor+0x2c>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae9d 	.word	0x0800ae9d
 800ae30:	0800aeb5 	.word	0x0800aeb5
 800ae34:	0800aef5 	.word	0x0800aef5
 800ae38:	0800b0cb 	.word	0x0800b0cb
 800ae3c:	0800b0cb 	.word	0x0800b0cb
 800ae40:	0800b06b 	.word	0x0800b06b
 800ae44:	0800b097 	.word	0x0800b097
 800ae48:	0800b0cb 	.word	0x0800b0cb
 800ae4c:	0800b0cb 	.word	0x0800b0cb
 800ae50:	0800b0cb 	.word	0x0800b0cb
 800ae54:	0800b0cb 	.word	0x0800b0cb
 800ae58:	0800b0cb 	.word	0x0800b0cb
 800ae5c:	0800b0cb 	.word	0x0800b0cb
 800ae60:	0800b0cb 	.word	0x0800b0cb
 800ae64:	0800ae69 	.word	0x0800ae69
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	7c12      	ldrb	r2, [r2, #16]
 800ae80:	f107 0108 	add.w	r1, r7, #8
 800ae84:	4610      	mov	r0, r2
 800ae86:	4798      	blx	r3
 800ae88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae8a:	e126      	b.n	800b0da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fb0e 	bl	800b4b0 <USBD_CtlError>
        err++;
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	3301      	adds	r3, #1
 800ae98:	72fb      	strb	r3, [r7, #11]
      break;
 800ae9a:	e11e      	b.n	800b0da <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	7c12      	ldrb	r2, [r2, #16]
 800aea8:	f107 0108 	add.w	r1, r7, #8
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3
 800aeb0:	60f8      	str	r0, [r7, #12]
      break;
 800aeb2:	e112      	b.n	800b0da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7c1b      	ldrb	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10d      	bne.n	800aed8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	f107 0208 	add.w	r2, r7, #8
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3301      	adds	r3, #1
 800aed2:	2202      	movs	r2, #2
 800aed4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aed6:	e100      	b.n	800b0da <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee0:	f107 0208 	add.w	r2, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3301      	adds	r3, #1
 800aeee:	2202      	movs	r2, #2
 800aef0:	701a      	strb	r2, [r3, #0]
      break;
 800aef2:	e0f2      	b.n	800b0da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	885b      	ldrh	r3, [r3, #2]
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b05      	cmp	r3, #5
 800aefc:	f200 80ac 	bhi.w	800b058 <USBD_GetDescriptor+0x258>
 800af00:	a201      	add	r2, pc, #4	@ (adr r2, 800af08 <USBD_GetDescriptor+0x108>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af21 	.word	0x0800af21
 800af0c:	0800af55 	.word	0x0800af55
 800af10:	0800af89 	.word	0x0800af89
 800af14:	0800afbd 	.word	0x0800afbd
 800af18:	0800aff1 	.word	0x0800aff1
 800af1c:	0800b025 	.word	0x0800b025
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	7c12      	ldrb	r2, [r2, #16]
 800af38:	f107 0108 	add.w	r1, r7, #8
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
 800af40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af42:	e091      	b.n	800b068 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fab2 	bl	800b4b0 <USBD_CtlError>
            err++;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	3301      	adds	r3, #1
 800af50:	72fb      	strb	r3, [r7, #11]
          break;
 800af52:	e089      	b.n	800b068 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	7c12      	ldrb	r2, [r2, #16]
 800af6c:	f107 0108 	add.w	r1, r7, #8
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
 800af74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af76:	e077      	b.n	800b068 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa98 	bl	800b4b0 <USBD_CtlError>
            err++;
 800af80:	7afb      	ldrb	r3, [r7, #11]
 800af82:	3301      	adds	r3, #1
 800af84:	72fb      	strb	r3, [r7, #11]
          break;
 800af86:	e06f      	b.n	800b068 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	7c12      	ldrb	r2, [r2, #16]
 800afa0:	f107 0108 	add.w	r1, r7, #8
 800afa4:	4610      	mov	r0, r2
 800afa6:	4798      	blx	r3
 800afa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afaa:	e05d      	b.n	800b068 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fa7e 	bl	800b4b0 <USBD_CtlError>
            err++;
 800afb4:	7afb      	ldrb	r3, [r7, #11]
 800afb6:	3301      	adds	r3, #1
 800afb8:	72fb      	strb	r3, [r7, #11]
          break;
 800afba:	e055      	b.n	800b068 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	7c12      	ldrb	r2, [r2, #16]
 800afd4:	f107 0108 	add.w	r1, r7, #8
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
 800afdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afde:	e043      	b.n	800b068 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa64 	bl	800b4b0 <USBD_CtlError>
            err++;
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	3301      	adds	r3, #1
 800afec:	72fb      	strb	r3, [r7, #11]
          break;
 800afee:	e03b      	b.n	800b068 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	7c12      	ldrb	r2, [r2, #16]
 800b008:	f107 0108 	add.w	r1, r7, #8
 800b00c:	4610      	mov	r0, r2
 800b00e:	4798      	blx	r3
 800b010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b012:	e029      	b.n	800b068 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa4a 	bl	800b4b0 <USBD_CtlError>
            err++;
 800b01c:	7afb      	ldrb	r3, [r7, #11]
 800b01e:	3301      	adds	r3, #1
 800b020:	72fb      	strb	r3, [r7, #11]
          break;
 800b022:	e021      	b.n	800b068 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00b      	beq.n	800b048 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	7c12      	ldrb	r2, [r2, #16]
 800b03c:	f107 0108 	add.w	r1, r7, #8
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b046:	e00f      	b.n	800b068 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa30 	bl	800b4b0 <USBD_CtlError>
            err++;
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	3301      	adds	r3, #1
 800b054:	72fb      	strb	r3, [r7, #11]
          break;
 800b056:	e007      	b.n	800b068 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fa28 	bl	800b4b0 <USBD_CtlError>
          err++;
 800b060:	7afb      	ldrb	r3, [r7, #11]
 800b062:	3301      	adds	r3, #1
 800b064:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b066:	bf00      	nop
      }
      break;
 800b068:	e037      	b.n	800b0da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7c1b      	ldrb	r3, [r3, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d109      	bne.n	800b086 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07a:	f107 0208 	add.w	r2, r7, #8
 800b07e:	4610      	mov	r0, r2
 800b080:	4798      	blx	r3
 800b082:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b084:	e029      	b.n	800b0da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fa11 	bl	800b4b0 <USBD_CtlError>
        err++;
 800b08e:	7afb      	ldrb	r3, [r7, #11]
 800b090:	3301      	adds	r3, #1
 800b092:	72fb      	strb	r3, [r7, #11]
      break;
 800b094:	e021      	b.n	800b0da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	7c1b      	ldrb	r3, [r3, #16]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10d      	bne.n	800b0ba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a6:	f107 0208 	add.w	r2, r7, #8
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	4798      	blx	r3
 800b0ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	2207      	movs	r2, #7
 800b0b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0b8:	e00f      	b.n	800b0da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f9f7 	bl	800b4b0 <USBD_CtlError>
        err++;
 800b0c2:	7afb      	ldrb	r3, [r7, #11]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0c8:	e007      	b.n	800b0da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f9ef 	bl	800b4b0 <USBD_CtlError>
      err++;
 800b0d2:	7afb      	ldrb	r3, [r7, #11]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0d8:	bf00      	nop
  }

  if (err != 0U)
 800b0da:	7afb      	ldrb	r3, [r7, #11]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d11e      	bne.n	800b11e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	88db      	ldrh	r3, [r3, #6]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d016      	beq.n	800b116 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b0e8:	893b      	ldrh	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00e      	beq.n	800b10c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	88da      	ldrh	r2, [r3, #6]
 800b0f2:	893b      	ldrh	r3, [r7, #8]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	bf28      	it	cs
 800b0f8:	4613      	movcs	r3, r2
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0fe:	893b      	ldrh	r3, [r7, #8]
 800b100:	461a      	mov	r2, r3
 800b102:	68f9      	ldr	r1, [r7, #12]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fa44 	bl	800b592 <USBD_CtlSendData>
 800b10a:	e009      	b.n	800b120 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9ce 	bl	800b4b0 <USBD_CtlError>
 800b114:	e004      	b.n	800b120 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fa95 	bl	800b646 <USBD_CtlSendStatus>
 800b11c:	e000      	b.n	800b120 <USBD_GetDescriptor+0x320>
    return;
 800b11e:	bf00      	nop
  }
}
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop

0800b128 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	889b      	ldrh	r3, [r3, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d131      	bne.n	800b19e <USBD_SetAddress+0x76>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	88db      	ldrh	r3, [r3, #6]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d12d      	bne.n	800b19e <USBD_SetAddress+0x76>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	2b7f      	cmp	r3, #127	@ 0x7f
 800b148:	d829      	bhi.n	800b19e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	885b      	ldrh	r3, [r3, #2]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d104      	bne.n	800b16c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f9a3 	bl	800b4b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16a:	e01d      	b.n	800b1a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	7bfa      	ldrb	r2, [r7, #15]
 800b170:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fe9f 	bl	800bebc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fa61 	bl	800b646 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b192:	e009      	b.n	800b1a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19c:	e004      	b.n	800b1a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f985 	bl	800b4b0 <USBD_CtlError>
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	885b      	ldrh	r3, [r3, #2]
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	4b4c      	ldr	r3, [pc, #304]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b1c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1c8:	4b4b      	ldr	r3, [pc, #300]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d905      	bls.n	800b1dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f96c 	bl	800b4b0 <USBD_CtlError>
    return USBD_FAIL;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e088      	b.n	800b2ee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d002      	beq.n	800b1ee <USBD_SetConfig+0x3e>
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d025      	beq.n	800b238 <USBD_SetConfig+0x88>
 800b1ec:	e071      	b.n	800b2d2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1ee:	4b42      	ldr	r3, [pc, #264]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01c      	beq.n	800b230 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b1f6:	4b40      	ldr	r3, [pc, #256]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b200:	4b3d      	ldr	r3, [pc, #244]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff f991 	bl	800a52e <USBD_SetClassConfig>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d004      	beq.n	800b220 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f949 	bl	800b4b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b21e:	e065      	b.n	800b2ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa10 	bl	800b646 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2203      	movs	r2, #3
 800b22a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b22e:	e05d      	b.n	800b2ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa08 	bl	800b646 <USBD_CtlSendStatus>
      break;
 800b236:	e059      	b.n	800b2ec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b238:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d112      	bne.n	800b266 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b248:	4b2b      	ldr	r3, [pc, #172]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	461a      	mov	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b252:	4b29      	ldr	r3, [pc, #164]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff f984 	bl	800a566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f9f1 	bl	800b646 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b264:	e042      	b.n	800b2ec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b266:	4b24      	ldr	r3, [pc, #144]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	d02a      	beq.n	800b2ca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff f972 	bl	800a566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b282:	4b1d      	ldr	r3, [pc, #116]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b28c:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff f94b 	bl	800a52e <USBD_SetClassConfig>
 800b298:	4603      	mov	r3, r0
 800b29a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00f      	beq.n	800b2c2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f903 	bl	800b4b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff f957 	bl	800a566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2c0:	e014      	b.n	800b2ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f9bf 	bl	800b646 <USBD_CtlSendStatus>
      break;
 800b2c8:	e010      	b.n	800b2ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9bb 	bl	800b646 <USBD_CtlSendStatus>
      break;
 800b2d0:	e00c      	b.n	800b2ec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f8eb 	bl	800b4b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2da:	4b07      	ldr	r3, [pc, #28]	@ (800b2f8 <USBD_SetConfig+0x148>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff f940 	bl	800a566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ea:	bf00      	nop
  }

  return ret;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20000468 	.word	0x20000468

0800b2fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	88db      	ldrh	r3, [r3, #6]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d004      	beq.n	800b318 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f8cd 	bl	800b4b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b316:	e023      	b.n	800b360 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b02      	cmp	r3, #2
 800b322:	dc02      	bgt.n	800b32a <USBD_GetConfig+0x2e>
 800b324:	2b00      	cmp	r3, #0
 800b326:	dc03      	bgt.n	800b330 <USBD_GetConfig+0x34>
 800b328:	e015      	b.n	800b356 <USBD_GetConfig+0x5a>
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d00b      	beq.n	800b346 <USBD_GetConfig+0x4a>
 800b32e:	e012      	b.n	800b356 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3308      	adds	r3, #8
 800b33a:	2201      	movs	r2, #1
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f927 	bl	800b592 <USBD_CtlSendData>
        break;
 800b344:	e00c      	b.n	800b360 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3304      	adds	r3, #4
 800b34a:	2201      	movs	r2, #1
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f91f 	bl	800b592 <USBD_CtlSendData>
        break;
 800b354:	e004      	b.n	800b360 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f8a9 	bl	800b4b0 <USBD_CtlError>
        break;
 800b35e:	bf00      	nop
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d81e      	bhi.n	800b3be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	88db      	ldrh	r3, [r3, #6]
 800b384:	2b02      	cmp	r3, #2
 800b386:	d004      	beq.n	800b392 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f890 	bl	800b4b0 <USBD_CtlError>
        break;
 800b390:	e01a      	b.n	800b3c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d005      	beq.n	800b3ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	f043 0202 	orr.w	r2, r3, #2
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	330c      	adds	r3, #12
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f8eb 	bl	800b592 <USBD_CtlSendData>
      break;
 800b3bc:	e004      	b.n	800b3c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f875 	bl	800b4b0 <USBD_CtlError>
      break;
 800b3c6:	bf00      	nop
  }
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	885b      	ldrh	r3, [r3, #2]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d106      	bne.n	800b3f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f92b 	bl	800b646 <USBD_CtlSendStatus>
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d80b      	bhi.n	800b428 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	885b      	ldrh	r3, [r3, #2]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d10c      	bne.n	800b432 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f910 	bl	800b646 <USBD_CtlSendStatus>
      }
      break;
 800b426:	e004      	b.n	800b432 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f840 	bl	800b4b0 <USBD_CtlError>
      break;
 800b430:	e000      	b.n	800b434 <USBD_ClrFeature+0x3c>
      break;
 800b432:	bf00      	nop
  }
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	781a      	ldrb	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3301      	adds	r3, #1
 800b456:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	781a      	ldrb	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7ff fa91 	bl	800a98e <SWAPBYTE>
 800b46c:	4603      	mov	r3, r0
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3301      	adds	r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f7ff fa84 	bl	800a98e <SWAPBYTE>
 800b486:	4603      	mov	r3, r0
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3301      	adds	r3, #1
 800b492:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3301      	adds	r3, #1
 800b498:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff fa77 	bl	800a98e <SWAPBYTE>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	80da      	strh	r2, [r3, #6]
}
 800b4a8:	bf00      	nop
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4ba:	2180      	movs	r1, #128	@ 0x80
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fc93 	bl	800bde8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fc8f 	bl	800bde8 <USBD_LL_StallEP>
}
 800b4ca:	bf00      	nop
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b086      	sub	sp, #24
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d036      	beq.n	800b556 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4ec:	6938      	ldr	r0, [r7, #16]
 800b4ee:	f000 f836 	bl	800b55e <USBD_GetLen>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	005b      	lsls	r3, r3, #1
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	4413      	add	r3, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	3301      	adds	r3, #1
 800b510:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	4413      	add	r3, r2
 800b518:	2203      	movs	r2, #3
 800b51a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	3301      	adds	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b522:	e013      	b.n	800b54c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	7812      	ldrb	r2, [r2, #0]
 800b52e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	3301      	adds	r3, #1
 800b534:	613b      	str	r3, [r7, #16]
    idx++;
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	3301      	adds	r3, #1
 800b53a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	4413      	add	r3, r2
 800b542:	2200      	movs	r2, #0
 800b544:	701a      	strb	r2, [r3, #0]
    idx++;
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	3301      	adds	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e7      	bne.n	800b524 <USBD_GetString+0x52>
 800b554:	e000      	b.n	800b558 <USBD_GetString+0x86>
    return;
 800b556:	bf00      	nop
  }
}
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b566:	2300      	movs	r3, #0
 800b568:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b56e:	e005      	b.n	800b57c <USBD_GetLen+0x1e>
  {
    len++;
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	3301      	adds	r3, #1
 800b574:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	3301      	adds	r3, #1
 800b57a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1f5      	bne.n	800b570 <USBD_GetLen+0x12>
  }

  return len;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 fc9e 	bl	800befa <USBD_LL_Transmit>

  return USBD_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	2100      	movs	r1, #0
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 fc8d 	bl	800befa <USBD_LL_Transmit>

  return USBD_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2203      	movs	r2, #3
 800b5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	2100      	movs	r1, #0
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fc91 	bl	800bf3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	2100      	movs	r1, #0
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fc80 	bl	800bf3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2204      	movs	r2, #4
 800b652:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b656:	2300      	movs	r3, #0
 800b658:	2200      	movs	r2, #0
 800b65a:	2100      	movs	r1, #0
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fc4c 	bl	800befa <USBD_LL_Transmit>

  return USBD_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2205      	movs	r2, #5
 800b678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fc5a 	bl	800bf3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
	...

0800b694 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b698:	2200      	movs	r2, #0
 800b69a:	4912      	ldr	r1, [pc, #72]	@ (800b6e4 <MX_USB_Device_Init+0x50>)
 800b69c:	4812      	ldr	r0, [pc, #72]	@ (800b6e8 <MX_USB_Device_Init+0x54>)
 800b69e:	f7fe fed8 	bl	800a452 <USBD_Init>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b6a8:	f7f5 fbea 	bl	8000e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b6ac:	490f      	ldr	r1, [pc, #60]	@ (800b6ec <MX_USB_Device_Init+0x58>)
 800b6ae:	480e      	ldr	r0, [pc, #56]	@ (800b6e8 <MX_USB_Device_Init+0x54>)
 800b6b0:	f7fe feff 	bl	800a4b2 <USBD_RegisterClass>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b6ba:	f7f5 fbe1 	bl	8000e80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b6be:	490c      	ldr	r1, [pc, #48]	@ (800b6f0 <MX_USB_Device_Init+0x5c>)
 800b6c0:	4809      	ldr	r0, [pc, #36]	@ (800b6e8 <MX_USB_Device_Init+0x54>)
 800b6c2:	f7fe fe2b 	bl	800a31c <USBD_CDC_RegisterInterface>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b6cc:	f7f5 fbd8 	bl	8000e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b6d0:	4805      	ldr	r0, [pc, #20]	@ (800b6e8 <MX_USB_Device_Init+0x54>)
 800b6d2:	f7fe ff15 	bl	800a500 <USBD_Start>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b6dc:	f7f5 fbd0 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b6e0:	bf00      	nop
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	20000130 	.word	0x20000130
 800b6e8:	2000046c 	.word	0x2000046c
 800b6ec:	20000018 	.word	0x20000018
 800b6f0:	2000011c 	.word	0x2000011c

0800b6f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4905      	ldr	r1, [pc, #20]	@ (800b710 <CDC_Init_FS+0x1c>)
 800b6fc:	4805      	ldr	r0, [pc, #20]	@ (800b714 <CDC_Init_FS+0x20>)
 800b6fe:	f7fe fe22 	bl	800a346 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b702:	4905      	ldr	r1, [pc, #20]	@ (800b718 <CDC_Init_FS+0x24>)
 800b704:	4803      	ldr	r0, [pc, #12]	@ (800b714 <CDC_Init_FS+0x20>)
 800b706:	f7fe fe3a 	bl	800a37e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b70a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20000b3c 	.word	0x20000b3c
 800b714:	2000046c 	.word	0x2000046c
 800b718:	2000073c 	.word	0x2000073c

0800b71c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b720:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b722:	4618      	mov	r0, r3
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
 800b738:	4613      	mov	r3, r2
 800b73a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	2b23      	cmp	r3, #35	@ 0x23
 800b740:	d84a      	bhi.n	800b7d8 <CDC_Control_FS+0xac>
 800b742:	a201      	add	r2, pc, #4	@ (adr r2, 800b748 <CDC_Control_FS+0x1c>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b7d9 	.word	0x0800b7d9
 800b74c:	0800b7d9 	.word	0x0800b7d9
 800b750:	0800b7d9 	.word	0x0800b7d9
 800b754:	0800b7d9 	.word	0x0800b7d9
 800b758:	0800b7d9 	.word	0x0800b7d9
 800b75c:	0800b7d9 	.word	0x0800b7d9
 800b760:	0800b7d9 	.word	0x0800b7d9
 800b764:	0800b7d9 	.word	0x0800b7d9
 800b768:	0800b7d9 	.word	0x0800b7d9
 800b76c:	0800b7d9 	.word	0x0800b7d9
 800b770:	0800b7d9 	.word	0x0800b7d9
 800b774:	0800b7d9 	.word	0x0800b7d9
 800b778:	0800b7d9 	.word	0x0800b7d9
 800b77c:	0800b7d9 	.word	0x0800b7d9
 800b780:	0800b7d9 	.word	0x0800b7d9
 800b784:	0800b7d9 	.word	0x0800b7d9
 800b788:	0800b7d9 	.word	0x0800b7d9
 800b78c:	0800b7d9 	.word	0x0800b7d9
 800b790:	0800b7d9 	.word	0x0800b7d9
 800b794:	0800b7d9 	.word	0x0800b7d9
 800b798:	0800b7d9 	.word	0x0800b7d9
 800b79c:	0800b7d9 	.word	0x0800b7d9
 800b7a0:	0800b7d9 	.word	0x0800b7d9
 800b7a4:	0800b7d9 	.word	0x0800b7d9
 800b7a8:	0800b7d9 	.word	0x0800b7d9
 800b7ac:	0800b7d9 	.word	0x0800b7d9
 800b7b0:	0800b7d9 	.word	0x0800b7d9
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	0800b7d9 	.word	0x0800b7d9
 800b7bc:	0800b7d9 	.word	0x0800b7d9
 800b7c0:	0800b7d9 	.word	0x0800b7d9
 800b7c4:	0800b7d9 	.word	0x0800b7d9
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7d9 	.word	0x0800b7d9
 800b7d0:	0800b7d9 	.word	0x0800b7d9
 800b7d4:	0800b7d9 	.word	0x0800b7d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7d8:	bf00      	nop
  }

  return (USBD_OK);
 800b7da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	4805      	ldr	r0, [pc, #20]	@ (800b80c <CDC_Receive_FS+0x24>)
 800b7f6:	f7fe fdc2 	bl	800a37e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7fa:	4804      	ldr	r0, [pc, #16]	@ (800b80c <CDC_Receive_FS+0x24>)
 800b7fc:	f7fe fe02 	bl	800a404 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b800:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	2000046c 	.word	0x2000046c

0800b810 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b820:	4b0c      	ldr	r3, [pc, #48]	@ (800b854 <CDC_Transmit_FS+0x44>)
 800b822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b826:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d001      	beq.n	800b834 <CDC_Transmit_FS+0x24>
    return USBD_BUSY;
 800b830:	2301      	movs	r3, #1
 800b832:	e00b      	b.n	800b84c <CDC_Transmit_FS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b834:	887b      	ldrh	r3, [r7, #2]
 800b836:	461a      	mov	r2, r3
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	4806      	ldr	r0, [pc, #24]	@ (800b854 <CDC_Transmit_FS+0x44>)
 800b83c:	f7fe fd83 	bl	800a346 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b840:	4804      	ldr	r0, [pc, #16]	@ (800b854 <CDC_Transmit_FS+0x44>)
 800b842:	f7fe fdb4 	bl	800a3ae <USBD_CDC_TransmitPacket>
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	2000046c 	.word	0x2000046c

0800b858 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b86a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	371c      	adds	r7, #28
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
	...

0800b87c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	6039      	str	r1, [r7, #0]
 800b886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2212      	movs	r2, #18
 800b88c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b88e:	4b03      	ldr	r3, [pc, #12]	@ (800b89c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	20000150 	.word	0x20000150

0800b8a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	6039      	str	r1, [r7, #0]
 800b8aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2204      	movs	r2, #4
 800b8b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8b2:	4b03      	ldr	r3, [pc, #12]	@ (800b8c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20000164 	.word	0x20000164

0800b8c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6039      	str	r1, [r7, #0]
 800b8ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d105      	bne.n	800b8e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	4907      	ldr	r1, [pc, #28]	@ (800b8f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b8da:	4808      	ldr	r0, [pc, #32]	@ (800b8fc <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8dc:	f7ff fdf9 	bl	800b4d2 <USBD_GetString>
 800b8e0:	e004      	b.n	800b8ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	4904      	ldr	r1, [pc, #16]	@ (800b8f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b8e6:	4805      	ldr	r0, [pc, #20]	@ (800b8fc <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8e8:	f7ff fdf3 	bl	800b4d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8ec:	4b02      	ldr	r3, [pc, #8]	@ (800b8f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000f3c 	.word	0x20000f3c
 800b8fc:	0800d0a4 	.word	0x0800d0a4

0800b900 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	6039      	str	r1, [r7, #0]
 800b90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	4904      	ldr	r1, [pc, #16]	@ (800b920 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b910:	4804      	ldr	r0, [pc, #16]	@ (800b924 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b912:	f7ff fdde 	bl	800b4d2 <USBD_GetString>
  return USBD_StrDesc;
 800b916:	4b02      	ldr	r3, [pc, #8]	@ (800b920 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20000f3c 	.word	0x20000f3c
 800b924:	0800d0bc 	.word	0x0800d0bc

0800b928 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	6039      	str	r1, [r7, #0]
 800b932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	221a      	movs	r2, #26
 800b938:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b93a:	f000 f843 	bl	800b9c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b93e:	4b02      	ldr	r3, [pc, #8]	@ (800b948 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20000168 	.word	0x20000168

0800b94c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	6039      	str	r1, [r7, #0]
 800b956:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b958:	79fb      	ldrb	r3, [r7, #7]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d105      	bne.n	800b96a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	4907      	ldr	r1, [pc, #28]	@ (800b980 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b962:	4808      	ldr	r0, [pc, #32]	@ (800b984 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b964:	f7ff fdb5 	bl	800b4d2 <USBD_GetString>
 800b968:	e004      	b.n	800b974 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	4904      	ldr	r1, [pc, #16]	@ (800b980 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b96e:	4805      	ldr	r0, [pc, #20]	@ (800b984 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b970:	f7ff fdaf 	bl	800b4d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b974:	4b02      	ldr	r3, [pc, #8]	@ (800b980 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000f3c 	.word	0x20000f3c
 800b984:	0800d0d0 	.word	0x0800d0d0

0800b988 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	6039      	str	r1, [r7, #0]
 800b992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d105      	bne.n	800b9a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4907      	ldr	r1, [pc, #28]	@ (800b9bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b99e:	4808      	ldr	r0, [pc, #32]	@ (800b9c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b9a0:	f7ff fd97 	bl	800b4d2 <USBD_GetString>
 800b9a4:	e004      	b.n	800b9b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	4904      	ldr	r1, [pc, #16]	@ (800b9bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b9aa:	4805      	ldr	r0, [pc, #20]	@ (800b9c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b9ac:	f7ff fd91 	bl	800b4d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9b0:	4b02      	ldr	r3, [pc, #8]	@ (800b9bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20000f3c 	.word	0x20000f3c
 800b9c0:	0800d0dc 	.word	0x0800d0dc

0800b9c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800ba08 <Get_SerialNum+0x44>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800ba0c <Get_SerialNum+0x48>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800ba10 <Get_SerialNum+0x4c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9ea:	2208      	movs	r2, #8
 800b9ec:	4909      	ldr	r1, [pc, #36]	@ (800ba14 <Get_SerialNum+0x50>)
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 f814 	bl	800ba1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9f4:	2204      	movs	r2, #4
 800b9f6:	4908      	ldr	r1, [pc, #32]	@ (800ba18 <Get_SerialNum+0x54>)
 800b9f8:	68b8      	ldr	r0, [r7, #8]
 800b9fa:	f000 f80f 	bl	800ba1c <IntToUnicode>
  }
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	1fff7590 	.word	0x1fff7590
 800ba0c:	1fff7594 	.word	0x1fff7594
 800ba10:	1fff7598 	.word	0x1fff7598
 800ba14:	2000016a 	.word	0x2000016a
 800ba18:	2000017a 	.word	0x2000017a

0800ba1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	4613      	mov	r3, r2
 800ba28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba2e:	2300      	movs	r3, #0
 800ba30:	75fb      	strb	r3, [r7, #23]
 800ba32:	e027      	b.n	800ba84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	0f1b      	lsrs	r3, r3, #28
 800ba38:	2b09      	cmp	r3, #9
 800ba3a:	d80b      	bhi.n	800ba54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	0f1b      	lsrs	r3, r3, #28
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	4619      	mov	r1, r3
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	440b      	add	r3, r1
 800ba4c:	3230      	adds	r2, #48	@ 0x30
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	e00a      	b.n	800ba6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	0f1b      	lsrs	r3, r3, #28
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	4619      	mov	r1, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	440b      	add	r3, r1
 800ba64:	3237      	adds	r2, #55	@ 0x37
 800ba66:	b2d2      	uxtb	r2, r2
 800ba68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	3301      	adds	r3, #1
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	4413      	add	r3, r2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	3301      	adds	r3, #1
 800ba82:	75fb      	strb	r3, [r7, #23]
 800ba84:	7dfa      	ldrb	r2, [r7, #23]
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d3d3      	bcc.n	800ba34 <IntToUnicode+0x18>
  }
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	371c      	adds	r7, #28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
	...

0800ba9c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b094      	sub	sp, #80	@ 0x50
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800baa4:	f107 030c 	add.w	r3, r7, #12
 800baa8:	2244      	movs	r2, #68	@ 0x44
 800baaa:	2100      	movs	r1, #0
 800baac:	4618      	mov	r0, r3
 800baae:	f000 fd03 	bl	800c4b8 <memset>
  if(pcdHandle->Instance==USB)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a15      	ldr	r2, [pc, #84]	@ (800bb0c <HAL_PCD_MspInit+0x70>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d123      	bne.n	800bb04 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800babc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bac0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bac2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bac6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bac8:	f107 030c 	add.w	r3, r7, #12
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f9 fe8f 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800bad8:	f7f5 f9d2 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800badc:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <HAL_PCD_MspInit+0x74>)
 800bade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae0:	4a0b      	ldr	r2, [pc, #44]	@ (800bb10 <HAL_PCD_MspInit+0x74>)
 800bae2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bae6:	6593      	str	r3, [r2, #88]	@ 0x58
 800bae8:	4b09      	ldr	r3, [pc, #36]	@ (800bb10 <HAL_PCD_MspInit+0x74>)
 800baea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baf0:	60bb      	str	r3, [r7, #8]
 800baf2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800baf4:	2200      	movs	r2, #0
 800baf6:	2100      	movs	r1, #0
 800baf8:	2014      	movs	r0, #20
 800bafa:	f7f6 fe96 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bafe:	2014      	movs	r0, #20
 800bb00:	f7f6 fead 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb04:	bf00      	nop
 800bb06:	3750      	adds	r7, #80	@ 0x50
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	40005c00 	.word	0x40005c00
 800bb10:	40021000 	.word	0x40021000

0800bb14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f7fe fd33 	bl	800a596 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bb4a:	78fa      	ldrb	r2, [r7, #3]
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	440b      	add	r3, r1
 800bb58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	78fb      	ldrb	r3, [r7, #3]
 800bb60:	4619      	mov	r1, r3
 800bb62:	f7fe fd6d 	bl	800a640 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bb66:	bf00      	nop
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b082      	sub	sp, #8
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bb80:	78fa      	ldrb	r2, [r7, #3]
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	4613      	mov	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	00db      	lsls	r3, r3, #3
 800bb8c:	440b      	add	r3, r1
 800bb8e:	3324      	adds	r3, #36	@ 0x24
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	78fb      	ldrb	r3, [r7, #3]
 800bb94:	4619      	mov	r1, r3
 800bb96:	f7fe fdb6 	bl	800a706 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bb9a:	bf00      	nop
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe feca 	bl	800a94a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	795b      	ldrb	r3, [r3, #5]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d001      	beq.n	800bbd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbd2:	f7f5 f955 	bl	8000e80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbdc:	7bfa      	ldrb	r2, [r7, #15]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fe74 	bl	800a8ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe fe20 	bl	800a832 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bbf2:	bf00      	nop
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fe6f 	bl	800a8ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7a5b      	ldrb	r3, [r3, #9]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc18:	4b04      	ldr	r3, [pc, #16]	@ (800bc2c <HAL_PCD_SuspendCallback+0x30>)
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	4a03      	ldr	r2, [pc, #12]	@ (800bc2c <HAL_PCD_SuspendCallback+0x30>)
 800bc1e:	f043 0306 	orr.w	r3, r3, #6
 800bc22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	e000ed00 	.word	0xe000ed00

0800bc30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	7a5b      	ldrb	r3, [r3, #9]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d007      	beq.n	800bc50 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc40:	4b08      	ldr	r3, [pc, #32]	@ (800bc64 <HAL_PCD_ResumeCallback+0x34>)
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	4a07      	ldr	r2, [pc, #28]	@ (800bc64 <HAL_PCD_ResumeCallback+0x34>)
 800bc46:	f023 0306 	bic.w	r3, r3, #6
 800bc4a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc4c:	f000 f9f8 	bl	800c040 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fe5f 	bl	800a91a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	e000ed00 	.word	0xe000ed00

0800bc68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bc70:	4a2b      	ldr	r2, [pc, #172]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a29      	ldr	r2, [pc, #164]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bc80:	4b27      	ldr	r3, [pc, #156]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc82:	4a28      	ldr	r2, [pc, #160]	@ (800bd24 <USBD_LL_Init+0xbc>)
 800bc84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc86:	4b26      	ldr	r3, [pc, #152]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc88:	2208      	movs	r2, #8
 800bc8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc8c:	4b24      	ldr	r3, [pc, #144]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc8e:	2202      	movs	r2, #2
 800bc90:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc92:	4b23      	ldr	r3, [pc, #140]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc94:	2202      	movs	r2, #2
 800bc96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc98:	4b21      	ldr	r3, [pc, #132]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc9e:	4b20      	ldr	r3, [pc, #128]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bca4:	4b1e      	ldr	r3, [pc, #120]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bcb0:	481b      	ldr	r0, [pc, #108]	@ (800bd20 <USBD_LL_Init+0xb8>)
 800bcb2:	f7f7 fa95 	bl	80031e0 <HAL_PCD_Init>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bcbc:	f7f5 f8e0 	bl	8000e80 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcc6:	2318      	movs	r3, #24
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	f7f8 ff50 	bl	8004b70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcd6:	2358      	movs	r3, #88	@ 0x58
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2180      	movs	r1, #128	@ 0x80
 800bcdc:	f7f8 ff48 	bl	8004b70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bce6:	23c0      	movs	r3, #192	@ 0xc0
 800bce8:	2200      	movs	r2, #0
 800bcea:	2181      	movs	r1, #129	@ 0x81
 800bcec:	f7f8 ff40 	bl	8004b70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcf6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	f7f8 ff37 	bl	8004b70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2182      	movs	r1, #130	@ 0x82
 800bd10:	f7f8 ff2e 	bl	8004b70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	2000113c 	.word	0x2000113c
 800bd24:	40005c00 	.word	0x40005c00

0800bd28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7f7 fb1c 	bl	800337c <HAL_PCD_Start>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f97e 	bl	800c04c <USBD_Get_USB_Status>
 800bd50:	4603      	mov	r3, r0
 800bd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	4608      	mov	r0, r1
 800bd68:	4611      	mov	r1, r2
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	70fb      	strb	r3, [r7, #3]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70bb      	strb	r3, [r7, #2]
 800bd74:	4613      	mov	r3, r2
 800bd76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd86:	78bb      	ldrb	r3, [r7, #2]
 800bd88:	883a      	ldrh	r2, [r7, #0]
 800bd8a:	78f9      	ldrb	r1, [r7, #3]
 800bd8c:	f7f7 fc63 	bl	8003656 <HAL_PCD_EP_Open>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 f958 	bl	800c04c <USBD_Get_USB_Status>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b084      	sub	sp, #16
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bdc4:	78fa      	ldrb	r2, [r7, #3]
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f7 fca3 	bl	8003714 <HAL_PCD_EP_Close>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 f939 	bl	800c04c <USBD_Get_USB_Status>
 800bdda:	4603      	mov	r3, r0
 800bddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdde:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be02:	78fa      	ldrb	r2, [r7, #3]
 800be04:	4611      	mov	r1, r2
 800be06:	4618      	mov	r0, r3
 800be08:	f7f7 fd4c 	bl	80038a4 <HAL_PCD_EP_SetStall>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	4618      	mov	r0, r3
 800be14:	f000 f91a 	bl	800c04c <USBD_Get_USB_Status>
 800be18:	4603      	mov	r3, r0
 800be1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	460b      	mov	r3, r1
 800be30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f7f7 fd7f 	bl	8003948 <HAL_PCD_EP_ClrStall>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	4618      	mov	r0, r3
 800be52:	f000 f8fb 	bl	800c04c <USBD_Get_USB_Status>
 800be56:	4603      	mov	r3, r0
 800be58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	460b      	mov	r3, r1
 800be6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	da0b      	bge.n	800be98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be80:	78fb      	ldrb	r3, [r7, #3]
 800be82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be86:	68f9      	ldr	r1, [r7, #12]
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	440b      	add	r3, r1
 800be92:	3312      	adds	r3, #18
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	e00b      	b.n	800beb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be9e:	68f9      	ldr	r1, [r7, #12]
 800bea0:	4613      	mov	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	440b      	add	r3, r1
 800beaa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800beae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bed6:	78fa      	ldrb	r2, [r7, #3]
 800bed8:	4611      	mov	r1, r2
 800beda:	4618      	mov	r0, r3
 800bedc:	f7f7 fb97 	bl	800360e <HAL_PCD_SetAddress>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f8b0 	bl	800c04c <USBD_Get_USB_Status>
 800beec:	4603      	mov	r3, r0
 800beee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b086      	sub	sp, #24
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	603b      	str	r3, [r7, #0]
 800bf06:	460b      	mov	r3, r1
 800bf08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf18:	7af9      	ldrb	r1, [r7, #11]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	f7f7 fc8a 	bl	8003836 <HAL_PCD_EP_Transmit>
 800bf22:	4603      	mov	r3, r0
 800bf24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 f88f 	bl	800c04c <USBD_Get_USB_Status>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf32:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf5a:	7af9      	ldrb	r1, [r7, #11]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	f7f7 fc20 	bl	80037a4 <HAL_PCD_EP_Receive>
 800bf64:	4603      	mov	r3, r0
 800bf66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f86e 	bl	800c04c <USBD_Get_USB_Status>
 800bf70:	4603      	mov	r3, r0
 800bf72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf74:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf90:	78fa      	ldrb	r2, [r7, #3]
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7f7 fc36 	bl	8003806 <HAL_PCD_EP_GetRxCount>
 800bf9a:	4603      	mov	r3, r0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <HAL_PCDEx_LPM_Callback+0x18>
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d013      	beq.n	800bfe2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bfba:	e023      	b.n	800c004 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	7a5b      	ldrb	r3, [r3, #9]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d007      	beq.n	800bfd4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfc4:	f000 f83c 	bl	800c040 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfc8:	4b10      	ldr	r3, [pc, #64]	@ (800c00c <HAL_PCDEx_LPM_Callback+0x68>)
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	4a0f      	ldr	r2, [pc, #60]	@ (800c00c <HAL_PCDEx_LPM_Callback+0x68>)
 800bfce:	f023 0306 	bic.w	r3, r3, #6
 800bfd2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fe fc9d 	bl	800a91a <USBD_LL_Resume>
    break;
 800bfe0:	e010      	b.n	800c004 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fc80 	bl	800a8ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	7a5b      	ldrb	r3, [r3, #9]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d005      	beq.n	800c002 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bff6:	4b05      	ldr	r3, [pc, #20]	@ (800c00c <HAL_PCDEx_LPM_Callback+0x68>)
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	4a04      	ldr	r2, [pc, #16]	@ (800c00c <HAL_PCDEx_LPM_Callback+0x68>)
 800bffc:	f043 0306 	orr.w	r3, r3, #6
 800c000:	6113      	str	r3, [r2, #16]
    break;
 800c002:	bf00      	nop
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	e000ed00 	.word	0xe000ed00

0800c010 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c018:	4b03      	ldr	r3, [pc, #12]	@ (800c028 <USBD_static_malloc+0x18>)
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	20001418 	.word	0x20001418

0800c02c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]

}
 800c034:	bf00      	nop
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c044:	f7f4 fe88 	bl	8000d58 <SystemClock_Config>
}
 800c048:	bf00      	nop
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d817      	bhi.n	800c090 <USBD_Get_USB_Status+0x44>
 800c060:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <USBD_Get_USB_Status+0x1c>)
 800c062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c066:	bf00      	nop
 800c068:	0800c079 	.word	0x0800c079
 800c06c:	0800c07f 	.word	0x0800c07f
 800c070:	0800c085 	.word	0x0800c085
 800c074:	0800c08b 	.word	0x0800c08b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]
    break;
 800c07c:	e00b      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	73fb      	strb	r3, [r7, #15]
    break;
 800c082:	e008      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c084:	2301      	movs	r3, #1
 800c086:	73fb      	strb	r3, [r7, #15]
    break;
 800c088:	e005      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c08a:	2303      	movs	r3, #3
 800c08c:	73fb      	strb	r3, [r7, #15]
    break;
 800c08e:	e002      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	73fb      	strb	r3, [r7, #15]
    break;
 800c094:	bf00      	nop
  }
  return usb_status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <std>:
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	b510      	push	{r4, lr}
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	e9c0 3300 	strd	r3, r3, [r0]
 800c0ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0b2:	6083      	str	r3, [r0, #8]
 800c0b4:	8181      	strh	r1, [r0, #12]
 800c0b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c0b8:	81c2      	strh	r2, [r0, #14]
 800c0ba:	6183      	str	r3, [r0, #24]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	2208      	movs	r2, #8
 800c0c0:	305c      	adds	r0, #92	@ 0x5c
 800c0c2:	f000 f9f9 	bl	800c4b8 <memset>
 800c0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0fc <std+0x58>)
 800c0c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c100 <std+0x5c>)
 800c0cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c104 <std+0x60>)
 800c0d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c108 <std+0x64>)
 800c0d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c10c <std+0x68>)
 800c0d8:	6224      	str	r4, [r4, #32]
 800c0da:	429c      	cmp	r4, r3
 800c0dc:	d006      	beq.n	800c0ec <std+0x48>
 800c0de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c0e2:	4294      	cmp	r4, r2
 800c0e4:	d002      	beq.n	800c0ec <std+0x48>
 800c0e6:	33d0      	adds	r3, #208	@ 0xd0
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	d105      	bne.n	800c0f8 <std+0x54>
 800c0ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f4:	f000 ba58 	b.w	800c5a8 <__retarget_lock_init_recursive>
 800c0f8:	bd10      	pop	{r4, pc}
 800c0fa:	bf00      	nop
 800c0fc:	0800c309 	.word	0x0800c309
 800c100:	0800c32b 	.word	0x0800c32b
 800c104:	0800c363 	.word	0x0800c363
 800c108:	0800c387 	.word	0x0800c387
 800c10c:	20001478 	.word	0x20001478

0800c110 <stdio_exit_handler>:
 800c110:	4a02      	ldr	r2, [pc, #8]	@ (800c11c <stdio_exit_handler+0xc>)
 800c112:	4903      	ldr	r1, [pc, #12]	@ (800c120 <stdio_exit_handler+0x10>)
 800c114:	4803      	ldr	r0, [pc, #12]	@ (800c124 <stdio_exit_handler+0x14>)
 800c116:	f000 b869 	b.w	800c1ec <_fwalk_sglue>
 800c11a:	bf00      	nop
 800c11c:	20000184 	.word	0x20000184
 800c120:	0800ce49 	.word	0x0800ce49
 800c124:	20000194 	.word	0x20000194

0800c128 <cleanup_stdio>:
 800c128:	6841      	ldr	r1, [r0, #4]
 800c12a:	4b0c      	ldr	r3, [pc, #48]	@ (800c15c <cleanup_stdio+0x34>)
 800c12c:	4299      	cmp	r1, r3
 800c12e:	b510      	push	{r4, lr}
 800c130:	4604      	mov	r4, r0
 800c132:	d001      	beq.n	800c138 <cleanup_stdio+0x10>
 800c134:	f000 fe88 	bl	800ce48 <_fflush_r>
 800c138:	68a1      	ldr	r1, [r4, #8]
 800c13a:	4b09      	ldr	r3, [pc, #36]	@ (800c160 <cleanup_stdio+0x38>)
 800c13c:	4299      	cmp	r1, r3
 800c13e:	d002      	beq.n	800c146 <cleanup_stdio+0x1e>
 800c140:	4620      	mov	r0, r4
 800c142:	f000 fe81 	bl	800ce48 <_fflush_r>
 800c146:	68e1      	ldr	r1, [r4, #12]
 800c148:	4b06      	ldr	r3, [pc, #24]	@ (800c164 <cleanup_stdio+0x3c>)
 800c14a:	4299      	cmp	r1, r3
 800c14c:	d004      	beq.n	800c158 <cleanup_stdio+0x30>
 800c14e:	4620      	mov	r0, r4
 800c150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c154:	f000 be78 	b.w	800ce48 <_fflush_r>
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	bf00      	nop
 800c15c:	20001478 	.word	0x20001478
 800c160:	200014e0 	.word	0x200014e0
 800c164:	20001548 	.word	0x20001548

0800c168 <global_stdio_init.part.0>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	4b0b      	ldr	r3, [pc, #44]	@ (800c198 <global_stdio_init.part.0+0x30>)
 800c16c:	4c0b      	ldr	r4, [pc, #44]	@ (800c19c <global_stdio_init.part.0+0x34>)
 800c16e:	4a0c      	ldr	r2, [pc, #48]	@ (800c1a0 <global_stdio_init.part.0+0x38>)
 800c170:	601a      	str	r2, [r3, #0]
 800c172:	4620      	mov	r0, r4
 800c174:	2200      	movs	r2, #0
 800c176:	2104      	movs	r1, #4
 800c178:	f7ff ff94 	bl	800c0a4 <std>
 800c17c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c180:	2201      	movs	r2, #1
 800c182:	2109      	movs	r1, #9
 800c184:	f7ff ff8e 	bl	800c0a4 <std>
 800c188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c18c:	2202      	movs	r2, #2
 800c18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c192:	2112      	movs	r1, #18
 800c194:	f7ff bf86 	b.w	800c0a4 <std>
 800c198:	200015b0 	.word	0x200015b0
 800c19c:	20001478 	.word	0x20001478
 800c1a0:	0800c111 	.word	0x0800c111

0800c1a4 <__sfp_lock_acquire>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	@ (800c1ac <__sfp_lock_acquire+0x8>)
 800c1a6:	f000 ba00 	b.w	800c5aa <__retarget_lock_acquire_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	200015b9 	.word	0x200015b9

0800c1b0 <__sfp_lock_release>:
 800c1b0:	4801      	ldr	r0, [pc, #4]	@ (800c1b8 <__sfp_lock_release+0x8>)
 800c1b2:	f000 b9fb 	b.w	800c5ac <__retarget_lock_release_recursive>
 800c1b6:	bf00      	nop
 800c1b8:	200015b9 	.word	0x200015b9

0800c1bc <__sinit>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	4604      	mov	r4, r0
 800c1c0:	f7ff fff0 	bl	800c1a4 <__sfp_lock_acquire>
 800c1c4:	6a23      	ldr	r3, [r4, #32]
 800c1c6:	b11b      	cbz	r3, 800c1d0 <__sinit+0x14>
 800c1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1cc:	f7ff bff0 	b.w	800c1b0 <__sfp_lock_release>
 800c1d0:	4b04      	ldr	r3, [pc, #16]	@ (800c1e4 <__sinit+0x28>)
 800c1d2:	6223      	str	r3, [r4, #32]
 800c1d4:	4b04      	ldr	r3, [pc, #16]	@ (800c1e8 <__sinit+0x2c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1f5      	bne.n	800c1c8 <__sinit+0xc>
 800c1dc:	f7ff ffc4 	bl	800c168 <global_stdio_init.part.0>
 800c1e0:	e7f2      	b.n	800c1c8 <__sinit+0xc>
 800c1e2:	bf00      	nop
 800c1e4:	0800c129 	.word	0x0800c129
 800c1e8:	200015b0 	.word	0x200015b0

0800c1ec <_fwalk_sglue>:
 800c1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4688      	mov	r8, r1
 800c1f4:	4614      	mov	r4, r2
 800c1f6:	2600      	movs	r6, #0
 800c1f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1fc:	f1b9 0901 	subs.w	r9, r9, #1
 800c200:	d505      	bpl.n	800c20e <_fwalk_sglue+0x22>
 800c202:	6824      	ldr	r4, [r4, #0]
 800c204:	2c00      	cmp	r4, #0
 800c206:	d1f7      	bne.n	800c1f8 <_fwalk_sglue+0xc>
 800c208:	4630      	mov	r0, r6
 800c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20e:	89ab      	ldrh	r3, [r5, #12]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d907      	bls.n	800c224 <_fwalk_sglue+0x38>
 800c214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c218:	3301      	adds	r3, #1
 800c21a:	d003      	beq.n	800c224 <_fwalk_sglue+0x38>
 800c21c:	4629      	mov	r1, r5
 800c21e:	4638      	mov	r0, r7
 800c220:	47c0      	blx	r8
 800c222:	4306      	orrs	r6, r0
 800c224:	3568      	adds	r5, #104	@ 0x68
 800c226:	e7e9      	b.n	800c1fc <_fwalk_sglue+0x10>

0800c228 <iprintf>:
 800c228:	b40f      	push	{r0, r1, r2, r3}
 800c22a:	b507      	push	{r0, r1, r2, lr}
 800c22c:	4906      	ldr	r1, [pc, #24]	@ (800c248 <iprintf+0x20>)
 800c22e:	ab04      	add	r3, sp, #16
 800c230:	6808      	ldr	r0, [r1, #0]
 800c232:	f853 2b04 	ldr.w	r2, [r3], #4
 800c236:	6881      	ldr	r1, [r0, #8]
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	f000 fadb 	bl	800c7f4 <_vfiprintf_r>
 800c23e:	b003      	add	sp, #12
 800c240:	f85d eb04 	ldr.w	lr, [sp], #4
 800c244:	b004      	add	sp, #16
 800c246:	4770      	bx	lr
 800c248:	20000190 	.word	0x20000190

0800c24c <_puts_r>:
 800c24c:	6a03      	ldr	r3, [r0, #32]
 800c24e:	b570      	push	{r4, r5, r6, lr}
 800c250:	6884      	ldr	r4, [r0, #8]
 800c252:	4605      	mov	r5, r0
 800c254:	460e      	mov	r6, r1
 800c256:	b90b      	cbnz	r3, 800c25c <_puts_r+0x10>
 800c258:	f7ff ffb0 	bl	800c1bc <__sinit>
 800c25c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c25e:	07db      	lsls	r3, r3, #31
 800c260:	d405      	bmi.n	800c26e <_puts_r+0x22>
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	0598      	lsls	r0, r3, #22
 800c266:	d402      	bmi.n	800c26e <_puts_r+0x22>
 800c268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c26a:	f000 f99e 	bl	800c5aa <__retarget_lock_acquire_recursive>
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	0719      	lsls	r1, r3, #28
 800c272:	d502      	bpl.n	800c27a <_puts_r+0x2e>
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d135      	bne.n	800c2e6 <_puts_r+0x9a>
 800c27a:	4621      	mov	r1, r4
 800c27c:	4628      	mov	r0, r5
 800c27e:	f000 f8c5 	bl	800c40c <__swsetup_r>
 800c282:	b380      	cbz	r0, 800c2e6 <_puts_r+0x9a>
 800c284:	f04f 35ff 	mov.w	r5, #4294967295
 800c288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c28a:	07da      	lsls	r2, r3, #31
 800c28c:	d405      	bmi.n	800c29a <_puts_r+0x4e>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	059b      	lsls	r3, r3, #22
 800c292:	d402      	bmi.n	800c29a <_puts_r+0x4e>
 800c294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c296:	f000 f989 	bl	800c5ac <__retarget_lock_release_recursive>
 800c29a:	4628      	mov	r0, r5
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	da04      	bge.n	800c2ac <_puts_r+0x60>
 800c2a2:	69a2      	ldr	r2, [r4, #24]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	dc17      	bgt.n	800c2d8 <_puts_r+0x8c>
 800c2a8:	290a      	cmp	r1, #10
 800c2aa:	d015      	beq.n	800c2d8 <_puts_r+0x8c>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	6022      	str	r2, [r4, #0]
 800c2b2:	7019      	strb	r1, [r3, #0]
 800c2b4:	68a3      	ldr	r3, [r4, #8]
 800c2b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	60a3      	str	r3, [r4, #8]
 800c2be:	2900      	cmp	r1, #0
 800c2c0:	d1ed      	bne.n	800c29e <_puts_r+0x52>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	da11      	bge.n	800c2ea <_puts_r+0x9e>
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	210a      	movs	r1, #10
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f000 f85f 	bl	800c38e <__swbuf_r>
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d0d7      	beq.n	800c284 <_puts_r+0x38>
 800c2d4:	250a      	movs	r5, #10
 800c2d6:	e7d7      	b.n	800c288 <_puts_r+0x3c>
 800c2d8:	4622      	mov	r2, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 f857 	bl	800c38e <__swbuf_r>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	d1e7      	bne.n	800c2b4 <_puts_r+0x68>
 800c2e4:	e7ce      	b.n	800c284 <_puts_r+0x38>
 800c2e6:	3e01      	subs	r6, #1
 800c2e8:	e7e4      	b.n	800c2b4 <_puts_r+0x68>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	6022      	str	r2, [r4, #0]
 800c2f0:	220a      	movs	r2, #10
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	e7ee      	b.n	800c2d4 <_puts_r+0x88>
	...

0800c2f8 <puts>:
 800c2f8:	4b02      	ldr	r3, [pc, #8]	@ (800c304 <puts+0xc>)
 800c2fa:	4601      	mov	r1, r0
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	f7ff bfa5 	b.w	800c24c <_puts_r>
 800c302:	bf00      	nop
 800c304:	20000190 	.word	0x20000190

0800c308 <__sread>:
 800c308:	b510      	push	{r4, lr}
 800c30a:	460c      	mov	r4, r1
 800c30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c310:	f000 f8fc 	bl	800c50c <_read_r>
 800c314:	2800      	cmp	r0, #0
 800c316:	bfab      	itete	ge
 800c318:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c31a:	89a3      	ldrhlt	r3, [r4, #12]
 800c31c:	181b      	addge	r3, r3, r0
 800c31e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c322:	bfac      	ite	ge
 800c324:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c326:	81a3      	strhlt	r3, [r4, #12]
 800c328:	bd10      	pop	{r4, pc}

0800c32a <__swrite>:
 800c32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c32e:	461f      	mov	r7, r3
 800c330:	898b      	ldrh	r3, [r1, #12]
 800c332:	05db      	lsls	r3, r3, #23
 800c334:	4605      	mov	r5, r0
 800c336:	460c      	mov	r4, r1
 800c338:	4616      	mov	r6, r2
 800c33a:	d505      	bpl.n	800c348 <__swrite+0x1e>
 800c33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c340:	2302      	movs	r3, #2
 800c342:	2200      	movs	r2, #0
 800c344:	f000 f8d0 	bl	800c4e8 <_lseek_r>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c34e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	4632      	mov	r2, r6
 800c356:	463b      	mov	r3, r7
 800c358:	4628      	mov	r0, r5
 800c35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c35e:	f000 b8e7 	b.w	800c530 <_write_r>

0800c362 <__sseek>:
 800c362:	b510      	push	{r4, lr}
 800c364:	460c      	mov	r4, r1
 800c366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c36a:	f000 f8bd 	bl	800c4e8 <_lseek_r>
 800c36e:	1c43      	adds	r3, r0, #1
 800c370:	89a3      	ldrh	r3, [r4, #12]
 800c372:	bf15      	itete	ne
 800c374:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c376:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c37a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c37e:	81a3      	strheq	r3, [r4, #12]
 800c380:	bf18      	it	ne
 800c382:	81a3      	strhne	r3, [r4, #12]
 800c384:	bd10      	pop	{r4, pc}

0800c386 <__sclose>:
 800c386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38a:	f000 b89d 	b.w	800c4c8 <_close_r>

0800c38e <__swbuf_r>:
 800c38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c390:	460e      	mov	r6, r1
 800c392:	4614      	mov	r4, r2
 800c394:	4605      	mov	r5, r0
 800c396:	b118      	cbz	r0, 800c3a0 <__swbuf_r+0x12>
 800c398:	6a03      	ldr	r3, [r0, #32]
 800c39a:	b90b      	cbnz	r3, 800c3a0 <__swbuf_r+0x12>
 800c39c:	f7ff ff0e 	bl	800c1bc <__sinit>
 800c3a0:	69a3      	ldr	r3, [r4, #24]
 800c3a2:	60a3      	str	r3, [r4, #8]
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	071a      	lsls	r2, r3, #28
 800c3a8:	d501      	bpl.n	800c3ae <__swbuf_r+0x20>
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	b943      	cbnz	r3, 800c3c0 <__swbuf_r+0x32>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f000 f82b 	bl	800c40c <__swsetup_r>
 800c3b6:	b118      	cbz	r0, 800c3c0 <__swbuf_r+0x32>
 800c3b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c3bc:	4638      	mov	r0, r7
 800c3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	6922      	ldr	r2, [r4, #16]
 800c3c4:	1a98      	subs	r0, r3, r2
 800c3c6:	6963      	ldr	r3, [r4, #20]
 800c3c8:	b2f6      	uxtb	r6, r6
 800c3ca:	4283      	cmp	r3, r0
 800c3cc:	4637      	mov	r7, r6
 800c3ce:	dc05      	bgt.n	800c3dc <__swbuf_r+0x4e>
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f000 fd38 	bl	800ce48 <_fflush_r>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d1ed      	bne.n	800c3b8 <__swbuf_r+0x2a>
 800c3dc:	68a3      	ldr	r3, [r4, #8]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	60a3      	str	r3, [r4, #8]
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	6022      	str	r2, [r4, #0]
 800c3e8:	701e      	strb	r6, [r3, #0]
 800c3ea:	6962      	ldr	r2, [r4, #20]
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d004      	beq.n	800c3fc <__swbuf_r+0x6e>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	07db      	lsls	r3, r3, #31
 800c3f6:	d5e1      	bpl.n	800c3bc <__swbuf_r+0x2e>
 800c3f8:	2e0a      	cmp	r6, #10
 800c3fa:	d1df      	bne.n	800c3bc <__swbuf_r+0x2e>
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	4628      	mov	r0, r5
 800c400:	f000 fd22 	bl	800ce48 <_fflush_r>
 800c404:	2800      	cmp	r0, #0
 800c406:	d0d9      	beq.n	800c3bc <__swbuf_r+0x2e>
 800c408:	e7d6      	b.n	800c3b8 <__swbuf_r+0x2a>
	...

0800c40c <__swsetup_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4b29      	ldr	r3, [pc, #164]	@ (800c4b4 <__swsetup_r+0xa8>)
 800c410:	4605      	mov	r5, r0
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	460c      	mov	r4, r1
 800c416:	b118      	cbz	r0, 800c420 <__swsetup_r+0x14>
 800c418:	6a03      	ldr	r3, [r0, #32]
 800c41a:	b90b      	cbnz	r3, 800c420 <__swsetup_r+0x14>
 800c41c:	f7ff fece 	bl	800c1bc <__sinit>
 800c420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c424:	0719      	lsls	r1, r3, #28
 800c426:	d422      	bmi.n	800c46e <__swsetup_r+0x62>
 800c428:	06da      	lsls	r2, r3, #27
 800c42a:	d407      	bmi.n	800c43c <__swsetup_r+0x30>
 800c42c:	2209      	movs	r2, #9
 800c42e:	602a      	str	r2, [r5, #0]
 800c430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	f04f 30ff 	mov.w	r0, #4294967295
 800c43a:	e033      	b.n	800c4a4 <__swsetup_r+0x98>
 800c43c:	0758      	lsls	r0, r3, #29
 800c43e:	d512      	bpl.n	800c466 <__swsetup_r+0x5a>
 800c440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c442:	b141      	cbz	r1, 800c456 <__swsetup_r+0x4a>
 800c444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c448:	4299      	cmp	r1, r3
 800c44a:	d002      	beq.n	800c452 <__swsetup_r+0x46>
 800c44c:	4628      	mov	r0, r5
 800c44e:	f000 f8af 	bl	800c5b0 <_free_r>
 800c452:	2300      	movs	r3, #0
 800c454:	6363      	str	r3, [r4, #52]	@ 0x34
 800c456:	89a3      	ldrh	r3, [r4, #12]
 800c458:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c45c:	81a3      	strh	r3, [r4, #12]
 800c45e:	2300      	movs	r3, #0
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	6923      	ldr	r3, [r4, #16]
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	f043 0308 	orr.w	r3, r3, #8
 800c46c:	81a3      	strh	r3, [r4, #12]
 800c46e:	6923      	ldr	r3, [r4, #16]
 800c470:	b94b      	cbnz	r3, 800c486 <__swsetup_r+0x7a>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c47c:	d003      	beq.n	800c486 <__swsetup_r+0x7a>
 800c47e:	4621      	mov	r1, r4
 800c480:	4628      	mov	r0, r5
 800c482:	f000 fd2f 	bl	800cee4 <__smakebuf_r>
 800c486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48a:	f013 0201 	ands.w	r2, r3, #1
 800c48e:	d00a      	beq.n	800c4a6 <__swsetup_r+0x9a>
 800c490:	2200      	movs	r2, #0
 800c492:	60a2      	str	r2, [r4, #8]
 800c494:	6962      	ldr	r2, [r4, #20]
 800c496:	4252      	negs	r2, r2
 800c498:	61a2      	str	r2, [r4, #24]
 800c49a:	6922      	ldr	r2, [r4, #16]
 800c49c:	b942      	cbnz	r2, 800c4b0 <__swsetup_r+0xa4>
 800c49e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4a2:	d1c5      	bne.n	800c430 <__swsetup_r+0x24>
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	0799      	lsls	r1, r3, #30
 800c4a8:	bf58      	it	pl
 800c4aa:	6962      	ldrpl	r2, [r4, #20]
 800c4ac:	60a2      	str	r2, [r4, #8]
 800c4ae:	e7f4      	b.n	800c49a <__swsetup_r+0x8e>
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	e7f7      	b.n	800c4a4 <__swsetup_r+0x98>
 800c4b4:	20000190 	.word	0x20000190

0800c4b8 <memset>:
 800c4b8:	4402      	add	r2, r0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d100      	bne.n	800c4c2 <memset+0xa>
 800c4c0:	4770      	bx	lr
 800c4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c6:	e7f9      	b.n	800c4bc <memset+0x4>

0800c4c8 <_close_r>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	4d06      	ldr	r5, [pc, #24]	@ (800c4e4 <_close_r+0x1c>)
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	4608      	mov	r0, r1
 800c4d2:	602b      	str	r3, [r5, #0]
 800c4d4:	f7f4 fe7e 	bl	80011d4 <_close>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d102      	bne.n	800c4e2 <_close_r+0x1a>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	b103      	cbz	r3, 800c4e2 <_close_r+0x1a>
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	bd38      	pop	{r3, r4, r5, pc}
 800c4e4:	200015b4 	.word	0x200015b4

0800c4e8 <_lseek_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4d07      	ldr	r5, [pc, #28]	@ (800c508 <_lseek_r+0x20>)
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	602a      	str	r2, [r5, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	f7f4 fe93 	bl	8001222 <_lseek>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	d102      	bne.n	800c506 <_lseek_r+0x1e>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	b103      	cbz	r3, 800c506 <_lseek_r+0x1e>
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	bd38      	pop	{r3, r4, r5, pc}
 800c508:	200015b4 	.word	0x200015b4

0800c50c <_read_r>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4d07      	ldr	r5, [pc, #28]	@ (800c52c <_read_r+0x20>)
 800c510:	4604      	mov	r4, r0
 800c512:	4608      	mov	r0, r1
 800c514:	4611      	mov	r1, r2
 800c516:	2200      	movs	r2, #0
 800c518:	602a      	str	r2, [r5, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	f7f4 fe26 	bl	800116c <_read>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_read_r+0x1e>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_read_r+0x1e>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	200015b4 	.word	0x200015b4

0800c530 <_write_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d07      	ldr	r5, [pc, #28]	@ (800c550 <_write_r+0x20>)
 800c534:	4604      	mov	r4, r0
 800c536:	4608      	mov	r0, r1
 800c538:	4611      	mov	r1, r2
 800c53a:	2200      	movs	r2, #0
 800c53c:	602a      	str	r2, [r5, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	f7f4 fe31 	bl	80011a6 <_write>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d102      	bne.n	800c54e <_write_r+0x1e>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	b103      	cbz	r3, 800c54e <_write_r+0x1e>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	200015b4 	.word	0x200015b4

0800c554 <__errno>:
 800c554:	4b01      	ldr	r3, [pc, #4]	@ (800c55c <__errno+0x8>)
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20000190 	.word	0x20000190

0800c560 <__libc_init_array>:
 800c560:	b570      	push	{r4, r5, r6, lr}
 800c562:	4d0d      	ldr	r5, [pc, #52]	@ (800c598 <__libc_init_array+0x38>)
 800c564:	4c0d      	ldr	r4, [pc, #52]	@ (800c59c <__libc_init_array+0x3c>)
 800c566:	1b64      	subs	r4, r4, r5
 800c568:	10a4      	asrs	r4, r4, #2
 800c56a:	2600      	movs	r6, #0
 800c56c:	42a6      	cmp	r6, r4
 800c56e:	d109      	bne.n	800c584 <__libc_init_array+0x24>
 800c570:	4d0b      	ldr	r5, [pc, #44]	@ (800c5a0 <__libc_init_array+0x40>)
 800c572:	4c0c      	ldr	r4, [pc, #48]	@ (800c5a4 <__libc_init_array+0x44>)
 800c574:	f000 fd24 	bl	800cfc0 <_init>
 800c578:	1b64      	subs	r4, r4, r5
 800c57a:	10a4      	asrs	r4, r4, #2
 800c57c:	2600      	movs	r6, #0
 800c57e:	42a6      	cmp	r6, r4
 800c580:	d105      	bne.n	800c58e <__libc_init_array+0x2e>
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	f855 3b04 	ldr.w	r3, [r5], #4
 800c588:	4798      	blx	r3
 800c58a:	3601      	adds	r6, #1
 800c58c:	e7ee      	b.n	800c56c <__libc_init_array+0xc>
 800c58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c592:	4798      	blx	r3
 800c594:	3601      	adds	r6, #1
 800c596:	e7f2      	b.n	800c57e <__libc_init_array+0x1e>
 800c598:	0800d168 	.word	0x0800d168
 800c59c:	0800d168 	.word	0x0800d168
 800c5a0:	0800d168 	.word	0x0800d168
 800c5a4:	0800d16c 	.word	0x0800d16c

0800c5a8 <__retarget_lock_init_recursive>:
 800c5a8:	4770      	bx	lr

0800c5aa <__retarget_lock_acquire_recursive>:
 800c5aa:	4770      	bx	lr

0800c5ac <__retarget_lock_release_recursive>:
 800c5ac:	4770      	bx	lr
	...

0800c5b0 <_free_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	2900      	cmp	r1, #0
 800c5b6:	d041      	beq.n	800c63c <_free_r+0x8c>
 800c5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5bc:	1f0c      	subs	r4, r1, #4
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	bfb8      	it	lt
 800c5c2:	18e4      	addlt	r4, r4, r3
 800c5c4:	f000 f8e0 	bl	800c788 <__malloc_lock>
 800c5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c640 <_free_r+0x90>)
 800c5ca:	6813      	ldr	r3, [r2, #0]
 800c5cc:	b933      	cbnz	r3, 800c5dc <_free_r+0x2c>
 800c5ce:	6063      	str	r3, [r4, #4]
 800c5d0:	6014      	str	r4, [r2, #0]
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5d8:	f000 b8dc 	b.w	800c794 <__malloc_unlock>
 800c5dc:	42a3      	cmp	r3, r4
 800c5de:	d908      	bls.n	800c5f2 <_free_r+0x42>
 800c5e0:	6820      	ldr	r0, [r4, #0]
 800c5e2:	1821      	adds	r1, r4, r0
 800c5e4:	428b      	cmp	r3, r1
 800c5e6:	bf01      	itttt	eq
 800c5e8:	6819      	ldreq	r1, [r3, #0]
 800c5ea:	685b      	ldreq	r3, [r3, #4]
 800c5ec:	1809      	addeq	r1, r1, r0
 800c5ee:	6021      	streq	r1, [r4, #0]
 800c5f0:	e7ed      	b.n	800c5ce <_free_r+0x1e>
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	b10b      	cbz	r3, 800c5fc <_free_r+0x4c>
 800c5f8:	42a3      	cmp	r3, r4
 800c5fa:	d9fa      	bls.n	800c5f2 <_free_r+0x42>
 800c5fc:	6811      	ldr	r1, [r2, #0]
 800c5fe:	1850      	adds	r0, r2, r1
 800c600:	42a0      	cmp	r0, r4
 800c602:	d10b      	bne.n	800c61c <_free_r+0x6c>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	4401      	add	r1, r0
 800c608:	1850      	adds	r0, r2, r1
 800c60a:	4283      	cmp	r3, r0
 800c60c:	6011      	str	r1, [r2, #0]
 800c60e:	d1e0      	bne.n	800c5d2 <_free_r+0x22>
 800c610:	6818      	ldr	r0, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	6053      	str	r3, [r2, #4]
 800c616:	4408      	add	r0, r1
 800c618:	6010      	str	r0, [r2, #0]
 800c61a:	e7da      	b.n	800c5d2 <_free_r+0x22>
 800c61c:	d902      	bls.n	800c624 <_free_r+0x74>
 800c61e:	230c      	movs	r3, #12
 800c620:	602b      	str	r3, [r5, #0]
 800c622:	e7d6      	b.n	800c5d2 <_free_r+0x22>
 800c624:	6820      	ldr	r0, [r4, #0]
 800c626:	1821      	adds	r1, r4, r0
 800c628:	428b      	cmp	r3, r1
 800c62a:	bf04      	itt	eq
 800c62c:	6819      	ldreq	r1, [r3, #0]
 800c62e:	685b      	ldreq	r3, [r3, #4]
 800c630:	6063      	str	r3, [r4, #4]
 800c632:	bf04      	itt	eq
 800c634:	1809      	addeq	r1, r1, r0
 800c636:	6021      	streq	r1, [r4, #0]
 800c638:	6054      	str	r4, [r2, #4]
 800c63a:	e7ca      	b.n	800c5d2 <_free_r+0x22>
 800c63c:	bd38      	pop	{r3, r4, r5, pc}
 800c63e:	bf00      	nop
 800c640:	200015c0 	.word	0x200015c0

0800c644 <sbrk_aligned>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	4e0f      	ldr	r6, [pc, #60]	@ (800c684 <sbrk_aligned+0x40>)
 800c648:	460c      	mov	r4, r1
 800c64a:	6831      	ldr	r1, [r6, #0]
 800c64c:	4605      	mov	r5, r0
 800c64e:	b911      	cbnz	r1, 800c656 <sbrk_aligned+0x12>
 800c650:	f000 fca6 	bl	800cfa0 <_sbrk_r>
 800c654:	6030      	str	r0, [r6, #0]
 800c656:	4621      	mov	r1, r4
 800c658:	4628      	mov	r0, r5
 800c65a:	f000 fca1 	bl	800cfa0 <_sbrk_r>
 800c65e:	1c43      	adds	r3, r0, #1
 800c660:	d103      	bne.n	800c66a <sbrk_aligned+0x26>
 800c662:	f04f 34ff 	mov.w	r4, #4294967295
 800c666:	4620      	mov	r0, r4
 800c668:	bd70      	pop	{r4, r5, r6, pc}
 800c66a:	1cc4      	adds	r4, r0, #3
 800c66c:	f024 0403 	bic.w	r4, r4, #3
 800c670:	42a0      	cmp	r0, r4
 800c672:	d0f8      	beq.n	800c666 <sbrk_aligned+0x22>
 800c674:	1a21      	subs	r1, r4, r0
 800c676:	4628      	mov	r0, r5
 800c678:	f000 fc92 	bl	800cfa0 <_sbrk_r>
 800c67c:	3001      	adds	r0, #1
 800c67e:	d1f2      	bne.n	800c666 <sbrk_aligned+0x22>
 800c680:	e7ef      	b.n	800c662 <sbrk_aligned+0x1e>
 800c682:	bf00      	nop
 800c684:	200015bc 	.word	0x200015bc

0800c688 <_malloc_r>:
 800c688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c68c:	1ccd      	adds	r5, r1, #3
 800c68e:	f025 0503 	bic.w	r5, r5, #3
 800c692:	3508      	adds	r5, #8
 800c694:	2d0c      	cmp	r5, #12
 800c696:	bf38      	it	cc
 800c698:	250c      	movcc	r5, #12
 800c69a:	2d00      	cmp	r5, #0
 800c69c:	4606      	mov	r6, r0
 800c69e:	db01      	blt.n	800c6a4 <_malloc_r+0x1c>
 800c6a0:	42a9      	cmp	r1, r5
 800c6a2:	d904      	bls.n	800c6ae <_malloc_r+0x26>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	6033      	str	r3, [r6, #0]
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c784 <_malloc_r+0xfc>
 800c6b2:	f000 f869 	bl	800c788 <__malloc_lock>
 800c6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ba:	461c      	mov	r4, r3
 800c6bc:	bb44      	cbnz	r4, 800c710 <_malloc_r+0x88>
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f7ff ffbf 	bl	800c644 <sbrk_aligned>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	d158      	bne.n	800c77e <_malloc_r+0xf6>
 800c6cc:	f8d8 4000 	ldr.w	r4, [r8]
 800c6d0:	4627      	mov	r7, r4
 800c6d2:	2f00      	cmp	r7, #0
 800c6d4:	d143      	bne.n	800c75e <_malloc_r+0xd6>
 800c6d6:	2c00      	cmp	r4, #0
 800c6d8:	d04b      	beq.n	800c772 <_malloc_r+0xea>
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	4639      	mov	r1, r7
 800c6de:	4630      	mov	r0, r6
 800c6e0:	eb04 0903 	add.w	r9, r4, r3
 800c6e4:	f000 fc5c 	bl	800cfa0 <_sbrk_r>
 800c6e8:	4581      	cmp	r9, r0
 800c6ea:	d142      	bne.n	800c772 <_malloc_r+0xea>
 800c6ec:	6821      	ldr	r1, [r4, #0]
 800c6ee:	1a6d      	subs	r5, r5, r1
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7ff ffa6 	bl	800c644 <sbrk_aligned>
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d03a      	beq.n	800c772 <_malloc_r+0xea>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	442b      	add	r3, r5
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	f8d8 3000 	ldr.w	r3, [r8]
 800c706:	685a      	ldr	r2, [r3, #4]
 800c708:	bb62      	cbnz	r2, 800c764 <_malloc_r+0xdc>
 800c70a:	f8c8 7000 	str.w	r7, [r8]
 800c70e:	e00f      	b.n	800c730 <_malloc_r+0xa8>
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	1b52      	subs	r2, r2, r5
 800c714:	d420      	bmi.n	800c758 <_malloc_r+0xd0>
 800c716:	2a0b      	cmp	r2, #11
 800c718:	d917      	bls.n	800c74a <_malloc_r+0xc2>
 800c71a:	1961      	adds	r1, r4, r5
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	6025      	str	r5, [r4, #0]
 800c720:	bf18      	it	ne
 800c722:	6059      	strne	r1, [r3, #4]
 800c724:	6863      	ldr	r3, [r4, #4]
 800c726:	bf08      	it	eq
 800c728:	f8c8 1000 	streq.w	r1, [r8]
 800c72c:	5162      	str	r2, [r4, r5]
 800c72e:	604b      	str	r3, [r1, #4]
 800c730:	4630      	mov	r0, r6
 800c732:	f000 f82f 	bl	800c794 <__malloc_unlock>
 800c736:	f104 000b 	add.w	r0, r4, #11
 800c73a:	1d23      	adds	r3, r4, #4
 800c73c:	f020 0007 	bic.w	r0, r0, #7
 800c740:	1ac2      	subs	r2, r0, r3
 800c742:	bf1c      	itt	ne
 800c744:	1a1b      	subne	r3, r3, r0
 800c746:	50a3      	strne	r3, [r4, r2]
 800c748:	e7af      	b.n	800c6aa <_malloc_r+0x22>
 800c74a:	6862      	ldr	r2, [r4, #4]
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	bf0c      	ite	eq
 800c750:	f8c8 2000 	streq.w	r2, [r8]
 800c754:	605a      	strne	r2, [r3, #4]
 800c756:	e7eb      	b.n	800c730 <_malloc_r+0xa8>
 800c758:	4623      	mov	r3, r4
 800c75a:	6864      	ldr	r4, [r4, #4]
 800c75c:	e7ae      	b.n	800c6bc <_malloc_r+0x34>
 800c75e:	463c      	mov	r4, r7
 800c760:	687f      	ldr	r7, [r7, #4]
 800c762:	e7b6      	b.n	800c6d2 <_malloc_r+0x4a>
 800c764:	461a      	mov	r2, r3
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	42a3      	cmp	r3, r4
 800c76a:	d1fb      	bne.n	800c764 <_malloc_r+0xdc>
 800c76c:	2300      	movs	r3, #0
 800c76e:	6053      	str	r3, [r2, #4]
 800c770:	e7de      	b.n	800c730 <_malloc_r+0xa8>
 800c772:	230c      	movs	r3, #12
 800c774:	6033      	str	r3, [r6, #0]
 800c776:	4630      	mov	r0, r6
 800c778:	f000 f80c 	bl	800c794 <__malloc_unlock>
 800c77c:	e794      	b.n	800c6a8 <_malloc_r+0x20>
 800c77e:	6005      	str	r5, [r0, #0]
 800c780:	e7d6      	b.n	800c730 <_malloc_r+0xa8>
 800c782:	bf00      	nop
 800c784:	200015c0 	.word	0x200015c0

0800c788 <__malloc_lock>:
 800c788:	4801      	ldr	r0, [pc, #4]	@ (800c790 <__malloc_lock+0x8>)
 800c78a:	f7ff bf0e 	b.w	800c5aa <__retarget_lock_acquire_recursive>
 800c78e:	bf00      	nop
 800c790:	200015b8 	.word	0x200015b8

0800c794 <__malloc_unlock>:
 800c794:	4801      	ldr	r0, [pc, #4]	@ (800c79c <__malloc_unlock+0x8>)
 800c796:	f7ff bf09 	b.w	800c5ac <__retarget_lock_release_recursive>
 800c79a:	bf00      	nop
 800c79c:	200015b8 	.word	0x200015b8

0800c7a0 <__sfputc_r>:
 800c7a0:	6893      	ldr	r3, [r2, #8]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	b410      	push	{r4}
 800c7a8:	6093      	str	r3, [r2, #8]
 800c7aa:	da08      	bge.n	800c7be <__sfputc_r+0x1e>
 800c7ac:	6994      	ldr	r4, [r2, #24]
 800c7ae:	42a3      	cmp	r3, r4
 800c7b0:	db01      	blt.n	800c7b6 <__sfputc_r+0x16>
 800c7b2:	290a      	cmp	r1, #10
 800c7b4:	d103      	bne.n	800c7be <__sfputc_r+0x1e>
 800c7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ba:	f7ff bde8 	b.w	800c38e <__swbuf_r>
 800c7be:	6813      	ldr	r3, [r2, #0]
 800c7c0:	1c58      	adds	r0, r3, #1
 800c7c2:	6010      	str	r0, [r2, #0]
 800c7c4:	7019      	strb	r1, [r3, #0]
 800c7c6:	4608      	mov	r0, r1
 800c7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <__sfputs_r>:
 800c7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	460f      	mov	r7, r1
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	18d5      	adds	r5, r2, r3
 800c7d8:	42ac      	cmp	r4, r5
 800c7da:	d101      	bne.n	800c7e0 <__sfputs_r+0x12>
 800c7dc:	2000      	movs	r0, #0
 800c7de:	e007      	b.n	800c7f0 <__sfputs_r+0x22>
 800c7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e4:	463a      	mov	r2, r7
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7ff ffda 	bl	800c7a0 <__sfputc_r>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d1f3      	bne.n	800c7d8 <__sfputs_r+0xa>
 800c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7f4 <_vfiprintf_r>:
 800c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	460d      	mov	r5, r1
 800c7fa:	b09d      	sub	sp, #116	@ 0x74
 800c7fc:	4614      	mov	r4, r2
 800c7fe:	4698      	mov	r8, r3
 800c800:	4606      	mov	r6, r0
 800c802:	b118      	cbz	r0, 800c80c <_vfiprintf_r+0x18>
 800c804:	6a03      	ldr	r3, [r0, #32]
 800c806:	b90b      	cbnz	r3, 800c80c <_vfiprintf_r+0x18>
 800c808:	f7ff fcd8 	bl	800c1bc <__sinit>
 800c80c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c80e:	07d9      	lsls	r1, r3, #31
 800c810:	d405      	bmi.n	800c81e <_vfiprintf_r+0x2a>
 800c812:	89ab      	ldrh	r3, [r5, #12]
 800c814:	059a      	lsls	r2, r3, #22
 800c816:	d402      	bmi.n	800c81e <_vfiprintf_r+0x2a>
 800c818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c81a:	f7ff fec6 	bl	800c5aa <__retarget_lock_acquire_recursive>
 800c81e:	89ab      	ldrh	r3, [r5, #12]
 800c820:	071b      	lsls	r3, r3, #28
 800c822:	d501      	bpl.n	800c828 <_vfiprintf_r+0x34>
 800c824:	692b      	ldr	r3, [r5, #16]
 800c826:	b99b      	cbnz	r3, 800c850 <_vfiprintf_r+0x5c>
 800c828:	4629      	mov	r1, r5
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7ff fdee 	bl	800c40c <__swsetup_r>
 800c830:	b170      	cbz	r0, 800c850 <_vfiprintf_r+0x5c>
 800c832:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c834:	07dc      	lsls	r4, r3, #31
 800c836:	d504      	bpl.n	800c842 <_vfiprintf_r+0x4e>
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	b01d      	add	sp, #116	@ 0x74
 800c83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c842:	89ab      	ldrh	r3, [r5, #12]
 800c844:	0598      	lsls	r0, r3, #22
 800c846:	d4f7      	bmi.n	800c838 <_vfiprintf_r+0x44>
 800c848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c84a:	f7ff feaf 	bl	800c5ac <__retarget_lock_release_recursive>
 800c84e:	e7f3      	b.n	800c838 <_vfiprintf_r+0x44>
 800c850:	2300      	movs	r3, #0
 800c852:	9309      	str	r3, [sp, #36]	@ 0x24
 800c854:	2320      	movs	r3, #32
 800c856:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c85a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c85e:	2330      	movs	r3, #48	@ 0x30
 800c860:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca10 <_vfiprintf_r+0x21c>
 800c864:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c868:	f04f 0901 	mov.w	r9, #1
 800c86c:	4623      	mov	r3, r4
 800c86e:	469a      	mov	sl, r3
 800c870:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c874:	b10a      	cbz	r2, 800c87a <_vfiprintf_r+0x86>
 800c876:	2a25      	cmp	r2, #37	@ 0x25
 800c878:	d1f9      	bne.n	800c86e <_vfiprintf_r+0x7a>
 800c87a:	ebba 0b04 	subs.w	fp, sl, r4
 800c87e:	d00b      	beq.n	800c898 <_vfiprintf_r+0xa4>
 800c880:	465b      	mov	r3, fp
 800c882:	4622      	mov	r2, r4
 800c884:	4629      	mov	r1, r5
 800c886:	4630      	mov	r0, r6
 800c888:	f7ff ffa1 	bl	800c7ce <__sfputs_r>
 800c88c:	3001      	adds	r0, #1
 800c88e:	f000 80a7 	beq.w	800c9e0 <_vfiprintf_r+0x1ec>
 800c892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c894:	445a      	add	r2, fp
 800c896:	9209      	str	r2, [sp, #36]	@ 0x24
 800c898:	f89a 3000 	ldrb.w	r3, [sl]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f000 809f 	beq.w	800c9e0 <_vfiprintf_r+0x1ec>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ac:	f10a 0a01 	add.w	sl, sl, #1
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	9307      	str	r3, [sp, #28]
 800c8b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ba:	4654      	mov	r4, sl
 800c8bc:	2205      	movs	r2, #5
 800c8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c2:	4853      	ldr	r0, [pc, #332]	@ (800ca10 <_vfiprintf_r+0x21c>)
 800c8c4:	f7f3 fcac 	bl	8000220 <memchr>
 800c8c8:	9a04      	ldr	r2, [sp, #16]
 800c8ca:	b9d8      	cbnz	r0, 800c904 <_vfiprintf_r+0x110>
 800c8cc:	06d1      	lsls	r1, r2, #27
 800c8ce:	bf44      	itt	mi
 800c8d0:	2320      	movmi	r3, #32
 800c8d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8d6:	0713      	lsls	r3, r2, #28
 800c8d8:	bf44      	itt	mi
 800c8da:	232b      	movmi	r3, #43	@ 0x2b
 800c8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8e6:	d015      	beq.n	800c914 <_vfiprintf_r+0x120>
 800c8e8:	9a07      	ldr	r2, [sp, #28]
 800c8ea:	4654      	mov	r4, sl
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f04f 0c0a 	mov.w	ip, #10
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8f8:	3b30      	subs	r3, #48	@ 0x30
 800c8fa:	2b09      	cmp	r3, #9
 800c8fc:	d94b      	bls.n	800c996 <_vfiprintf_r+0x1a2>
 800c8fe:	b1b0      	cbz	r0, 800c92e <_vfiprintf_r+0x13a>
 800c900:	9207      	str	r2, [sp, #28]
 800c902:	e014      	b.n	800c92e <_vfiprintf_r+0x13a>
 800c904:	eba0 0308 	sub.w	r3, r0, r8
 800c908:	fa09 f303 	lsl.w	r3, r9, r3
 800c90c:	4313      	orrs	r3, r2
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	46a2      	mov	sl, r4
 800c912:	e7d2      	b.n	800c8ba <_vfiprintf_r+0xc6>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	1d19      	adds	r1, r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	9103      	str	r1, [sp, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfbb      	ittet	lt
 800c920:	425b      	neglt	r3, r3
 800c922:	f042 0202 	orrlt.w	r2, r2, #2
 800c926:	9307      	strge	r3, [sp, #28]
 800c928:	9307      	strlt	r3, [sp, #28]
 800c92a:	bfb8      	it	lt
 800c92c:	9204      	strlt	r2, [sp, #16]
 800c92e:	7823      	ldrb	r3, [r4, #0]
 800c930:	2b2e      	cmp	r3, #46	@ 0x2e
 800c932:	d10a      	bne.n	800c94a <_vfiprintf_r+0x156>
 800c934:	7863      	ldrb	r3, [r4, #1]
 800c936:	2b2a      	cmp	r3, #42	@ 0x2a
 800c938:	d132      	bne.n	800c9a0 <_vfiprintf_r+0x1ac>
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	1d1a      	adds	r2, r3, #4
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	9203      	str	r2, [sp, #12]
 800c942:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c946:	3402      	adds	r4, #2
 800c948:	9305      	str	r3, [sp, #20]
 800c94a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca20 <_vfiprintf_r+0x22c>
 800c94e:	7821      	ldrb	r1, [r4, #0]
 800c950:	2203      	movs	r2, #3
 800c952:	4650      	mov	r0, sl
 800c954:	f7f3 fc64 	bl	8000220 <memchr>
 800c958:	b138      	cbz	r0, 800c96a <_vfiprintf_r+0x176>
 800c95a:	9b04      	ldr	r3, [sp, #16]
 800c95c:	eba0 000a 	sub.w	r0, r0, sl
 800c960:	2240      	movs	r2, #64	@ 0x40
 800c962:	4082      	lsls	r2, r0
 800c964:	4313      	orrs	r3, r2
 800c966:	3401      	adds	r4, #1
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c96e:	4829      	ldr	r0, [pc, #164]	@ (800ca14 <_vfiprintf_r+0x220>)
 800c970:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c974:	2206      	movs	r2, #6
 800c976:	f7f3 fc53 	bl	8000220 <memchr>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d03f      	beq.n	800c9fe <_vfiprintf_r+0x20a>
 800c97e:	4b26      	ldr	r3, [pc, #152]	@ (800ca18 <_vfiprintf_r+0x224>)
 800c980:	bb1b      	cbnz	r3, 800c9ca <_vfiprintf_r+0x1d6>
 800c982:	9b03      	ldr	r3, [sp, #12]
 800c984:	3307      	adds	r3, #7
 800c986:	f023 0307 	bic.w	r3, r3, #7
 800c98a:	3308      	adds	r3, #8
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c990:	443b      	add	r3, r7
 800c992:	9309      	str	r3, [sp, #36]	@ 0x24
 800c994:	e76a      	b.n	800c86c <_vfiprintf_r+0x78>
 800c996:	fb0c 3202 	mla	r2, ip, r2, r3
 800c99a:	460c      	mov	r4, r1
 800c99c:	2001      	movs	r0, #1
 800c99e:	e7a8      	b.n	800c8f2 <_vfiprintf_r+0xfe>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	3401      	adds	r4, #1
 800c9a4:	9305      	str	r3, [sp, #20]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	f04f 0c0a 	mov.w	ip, #10
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9b2:	3a30      	subs	r2, #48	@ 0x30
 800c9b4:	2a09      	cmp	r2, #9
 800c9b6:	d903      	bls.n	800c9c0 <_vfiprintf_r+0x1cc>
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0c6      	beq.n	800c94a <_vfiprintf_r+0x156>
 800c9bc:	9105      	str	r1, [sp, #20]
 800c9be:	e7c4      	b.n	800c94a <_vfiprintf_r+0x156>
 800c9c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e7f0      	b.n	800c9ac <_vfiprintf_r+0x1b8>
 800c9ca:	ab03      	add	r3, sp, #12
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	462a      	mov	r2, r5
 800c9d0:	4b12      	ldr	r3, [pc, #72]	@ (800ca1c <_vfiprintf_r+0x228>)
 800c9d2:	a904      	add	r1, sp, #16
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f3af 8000 	nop.w
 800c9da:	4607      	mov	r7, r0
 800c9dc:	1c78      	adds	r0, r7, #1
 800c9de:	d1d6      	bne.n	800c98e <_vfiprintf_r+0x19a>
 800c9e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9e2:	07d9      	lsls	r1, r3, #31
 800c9e4:	d405      	bmi.n	800c9f2 <_vfiprintf_r+0x1fe>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_vfiprintf_r+0x1fe>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ee:	f7ff fddd 	bl	800c5ac <__retarget_lock_release_recursive>
 800c9f2:	89ab      	ldrh	r3, [r5, #12]
 800c9f4:	065b      	lsls	r3, r3, #25
 800c9f6:	f53f af1f 	bmi.w	800c838 <_vfiprintf_r+0x44>
 800c9fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9fc:	e71e      	b.n	800c83c <_vfiprintf_r+0x48>
 800c9fe:	ab03      	add	r3, sp, #12
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	462a      	mov	r2, r5
 800ca04:	4b05      	ldr	r3, [pc, #20]	@ (800ca1c <_vfiprintf_r+0x228>)
 800ca06:	a904      	add	r1, sp, #16
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f000 f879 	bl	800cb00 <_printf_i>
 800ca0e:	e7e4      	b.n	800c9da <_vfiprintf_r+0x1e6>
 800ca10:	0800d12c 	.word	0x0800d12c
 800ca14:	0800d136 	.word	0x0800d136
 800ca18:	00000000 	.word	0x00000000
 800ca1c:	0800c7cf 	.word	0x0800c7cf
 800ca20:	0800d132 	.word	0x0800d132

0800ca24 <_printf_common>:
 800ca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	4616      	mov	r6, r2
 800ca2a:	4698      	mov	r8, r3
 800ca2c:	688a      	ldr	r2, [r1, #8]
 800ca2e:	690b      	ldr	r3, [r1, #16]
 800ca30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca34:	4293      	cmp	r3, r2
 800ca36:	bfb8      	it	lt
 800ca38:	4613      	movlt	r3, r2
 800ca3a:	6033      	str	r3, [r6, #0]
 800ca3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca40:	4607      	mov	r7, r0
 800ca42:	460c      	mov	r4, r1
 800ca44:	b10a      	cbz	r2, 800ca4a <_printf_common+0x26>
 800ca46:	3301      	adds	r3, #1
 800ca48:	6033      	str	r3, [r6, #0]
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	0699      	lsls	r1, r3, #26
 800ca4e:	bf42      	ittt	mi
 800ca50:	6833      	ldrmi	r3, [r6, #0]
 800ca52:	3302      	addmi	r3, #2
 800ca54:	6033      	strmi	r3, [r6, #0]
 800ca56:	6825      	ldr	r5, [r4, #0]
 800ca58:	f015 0506 	ands.w	r5, r5, #6
 800ca5c:	d106      	bne.n	800ca6c <_printf_common+0x48>
 800ca5e:	f104 0a19 	add.w	sl, r4, #25
 800ca62:	68e3      	ldr	r3, [r4, #12]
 800ca64:	6832      	ldr	r2, [r6, #0]
 800ca66:	1a9b      	subs	r3, r3, r2
 800ca68:	42ab      	cmp	r3, r5
 800ca6a:	dc26      	bgt.n	800caba <_printf_common+0x96>
 800ca6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	3b00      	subs	r3, #0
 800ca74:	bf18      	it	ne
 800ca76:	2301      	movne	r3, #1
 800ca78:	0692      	lsls	r2, r2, #26
 800ca7a:	d42b      	bmi.n	800cad4 <_printf_common+0xb0>
 800ca7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca80:	4641      	mov	r1, r8
 800ca82:	4638      	mov	r0, r7
 800ca84:	47c8      	blx	r9
 800ca86:	3001      	adds	r0, #1
 800ca88:	d01e      	beq.n	800cac8 <_printf_common+0xa4>
 800ca8a:	6823      	ldr	r3, [r4, #0]
 800ca8c:	6922      	ldr	r2, [r4, #16]
 800ca8e:	f003 0306 	and.w	r3, r3, #6
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	bf02      	ittt	eq
 800ca96:	68e5      	ldreq	r5, [r4, #12]
 800ca98:	6833      	ldreq	r3, [r6, #0]
 800ca9a:	1aed      	subeq	r5, r5, r3
 800ca9c:	68a3      	ldr	r3, [r4, #8]
 800ca9e:	bf0c      	ite	eq
 800caa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caa4:	2500      	movne	r5, #0
 800caa6:	4293      	cmp	r3, r2
 800caa8:	bfc4      	itt	gt
 800caaa:	1a9b      	subgt	r3, r3, r2
 800caac:	18ed      	addgt	r5, r5, r3
 800caae:	2600      	movs	r6, #0
 800cab0:	341a      	adds	r4, #26
 800cab2:	42b5      	cmp	r5, r6
 800cab4:	d11a      	bne.n	800caec <_printf_common+0xc8>
 800cab6:	2000      	movs	r0, #0
 800cab8:	e008      	b.n	800cacc <_printf_common+0xa8>
 800caba:	2301      	movs	r3, #1
 800cabc:	4652      	mov	r2, sl
 800cabe:	4641      	mov	r1, r8
 800cac0:	4638      	mov	r0, r7
 800cac2:	47c8      	blx	r9
 800cac4:	3001      	adds	r0, #1
 800cac6:	d103      	bne.n	800cad0 <_printf_common+0xac>
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad0:	3501      	adds	r5, #1
 800cad2:	e7c6      	b.n	800ca62 <_printf_common+0x3e>
 800cad4:	18e1      	adds	r1, r4, r3
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	2030      	movs	r0, #48	@ 0x30
 800cada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cade:	4422      	add	r2, r4
 800cae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cae8:	3302      	adds	r3, #2
 800caea:	e7c7      	b.n	800ca7c <_printf_common+0x58>
 800caec:	2301      	movs	r3, #1
 800caee:	4622      	mov	r2, r4
 800caf0:	4641      	mov	r1, r8
 800caf2:	4638      	mov	r0, r7
 800caf4:	47c8      	blx	r9
 800caf6:	3001      	adds	r0, #1
 800caf8:	d0e6      	beq.n	800cac8 <_printf_common+0xa4>
 800cafa:	3601      	adds	r6, #1
 800cafc:	e7d9      	b.n	800cab2 <_printf_common+0x8e>
	...

0800cb00 <_printf_i>:
 800cb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb04:	7e0f      	ldrb	r7, [r1, #24]
 800cb06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cb08:	2f78      	cmp	r7, #120	@ 0x78
 800cb0a:	4691      	mov	r9, r2
 800cb0c:	4680      	mov	r8, r0
 800cb0e:	460c      	mov	r4, r1
 800cb10:	469a      	mov	sl, r3
 800cb12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cb16:	d807      	bhi.n	800cb28 <_printf_i+0x28>
 800cb18:	2f62      	cmp	r7, #98	@ 0x62
 800cb1a:	d80a      	bhi.n	800cb32 <_printf_i+0x32>
 800cb1c:	2f00      	cmp	r7, #0
 800cb1e:	f000 80d2 	beq.w	800ccc6 <_printf_i+0x1c6>
 800cb22:	2f58      	cmp	r7, #88	@ 0x58
 800cb24:	f000 80b9 	beq.w	800cc9a <_printf_i+0x19a>
 800cb28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb30:	e03a      	b.n	800cba8 <_printf_i+0xa8>
 800cb32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb36:	2b15      	cmp	r3, #21
 800cb38:	d8f6      	bhi.n	800cb28 <_printf_i+0x28>
 800cb3a:	a101      	add	r1, pc, #4	@ (adr r1, 800cb40 <_printf_i+0x40>)
 800cb3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb40:	0800cb99 	.word	0x0800cb99
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cb29 	.word	0x0800cb29
 800cb4c:	0800cb29 	.word	0x0800cb29
 800cb50:	0800cb29 	.word	0x0800cb29
 800cb54:	0800cb29 	.word	0x0800cb29
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cb29 	.word	0x0800cb29
 800cb60:	0800cb29 	.word	0x0800cb29
 800cb64:	0800cb29 	.word	0x0800cb29
 800cb68:	0800cb29 	.word	0x0800cb29
 800cb6c:	0800ccad 	.word	0x0800ccad
 800cb70:	0800cbd7 	.word	0x0800cbd7
 800cb74:	0800cc67 	.word	0x0800cc67
 800cb78:	0800cb29 	.word	0x0800cb29
 800cb7c:	0800cb29 	.word	0x0800cb29
 800cb80:	0800cccf 	.word	0x0800cccf
 800cb84:	0800cb29 	.word	0x0800cb29
 800cb88:	0800cbd7 	.word	0x0800cbd7
 800cb8c:	0800cb29 	.word	0x0800cb29
 800cb90:	0800cb29 	.word	0x0800cb29
 800cb94:	0800cc6f 	.word	0x0800cc6f
 800cb98:	6833      	ldr	r3, [r6, #0]
 800cb9a:	1d1a      	adds	r2, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6032      	str	r2, [r6, #0]
 800cba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e09d      	b.n	800cce8 <_printf_i+0x1e8>
 800cbac:	6833      	ldr	r3, [r6, #0]
 800cbae:	6820      	ldr	r0, [r4, #0]
 800cbb0:	1d19      	adds	r1, r3, #4
 800cbb2:	6031      	str	r1, [r6, #0]
 800cbb4:	0606      	lsls	r6, r0, #24
 800cbb6:	d501      	bpl.n	800cbbc <_printf_i+0xbc>
 800cbb8:	681d      	ldr	r5, [r3, #0]
 800cbba:	e003      	b.n	800cbc4 <_printf_i+0xc4>
 800cbbc:	0645      	lsls	r5, r0, #25
 800cbbe:	d5fb      	bpl.n	800cbb8 <_printf_i+0xb8>
 800cbc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cbc4:	2d00      	cmp	r5, #0
 800cbc6:	da03      	bge.n	800cbd0 <_printf_i+0xd0>
 800cbc8:	232d      	movs	r3, #45	@ 0x2d
 800cbca:	426d      	negs	r5, r5
 800cbcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbd0:	4859      	ldr	r0, [pc, #356]	@ (800cd38 <_printf_i+0x238>)
 800cbd2:	230a      	movs	r3, #10
 800cbd4:	e011      	b.n	800cbfa <_printf_i+0xfa>
 800cbd6:	6821      	ldr	r1, [r4, #0]
 800cbd8:	6833      	ldr	r3, [r6, #0]
 800cbda:	0608      	lsls	r0, r1, #24
 800cbdc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbe0:	d402      	bmi.n	800cbe8 <_printf_i+0xe8>
 800cbe2:	0649      	lsls	r1, r1, #25
 800cbe4:	bf48      	it	mi
 800cbe6:	b2ad      	uxthmi	r5, r5
 800cbe8:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbea:	4853      	ldr	r0, [pc, #332]	@ (800cd38 <_printf_i+0x238>)
 800cbec:	6033      	str	r3, [r6, #0]
 800cbee:	bf14      	ite	ne
 800cbf0:	230a      	movne	r3, #10
 800cbf2:	2308      	moveq	r3, #8
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbfa:	6866      	ldr	r6, [r4, #4]
 800cbfc:	60a6      	str	r6, [r4, #8]
 800cbfe:	2e00      	cmp	r6, #0
 800cc00:	bfa2      	ittt	ge
 800cc02:	6821      	ldrge	r1, [r4, #0]
 800cc04:	f021 0104 	bicge.w	r1, r1, #4
 800cc08:	6021      	strge	r1, [r4, #0]
 800cc0a:	b90d      	cbnz	r5, 800cc10 <_printf_i+0x110>
 800cc0c:	2e00      	cmp	r6, #0
 800cc0e:	d04b      	beq.n	800cca8 <_printf_i+0x1a8>
 800cc10:	4616      	mov	r6, r2
 800cc12:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc16:	fb03 5711 	mls	r7, r3, r1, r5
 800cc1a:	5dc7      	ldrb	r7, [r0, r7]
 800cc1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc20:	462f      	mov	r7, r5
 800cc22:	42bb      	cmp	r3, r7
 800cc24:	460d      	mov	r5, r1
 800cc26:	d9f4      	bls.n	800cc12 <_printf_i+0x112>
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	d10b      	bne.n	800cc44 <_printf_i+0x144>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	07df      	lsls	r7, r3, #31
 800cc30:	d508      	bpl.n	800cc44 <_printf_i+0x144>
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	6861      	ldr	r1, [r4, #4]
 800cc36:	4299      	cmp	r1, r3
 800cc38:	bfde      	ittt	le
 800cc3a:	2330      	movle	r3, #48	@ 0x30
 800cc3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc44:	1b92      	subs	r2, r2, r6
 800cc46:	6122      	str	r2, [r4, #16]
 800cc48:	f8cd a000 	str.w	sl, [sp]
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	aa03      	add	r2, sp, #12
 800cc50:	4621      	mov	r1, r4
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7ff fee6 	bl	800ca24 <_printf_common>
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d14a      	bne.n	800ccf2 <_printf_i+0x1f2>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	b004      	add	sp, #16
 800cc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	f043 0320 	orr.w	r3, r3, #32
 800cc6c:	6023      	str	r3, [r4, #0]
 800cc6e:	4833      	ldr	r0, [pc, #204]	@ (800cd3c <_printf_i+0x23c>)
 800cc70:	2778      	movs	r7, #120	@ 0x78
 800cc72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	6831      	ldr	r1, [r6, #0]
 800cc7a:	061f      	lsls	r7, r3, #24
 800cc7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc80:	d402      	bmi.n	800cc88 <_printf_i+0x188>
 800cc82:	065f      	lsls	r7, r3, #25
 800cc84:	bf48      	it	mi
 800cc86:	b2ad      	uxthmi	r5, r5
 800cc88:	6031      	str	r1, [r6, #0]
 800cc8a:	07d9      	lsls	r1, r3, #31
 800cc8c:	bf44      	itt	mi
 800cc8e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc92:	6023      	strmi	r3, [r4, #0]
 800cc94:	b11d      	cbz	r5, 800cc9e <_printf_i+0x19e>
 800cc96:	2310      	movs	r3, #16
 800cc98:	e7ac      	b.n	800cbf4 <_printf_i+0xf4>
 800cc9a:	4827      	ldr	r0, [pc, #156]	@ (800cd38 <_printf_i+0x238>)
 800cc9c:	e7e9      	b.n	800cc72 <_printf_i+0x172>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	f023 0320 	bic.w	r3, r3, #32
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	e7f6      	b.n	800cc96 <_printf_i+0x196>
 800cca8:	4616      	mov	r6, r2
 800ccaa:	e7bd      	b.n	800cc28 <_printf_i+0x128>
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	6961      	ldr	r1, [r4, #20]
 800ccb2:	1d18      	adds	r0, r3, #4
 800ccb4:	6030      	str	r0, [r6, #0]
 800ccb6:	062e      	lsls	r6, r5, #24
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	d501      	bpl.n	800ccc0 <_printf_i+0x1c0>
 800ccbc:	6019      	str	r1, [r3, #0]
 800ccbe:	e002      	b.n	800ccc6 <_printf_i+0x1c6>
 800ccc0:	0668      	lsls	r0, r5, #25
 800ccc2:	d5fb      	bpl.n	800ccbc <_printf_i+0x1bc>
 800ccc4:	8019      	strh	r1, [r3, #0]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6123      	str	r3, [r4, #16]
 800ccca:	4616      	mov	r6, r2
 800cccc:	e7bc      	b.n	800cc48 <_printf_i+0x148>
 800ccce:	6833      	ldr	r3, [r6, #0]
 800ccd0:	1d1a      	adds	r2, r3, #4
 800ccd2:	6032      	str	r2, [r6, #0]
 800ccd4:	681e      	ldr	r6, [r3, #0]
 800ccd6:	6862      	ldr	r2, [r4, #4]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f7f3 faa0 	bl	8000220 <memchr>
 800cce0:	b108      	cbz	r0, 800cce6 <_printf_i+0x1e6>
 800cce2:	1b80      	subs	r0, r0, r6
 800cce4:	6060      	str	r0, [r4, #4]
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	2300      	movs	r3, #0
 800ccec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccf0:	e7aa      	b.n	800cc48 <_printf_i+0x148>
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	47d0      	blx	sl
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	d0ad      	beq.n	800cc5c <_printf_i+0x15c>
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	079b      	lsls	r3, r3, #30
 800cd04:	d413      	bmi.n	800cd2e <_printf_i+0x22e>
 800cd06:	68e0      	ldr	r0, [r4, #12]
 800cd08:	9b03      	ldr	r3, [sp, #12]
 800cd0a:	4298      	cmp	r0, r3
 800cd0c:	bfb8      	it	lt
 800cd0e:	4618      	movlt	r0, r3
 800cd10:	e7a6      	b.n	800cc60 <_printf_i+0x160>
 800cd12:	2301      	movs	r3, #1
 800cd14:	4632      	mov	r2, r6
 800cd16:	4649      	mov	r1, r9
 800cd18:	4640      	mov	r0, r8
 800cd1a:	47d0      	blx	sl
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d09d      	beq.n	800cc5c <_printf_i+0x15c>
 800cd20:	3501      	adds	r5, #1
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	9903      	ldr	r1, [sp, #12]
 800cd26:	1a5b      	subs	r3, r3, r1
 800cd28:	42ab      	cmp	r3, r5
 800cd2a:	dcf2      	bgt.n	800cd12 <_printf_i+0x212>
 800cd2c:	e7eb      	b.n	800cd06 <_printf_i+0x206>
 800cd2e:	2500      	movs	r5, #0
 800cd30:	f104 0619 	add.w	r6, r4, #25
 800cd34:	e7f5      	b.n	800cd22 <_printf_i+0x222>
 800cd36:	bf00      	nop
 800cd38:	0800d13d 	.word	0x0800d13d
 800cd3c:	0800d14e 	.word	0x0800d14e

0800cd40 <__sflush_r>:
 800cd40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd48:	0716      	lsls	r6, r2, #28
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	d454      	bmi.n	800cdfa <__sflush_r+0xba>
 800cd50:	684b      	ldr	r3, [r1, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dc02      	bgt.n	800cd5c <__sflush_r+0x1c>
 800cd56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	dd48      	ble.n	800cdee <__sflush_r+0xae>
 800cd5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd5e:	2e00      	cmp	r6, #0
 800cd60:	d045      	beq.n	800cdee <__sflush_r+0xae>
 800cd62:	2300      	movs	r3, #0
 800cd64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd68:	682f      	ldr	r7, [r5, #0]
 800cd6a:	6a21      	ldr	r1, [r4, #32]
 800cd6c:	602b      	str	r3, [r5, #0]
 800cd6e:	d030      	beq.n	800cdd2 <__sflush_r+0x92>
 800cd70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	0759      	lsls	r1, r3, #29
 800cd76:	d505      	bpl.n	800cd84 <__sflush_r+0x44>
 800cd78:	6863      	ldr	r3, [r4, #4]
 800cd7a:	1ad2      	subs	r2, r2, r3
 800cd7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd7e:	b10b      	cbz	r3, 800cd84 <__sflush_r+0x44>
 800cd80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd82:	1ad2      	subs	r2, r2, r3
 800cd84:	2300      	movs	r3, #0
 800cd86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd88:	6a21      	ldr	r1, [r4, #32]
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b0      	blx	r6
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	d106      	bne.n	800cda2 <__sflush_r+0x62>
 800cd94:	6829      	ldr	r1, [r5, #0]
 800cd96:	291d      	cmp	r1, #29
 800cd98:	d82b      	bhi.n	800cdf2 <__sflush_r+0xb2>
 800cd9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ce44 <__sflush_r+0x104>)
 800cd9c:	410a      	asrs	r2, r1
 800cd9e:	07d6      	lsls	r6, r2, #31
 800cda0:	d427      	bmi.n	800cdf2 <__sflush_r+0xb2>
 800cda2:	2200      	movs	r2, #0
 800cda4:	6062      	str	r2, [r4, #4]
 800cda6:	04d9      	lsls	r1, r3, #19
 800cda8:	6922      	ldr	r2, [r4, #16]
 800cdaa:	6022      	str	r2, [r4, #0]
 800cdac:	d504      	bpl.n	800cdb8 <__sflush_r+0x78>
 800cdae:	1c42      	adds	r2, r0, #1
 800cdb0:	d101      	bne.n	800cdb6 <__sflush_r+0x76>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	b903      	cbnz	r3, 800cdb8 <__sflush_r+0x78>
 800cdb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdba:	602f      	str	r7, [r5, #0]
 800cdbc:	b1b9      	cbz	r1, 800cdee <__sflush_r+0xae>
 800cdbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdc2:	4299      	cmp	r1, r3
 800cdc4:	d002      	beq.n	800cdcc <__sflush_r+0x8c>
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f7ff fbf2 	bl	800c5b0 <_free_r>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdd0:	e00d      	b.n	800cdee <__sflush_r+0xae>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	47b0      	blx	r6
 800cdd8:	4602      	mov	r2, r0
 800cdda:	1c50      	adds	r0, r2, #1
 800cddc:	d1c9      	bne.n	800cd72 <__sflush_r+0x32>
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d0c6      	beq.n	800cd72 <__sflush_r+0x32>
 800cde4:	2b1d      	cmp	r3, #29
 800cde6:	d001      	beq.n	800cdec <__sflush_r+0xac>
 800cde8:	2b16      	cmp	r3, #22
 800cdea:	d11e      	bne.n	800ce2a <__sflush_r+0xea>
 800cdec:	602f      	str	r7, [r5, #0]
 800cdee:	2000      	movs	r0, #0
 800cdf0:	e022      	b.n	800ce38 <__sflush_r+0xf8>
 800cdf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdf6:	b21b      	sxth	r3, r3
 800cdf8:	e01b      	b.n	800ce32 <__sflush_r+0xf2>
 800cdfa:	690f      	ldr	r7, [r1, #16]
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	d0f6      	beq.n	800cdee <__sflush_r+0xae>
 800ce00:	0793      	lsls	r3, r2, #30
 800ce02:	680e      	ldr	r6, [r1, #0]
 800ce04:	bf08      	it	eq
 800ce06:	694b      	ldreq	r3, [r1, #20]
 800ce08:	600f      	str	r7, [r1, #0]
 800ce0a:	bf18      	it	ne
 800ce0c:	2300      	movne	r3, #0
 800ce0e:	eba6 0807 	sub.w	r8, r6, r7
 800ce12:	608b      	str	r3, [r1, #8]
 800ce14:	f1b8 0f00 	cmp.w	r8, #0
 800ce18:	dde9      	ble.n	800cdee <__sflush_r+0xae>
 800ce1a:	6a21      	ldr	r1, [r4, #32]
 800ce1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce1e:	4643      	mov	r3, r8
 800ce20:	463a      	mov	r2, r7
 800ce22:	4628      	mov	r0, r5
 800ce24:	47b0      	blx	r6
 800ce26:	2800      	cmp	r0, #0
 800ce28:	dc08      	bgt.n	800ce3c <__sflush_r+0xfc>
 800ce2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce32:	81a3      	strh	r3, [r4, #12]
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295
 800ce38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce3c:	4407      	add	r7, r0
 800ce3e:	eba8 0800 	sub.w	r8, r8, r0
 800ce42:	e7e7      	b.n	800ce14 <__sflush_r+0xd4>
 800ce44:	dfbffffe 	.word	0xdfbffffe

0800ce48 <_fflush_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	690b      	ldr	r3, [r1, #16]
 800ce4c:	4605      	mov	r5, r0
 800ce4e:	460c      	mov	r4, r1
 800ce50:	b913      	cbnz	r3, 800ce58 <_fflush_r+0x10>
 800ce52:	2500      	movs	r5, #0
 800ce54:	4628      	mov	r0, r5
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	b118      	cbz	r0, 800ce62 <_fflush_r+0x1a>
 800ce5a:	6a03      	ldr	r3, [r0, #32]
 800ce5c:	b90b      	cbnz	r3, 800ce62 <_fflush_r+0x1a>
 800ce5e:	f7ff f9ad 	bl	800c1bc <__sinit>
 800ce62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0f3      	beq.n	800ce52 <_fflush_r+0xa>
 800ce6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce6c:	07d0      	lsls	r0, r2, #31
 800ce6e:	d404      	bmi.n	800ce7a <_fflush_r+0x32>
 800ce70:	0599      	lsls	r1, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_fflush_r+0x32>
 800ce74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce76:	f7ff fb98 	bl	800c5aa <__retarget_lock_acquire_recursive>
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	f7ff ff5f 	bl	800cd40 <__sflush_r>
 800ce82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce84:	07da      	lsls	r2, r3, #31
 800ce86:	4605      	mov	r5, r0
 800ce88:	d4e4      	bmi.n	800ce54 <_fflush_r+0xc>
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	059b      	lsls	r3, r3, #22
 800ce8e:	d4e1      	bmi.n	800ce54 <_fflush_r+0xc>
 800ce90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce92:	f7ff fb8b 	bl	800c5ac <__retarget_lock_release_recursive>
 800ce96:	e7dd      	b.n	800ce54 <_fflush_r+0xc>

0800ce98 <__swhatbuf_r>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea0:	2900      	cmp	r1, #0
 800cea2:	b096      	sub	sp, #88	@ 0x58
 800cea4:	4615      	mov	r5, r2
 800cea6:	461e      	mov	r6, r3
 800cea8:	da0d      	bge.n	800cec6 <__swhatbuf_r+0x2e>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ceb0:	f04f 0100 	mov.w	r1, #0
 800ceb4:	bf14      	ite	ne
 800ceb6:	2340      	movne	r3, #64	@ 0x40
 800ceb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cebc:	2000      	movs	r0, #0
 800cebe:	6031      	str	r1, [r6, #0]
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	b016      	add	sp, #88	@ 0x58
 800cec4:	bd70      	pop	{r4, r5, r6, pc}
 800cec6:	466a      	mov	r2, sp
 800cec8:	f000 f848 	bl	800cf5c <_fstat_r>
 800cecc:	2800      	cmp	r0, #0
 800cece:	dbec      	blt.n	800ceaa <__swhatbuf_r+0x12>
 800ced0:	9901      	ldr	r1, [sp, #4]
 800ced2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ced6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ceda:	4259      	negs	r1, r3
 800cedc:	4159      	adcs	r1, r3
 800cede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cee2:	e7eb      	b.n	800cebc <__swhatbuf_r+0x24>

0800cee4 <__smakebuf_r>:
 800cee4:	898b      	ldrh	r3, [r1, #12]
 800cee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cee8:	079d      	lsls	r5, r3, #30
 800ceea:	4606      	mov	r6, r0
 800ceec:	460c      	mov	r4, r1
 800ceee:	d507      	bpl.n	800cf00 <__smakebuf_r+0x1c>
 800cef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	6123      	str	r3, [r4, #16]
 800cef8:	2301      	movs	r3, #1
 800cefa:	6163      	str	r3, [r4, #20]
 800cefc:	b003      	add	sp, #12
 800cefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf00:	ab01      	add	r3, sp, #4
 800cf02:	466a      	mov	r2, sp
 800cf04:	f7ff ffc8 	bl	800ce98 <__swhatbuf_r>
 800cf08:	9f00      	ldr	r7, [sp, #0]
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff fbba 	bl	800c688 <_malloc_r>
 800cf14:	b948      	cbnz	r0, 800cf2a <__smakebuf_r+0x46>
 800cf16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf1a:	059a      	lsls	r2, r3, #22
 800cf1c:	d4ee      	bmi.n	800cefc <__smakebuf_r+0x18>
 800cf1e:	f023 0303 	bic.w	r3, r3, #3
 800cf22:	f043 0302 	orr.w	r3, r3, #2
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	e7e2      	b.n	800cef0 <__smakebuf_r+0xc>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	6020      	str	r0, [r4, #0]
 800cf2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf3a:	b15b      	cbz	r3, 800cf54 <__smakebuf_r+0x70>
 800cf3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 f81d 	bl	800cf80 <_isatty_r>
 800cf46:	b128      	cbz	r0, 800cf54 <__smakebuf_r+0x70>
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	f023 0303 	bic.w	r3, r3, #3
 800cf4e:	f043 0301 	orr.w	r3, r3, #1
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	431d      	orrs	r5, r3
 800cf58:	81a5      	strh	r5, [r4, #12]
 800cf5a:	e7cf      	b.n	800cefc <__smakebuf_r+0x18>

0800cf5c <_fstat_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d07      	ldr	r5, [pc, #28]	@ (800cf7c <_fstat_r+0x20>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	4611      	mov	r1, r2
 800cf68:	602b      	str	r3, [r5, #0]
 800cf6a:	f7f4 f93f 	bl	80011ec <_fstat>
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	d102      	bne.n	800cf78 <_fstat_r+0x1c>
 800cf72:	682b      	ldr	r3, [r5, #0]
 800cf74:	b103      	cbz	r3, 800cf78 <_fstat_r+0x1c>
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	bd38      	pop	{r3, r4, r5, pc}
 800cf7a:	bf00      	nop
 800cf7c:	200015b4 	.word	0x200015b4

0800cf80 <_isatty_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d06      	ldr	r5, [pc, #24]	@ (800cf9c <_isatty_r+0x1c>)
 800cf84:	2300      	movs	r3, #0
 800cf86:	4604      	mov	r4, r0
 800cf88:	4608      	mov	r0, r1
 800cf8a:	602b      	str	r3, [r5, #0]
 800cf8c:	f7f4 f93e 	bl	800120c <_isatty>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d102      	bne.n	800cf9a <_isatty_r+0x1a>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	b103      	cbz	r3, 800cf9a <_isatty_r+0x1a>
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	200015b4 	.word	0x200015b4

0800cfa0 <_sbrk_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d06      	ldr	r5, [pc, #24]	@ (800cfbc <_sbrk_r+0x1c>)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	602b      	str	r3, [r5, #0]
 800cfac:	f7f4 f946 	bl	800123c <_sbrk>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d102      	bne.n	800cfba <_sbrk_r+0x1a>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b103      	cbz	r3, 800cfba <_sbrk_r+0x1a>
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	200015b4 	.word	0x200015b4

0800cfc0 <_init>:
 800cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc2:	bf00      	nop
 800cfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc6:	bc08      	pop	{r3}
 800cfc8:	469e      	mov	lr, r3
 800cfca:	4770      	bx	lr

0800cfcc <_fini>:
 800cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfce:	bf00      	nop
 800cfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd2:	bc08      	pop	{r3}
 800cfd4:	469e      	mov	lr, r3
 800cfd6:	4770      	bx	lr
